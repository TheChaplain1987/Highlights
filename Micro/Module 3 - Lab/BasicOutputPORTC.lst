CCS PCH C Compiler, Version 5.085, 47635               20-Sep-23 13:33

               Filename:   D:\Microcontrollers\External Interrupts\Module 4 - Lab\BasicOutputPORTC.lst

               ROM used:   546 bytes (2%)
                           Largest free fragment is 32218
               RAM used:   66 (4%) at main() level
                           66 (4%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   00B6
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include <18f4520.h> 
.................... //////////// Standard Header file for the PIC18F4520 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4520 
*
0204:  ADDWF  FE8,W
0206:  CLRF   FF7
0208:  RLCF   FF7,F
020A:  ADDLW  1F
020C:  MOVWF  FF6
020E:  MOVLW  02
0210:  ADDWFC FF7,F
0212:  TBLRD*-
0214:  MOVF   FF5,W
0216:  MOVWF  FFA
0218:  TBLRD*
021A:  MOVF   FF5,W
021C:  MOVWF  FF9
021E:  DATA C0,01
0220:  DATA CE,01
0222:  DATA DC,01
0224:  DATA EA,01
....................  
.................... #list 
....................  
.................... #use delay( clock = 20000000 )  // Set clock to 20MHz 
.................... #fuses HS, NOWDT, NOLVP 
.................... #include "../Library/myLibrary.h" 
.................... // A library for the PIC18F4520 
....................  
.................... int *TRISA = 0xF92; // Connect to TRISx 
.................... int *TRISB = 0xF93; 
.................... int *TRISC = 0xF94; 
.................... int *TRISD = 0xF95; 
.................... int *TRISE = 0xF96; 
....................  
.................... int *LATA = 0xF89;  // Connect to LATx 
.................... int *LATB = 0xF8A; 
.................... int *LATC = 0xF8B; 
.................... int *LATD = 0xF8C; 
.................... int *LATE = 0xF8D; 
....................  
.................... int *PORTA = 0xF80; // Connect to LATx 
.................... int *PORTB = 0xF81; 
.................... int *PORTC = 0xF82; 
.................... int *PORTD = 0xF83; 
.................... int *PORTE = 0xF84; 
....................  
.................... struct _adcon1 {   // Analog vs digital 
....................    int PCFGx:4; 
....................    int VCFG0:1; 
....................    int VCFG1:1; 
....................    int unused:2; 
.................... }; 
.................... struct _adcon1 *ADCON1 = 0xFC1; 
....................  
.................... struct _intcon { 
....................    int RBIF:1; 
....................    int INT0IF:1; 
....................    int TMR0IF:1; 
....................    int RBIE:1; 
....................    int INT0IE:1; 
....................    int TMR0IE:1; 
....................    int PEIE:1; 
....................    int GIE:1; 
.................... }; 
.................... struct _intcon *INTCON = 0xFF2; 
....................  
.................... struct _intcon3 { 
....................    int INT1IF:1; 
....................    int INT2IF:1; 
....................    int unused:1; 
....................    int INT1IE:1; 
....................    int INT2IE:1; 
....................    int notused:1; 
....................    int INT1IP:1; 
....................    int INT2IP:1; 
.................... }; 
.................... struct _intcon3 *INTCON3 = 0xFF0; 
....................  
.................... struct _intcon2 {  // Interrupts 
....................    int RBIP:1; 
....................    int unused:1; 
....................    int TMR0IP:1; 
....................    int notused:1; 
....................    int INTEDG2:1; 
....................    int INTEDG1:1; 
....................    int INTEDG0:1; 
....................    int RBPU:1; 
.................... }; 
.................... struct _intcon2 *INTCON2 = 0xFF1; 
....................  
....................  
.................... int index = 1; 
....................  
.................... #INT_EXT 
.................... void int_ext_isr() { 
....................    index++; 
*
00AE:  INCF   3F,F
00B0:  BCF    FF2.1
00B2:  GOTO   0060
.................... } 
....................  
.................... main() { 
00B6:  CLRF   FF8
00B8:  BCF    FD0.7
00BA:  BSF    07.7
00BC:  MOVLW  0F
00BE:  MOVWF  1A
00C0:  MOVLW  92
00C2:  MOVWF  19
00C4:  MOVLW  0F
00C6:  MOVWF  1C
00C8:  MOVLW  93
00CA:  MOVWF  1B
00CC:  MOVLW  0F
00CE:  MOVWF  1E
00D0:  MOVLW  94
00D2:  MOVWF  1D
00D4:  MOVLW  0F
00D6:  MOVWF  20
00D8:  MOVLW  95
00DA:  MOVWF  1F
00DC:  MOVLW  0F
00DE:  MOVWF  22
00E0:  MOVLW  96
00E2:  MOVWF  21
00E4:  MOVLW  0F
00E6:  MOVWF  24
00E8:  MOVLW  89
00EA:  MOVWF  23
00EC:  MOVLW  0F
00EE:  MOVWF  26
00F0:  MOVLW  8A
00F2:  MOVWF  25
00F4:  MOVLW  0F
00F6:  MOVWF  28
00F8:  MOVLW  8B
00FA:  MOVWF  27
00FC:  MOVLW  0F
00FE:  MOVWF  2A
0100:  MOVLW  8C
0102:  MOVWF  29
0104:  MOVLW  0F
0106:  MOVWF  2C
0108:  MOVLW  8D
010A:  MOVWF  2B
010C:  MOVLW  0F
010E:  MOVWF  2E
0110:  MOVLW  80
0112:  MOVWF  2D
0114:  MOVLW  0F
0116:  MOVWF  30
0118:  MOVLW  81
011A:  MOVWF  2F
011C:  MOVLW  0F
011E:  MOVWF  32
0120:  MOVLW  82
0122:  MOVWF  31
0124:  MOVLW  0F
0126:  MOVWF  34
0128:  MOVLW  83
012A:  MOVWF  33
012C:  MOVLW  0F
012E:  MOVWF  36
0130:  MOVLW  84
0132:  MOVWF  35
0134:  MOVLW  0F
0136:  MOVWF  38
0138:  MOVLW  C1
013A:  MOVWF  37
013C:  MOVLW  0F
013E:  MOVWF  3A
0140:  MOVLW  F2
0142:  MOVWF  39
0144:  MOVLW  0F
0146:  MOVWF  3C
0148:  MOVLW  F0
014A:  MOVWF  3B
014C:  MOVLW  0F
014E:  MOVWF  3E
0150:  MOVLW  F1
0152:  MOVWF  3D
0154:  MOVLW  01
0156:  MOVWF  3F
0158:  MOVF   FC1,W
015A:  ANDLW  C0
015C:  IORLW  0F
015E:  MOVWF  FC1
0160:  MOVLW  07
0162:  MOVWF  FB4
....................  
....................    // Setting PORTC 
....................    *TRISC = 0x00;          // Make all PORTC output 
0164:  MOVFF  1D,FE9
0168:  MOVFF  1E,FEA
016C:  CLRF   FEF
....................     
....................    // Setting PORTB 
....................    ADCON1 -> PCFGx = 15;   // ALL analog 
016E:  MOVFF  37,FE9
0172:  MOVFF  38,FEA
0176:  MOVLW  F0
0178:  ANDWF  FEF,W
017A:  IORLW  0F
017C:  MOVWF  FEF
....................    *TRISB = 0x01;          // Make B0 input  
017E:  MOVFF  1B,FE9
0182:  MOVFF  1C,FEA
0186:  MOVLW  01
0188:  MOVWF  FEF
....................    INTCON2 -> INTEDG0 = 1; // Trigger on raising edge 
018A:  MOVFF  3D,FE9
018E:  MOVFF  3E,FEA
0192:  BSF    FEF.6
....................    INTCON -> INT0IE = 1;   // Must enable these 3 pins 
0194:  MOVFF  39,FE9
0198:  MOVFF  3A,FEA
019C:  BSF    FEF.4
....................    INTCON -> PEIE = 1;     // for INTCON to work 
019E:  MOVFF  39,FE9
01A2:  MOVFF  3A,FEA
01A6:  BSF    FEF.6
....................    INTCON -> GIE = 1; 
01A8:  MOVFF  39,FE9
01AC:  MOVFF  3A,FEA
01B0:  BSF    FEF.7
....................     
....................    while( 1 ) { 
....................     
....................       switch( index ) { 
01B2:  MOVLW  01
01B4:  SUBWF  3F,W
01B6:  ADDLW  FC
01B8:  BC    01F6
01BA:  ADDLW  04
01BC:  GOTO   0204
....................          case 1:; 
....................             *LATC = 0x1F; 
01C0:  MOVFF  27,FE9
01C4:  MOVFF  28,FEA
01C8:  MOVLW  1F
01CA:  MOVWF  FEF
....................             break; 
01CC:  BRA    01F6
....................          case 2: 
....................             *LATC = 0x2F; 
01CE:  MOVFF  27,FE9
01D2:  MOVFF  28,FEA
01D6:  MOVLW  2F
01D8:  MOVWF  FEF
....................             break; 
01DA:  BRA    01F6
....................          case 3: 
....................             *LATC = 0x4F; 
01DC:  MOVFF  27,FE9
01E0:  MOVFF  28,FEA
01E4:  MOVLW  4F
01E6:  MOVWF  FEF
....................             break; 
01E8:  BRA    01F6
....................          case 4: 
....................             *LATC = 0x8F; 
01EA:  MOVFF  27,FE9
01EE:  MOVFF  28,FEA
01F2:  MOVLW  8F
01F4:  MOVWF  FEF
....................             break; 
....................       } 
....................        
....................       if( index == 5 ) { 
01F6:  MOVF   3F,W
01F8:  SUBLW  05
01FA:  BNZ   0200
....................       index = 1; 
01FC:  MOVLW  01
01FE:  MOVWF  3F
....................       } 
0200:  BRA    01B2
....................        
....................    } 
.................... } 
0202:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
