CCS PCH C Compiler, Version 5.085, 47635               24-Oct-23 13:51

               Filename:   D:\Microcontrollers\AtoD\Module 4 Lab\AtoDButtonR2R.lst

               ROM used:   1846 bytes (6%)
                           Largest free fragment is 30918
               RAM used:   85 (6%) at main() level
                           108 (7%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0456
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.6
0056:  GOTO   0060
005A:  BTFSC  F9E.6
005C:  GOTO   01EE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include <18f4520.h> 
.................... //////////// Standard Header file for the PIC18F4520 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4520 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA 2C,0F
00C0:  DATA 01,06
00C2:  MOVLW  8E
00C4:  MOVWF  00
00C6:  MOVFF  62,01
00CA:  MOVFF  61,02
00CE:  CLRF   03
00D0:  MOVF   01,F
00D2:  BNZ   00E6
00D4:  MOVFF  02,01
00D8:  CLRF   02
00DA:  MOVLW  08
00DC:  SUBWF  00,F
00DE:  MOVF   01,F
00E0:  BNZ   00E6
00E2:  CLRF   00
00E4:  BRA    00F6
00E6:  BCF    FD8.0
00E8:  BTFSC  01.7
00EA:  BRA    00F4
00EC:  RLCF   02,F
00EE:  RLCF   01,F
00F0:  DECF   00,F
00F2:  BRA    00E6
00F4:  BCF    01.7
00F6:  GOTO   0206 (RETURN)
00FA:  MOVF   61,W
00FC:  BTFSC  FD8.2
00FE:  BRA    01E2
0100:  MOVWF  00
0102:  MOVF   65,W
0104:  BTFSC  FD8.2
0106:  BRA    01E2
0108:  ADDWF  00,F
010A:  BNC   0114
010C:  MOVLW  81
010E:  ADDWF  00,F
0110:  BC    01E2
0112:  BRA    011C
0114:  MOVLW  7F
0116:  SUBWF  00,F
0118:  BNC   01E2
011A:  BZ    01E2
011C:  MOVFF  62,69
0120:  MOVF   66,W
0122:  XORWF  69,F
0124:  BSF    62.7
0126:  BSF    66.7
0128:  MOVF   64,W
012A:  MULWF  68
012C:  MOVFF  FF4,6B
0130:  MOVF   63,W
0132:  MULWF  67
0134:  MOVFF  FF4,03
0138:  MOVFF  FF3,6A
013C:  MULWF  68
013E:  MOVF   FF3,W
0140:  ADDWF  6B,F
0142:  MOVF   FF4,W
0144:  ADDWFC 6A,F
0146:  MOVLW  00
0148:  ADDWFC 03,F
014A:  MOVF   64,W
014C:  MULWF  67
014E:  MOVF   FF3,W
0150:  ADDWF  6B,F
0152:  MOVF   FF4,W
0154:  ADDWFC 6A,F
0156:  MOVLW  00
0158:  CLRF   02
015A:  ADDWFC 03,F
015C:  ADDWFC 02,F
015E:  MOVF   62,W
0160:  MULWF  68
0162:  MOVF   FF3,W
0164:  ADDWF  6A,F
0166:  MOVF   FF4,W
0168:  ADDWFC 03,F
016A:  MOVLW  00
016C:  ADDWFC 02,F
016E:  MOVF   62,W
0170:  MULWF  67
0172:  MOVF   FF3,W
0174:  ADDWF  03,F
0176:  MOVF   FF4,W
0178:  ADDWFC 02,F
017A:  MOVLW  00
017C:  CLRF   01
017E:  ADDWFC 01,F
0180:  MOVF   64,W
0182:  MULWF  66
0184:  MOVF   FF3,W
0186:  ADDWF  6A,F
0188:  MOVF   FF4,W
018A:  ADDWFC 03,F
018C:  MOVLW  00
018E:  ADDWFC 02,F
0190:  ADDWFC 01,F
0192:  MOVF   63,W
0194:  MULWF  66
0196:  MOVF   FF3,W
0198:  ADDWF  03,F
019A:  MOVF   FF4,W
019C:  ADDWFC 02,F
019E:  MOVLW  00
01A0:  ADDWFC 01,F
01A2:  MOVF   62,W
01A4:  MULWF  66
01A6:  MOVF   FF3,W
01A8:  ADDWF  02,F
01AA:  MOVF   FF4,W
01AC:  ADDWFC 01,F
01AE:  INCF   00,F
01B0:  BTFSC  01.7
01B2:  BRA    01BE
01B4:  RLCF   6A,F
01B6:  RLCF   03,F
01B8:  RLCF   02,F
01BA:  RLCF   01,F
01BC:  DECF   00,F
01BE:  MOVLW  00
01C0:  BTFSS  6A.7
01C2:  BRA    01D8
01C4:  INCF   03,F
01C6:  ADDWFC 02,F
01C8:  ADDWFC 01,F
01CA:  MOVF   01,W
01CC:  BNZ   01D8
01CE:  MOVF   02,W
01D0:  BNZ   01D8
01D2:  MOVF   03,W
01D4:  BNZ   01D8
01D6:  INCF   00,F
01D8:  BTFSC  69.7
01DA:  BSF    01.7
01DC:  BTFSS  69.7
01DE:  BCF    01.7
01E0:  BRA    01EA
01E2:  CLRF   00
01E4:  CLRF   01
01E6:  CLRF   02
01E8:  CLRF   03
01EA:  GOTO   0228 (RETURN)
*
023E:  DATA 0C,53
0240:  DATA 57,31
0242:  DATA 00,00
0244:  DATA 0C,53
0246:  DATA 57,32
0248:  DATA 00,00
024A:  DATA 0C,53
024C:  DATA 57,33
024E:  DATA 00,00
0250:  DATA 0C,53
0252:  DATA 57,34
0254:  DATA 00,00
0256:  DATA 0C,50
0258:  DATA 75,6C
025A:  DATA 73,61
025C:  DATA 72,20
025E:  DATA 75,6E
0260:  DATA 20,62
0262:  DATA 6F,74
0264:  DATA 6F,6E
0266:  DATA 00,00
*
0358:  MOVFF  54,5B
035C:  MOVF   58,W
035E:  XORWF  5B,F
0360:  BTFSS  5B.7
0362:  BRA    036E
0364:  BCF    FD8.2
0366:  BCF    FD8.0
0368:  BTFSC  54.7
036A:  BSF    FD8.0
036C:  BRA    03CC
036E:  MOVFF  54,5B
0372:  MOVFF  57,5C
0376:  MOVF   53,W
0378:  SUBWF  5C,F
037A:  BZ    0388
037C:  BTFSS  5B.7
037E:  BRA    03CC
0380:  MOVF   FD8,W
0382:  XORLW  01
0384:  MOVWF  FD8
0386:  BRA    03CC
0388:  MOVFF  58,5C
038C:  MOVF   54,W
038E:  SUBWF  5C,F
0390:  BZ    039E
0392:  BTFSS  5B.7
0394:  BRA    03CC
0396:  MOVF   FD8,W
0398:  XORLW  01
039A:  MOVWF  FD8
039C:  BRA    03CC
039E:  MOVFF  59,5C
03A2:  MOVF   55,W
03A4:  SUBWF  5C,F
03A6:  BZ    03B4
03A8:  BTFSS  5B.7
03AA:  BRA    03CC
03AC:  MOVF   FD8,W
03AE:  XORLW  01
03B0:  MOVWF  FD8
03B2:  BRA    03CC
03B4:  MOVFF  5A,5C
03B8:  MOVF   56,W
03BA:  SUBWF  5C,F
03BC:  BZ    03CA
03BE:  BTFSS  5B.7
03C0:  BRA    03CC
03C2:  MOVF   FD8,W
03C4:  XORLW  01
03C6:  MOVWF  FD8
03C8:  BRA    03CC
03CA:  BCF    FD8.0
03CC:  RETURN 0
*
0436:  TBLRD*+
0438:  MOVF   FF5,F
043A:  BZ    0454
043C:  MOVFF  FF6,53
0440:  MOVFF  FF7,54
0444:  MOVFF  FF5,55
0448:  BRA    03F2
044A:  MOVFF  53,FF6
044E:  MOVFF  54,FF7
0452:  BRA    0436
0454:  RETURN 0
....................  
.................... #list 
....................  
.................... #use delay (clock = 20000000) 
*
0268:  CLRF   FEA
026A:  MOVLW  56
026C:  MOVWF  FE9
026E:  MOVF   FEF,W
0270:  BZ    028C
0272:  MOVLW  06
0274:  MOVWF  01
0276:  CLRF   00
0278:  DECFSZ 00,F
027A:  BRA    0278
027C:  DECFSZ 01,F
027E:  BRA    0276
0280:  MOVLW  7B
0282:  MOVWF  00
0284:  DECFSZ 00,F
0286:  BRA    0284
0288:  DECFSZ FEF,F
028A:  BRA    0272
028C:  RETURN 0
.................... #fuses HS, NOWDT, NOLVP 
.................... #include "../../Library/myLibrary.h" 
.................... // A library for the PIC18F4520 
....................  
.................... int *TRISA = 0xF92; // Connect to TRISx 
.................... int *TRISB = 0xF93; 
.................... int *TRISC = 0xF94; 
.................... int *TRISD = 0xF95; 
.................... int *TRISE = 0xF96; 
....................  
.................... int *LATA = 0xF89;  // Connect to LATx 
.................... int *LATB = 0xF8A; 
.................... int *LATC = 0xF8B; 
.................... int *LATD = 0xF8C; 
.................... int *LATE = 0xF8D; 
....................  
.................... int *PORTA = 0xF80; // Connect to LATx 
.................... int *PORTB = 0xF81; 
.................... int *PORTC = 0xF82; 
.................... int *PORTD = 0xF83; 
.................... int *PORTE = 0xF84; 
....................  
.................... struct _adcon0 { 
....................    int ADON:1; 
....................    int GODONE:1; 
....................    int CHSx:4; 
....................    int unused:2; 
.................... }; 
.................... struct _adcon0 *ADCON0 = 0xFC2; 
....................  
.................... struct _adcon1 {   // Analog vs digital 
....................    int PCFGx:4; 
....................    int VCFG0:1; 
....................    int VCFG1:1; 
....................    int unused:2; 
.................... }; 
.................... struct _adcon1 *ADCON1 = 0xFC1; 
....................  
.................... struct _adcon2 { 
....................    int ADCSx:3; 
....................    int ACQTx:3; 
....................    int unused:1; 
....................    int ADFM:1; 
.................... }; 
.................... struct _adcon2 *ADCON2 = 0xFC0; 
....................  
.................... int16 *Q = 0xFC3; 
.................... int *ADRESH = 0xFC4; 
.................... int *ADRESL = 0xFC3; 
....................  
.................... struct _intcon { 
....................    int RBIF:1; 
....................    int INT0IF:1; 
....................    int TMR0IF:1; 
....................    int RBIE:1; 
....................    int INT0IE:1; 
....................    int TMR0IE:1; 
....................    int PEIE:1; 
....................    int GIE:1; 
.................... }; 
.................... struct _intcon *INTCON = 0xFF2; 
....................  
.................... struct _intcon3 { 
....................    int INT1IF:1; 
....................    int INT2IF:1; 
....................    int unused:1; 
....................    int INT1IE:1; 
....................    int INT2IE:1; 
....................    int notused:1; 
....................    int INT1IP:1; 
....................    int INT2IP:1; 
.................... }; 
.................... struct _intcon3 *INTCON3 = 0xFF0; 
....................  
.................... struct _intcon2 {  // Interrupts 
....................    int RBIP:1; 
....................    int unused:1; 
....................    int TMR0IP:1; 
....................    int notused:1; 
....................    int INTEDG2:1; 
....................    int INTEDG1:1; 
....................    int INTEDG0:1; 
....................    int RBPU:1; 
.................... }; 
.................... struct _intcon2 *INTCON2 = 0xFF1; 
....................  
.................... struct _pie1 { 
....................    int TMR1IE:1; 
....................    int TMR2IE:1; 
....................    int CCP1IE:1; 
....................    int SSPIE:1; 
....................    int TXIE:1; 
....................    int RCIE:1; 
....................    int ADIE:1; 
....................    int PSPIE:1; 
.................... }; 
.................... struct _pie1 *PIE1 = 0xF9D; 
....................  
.................... struct _t1con { 
....................    int TMR1ON:1; 
....................    int TMR1CS:1; 
....................    int T1SYNC:1; 
....................    int T1OSCEN:1; 
....................    int T1CKPSx:2; 
....................    int T1RUN: 1; 
....................    int RD16:1; 
.................... }; 
.................... struct _t1con *T1CON = 0xFCD; 
....................  
....................  
.................... #include "../../Library/modifiedlcd.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             Modified LCD.C                        //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////         ***This function was modified to fit the Samsumgs6A0069   //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_lcd FALSE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         }lcd; 
.................... //struct lcd_pin_map *lcd = 0xF83; 
....................  
.................... //#if defined(__PCH__) 
.................... //#if defined use_portb_lcd 
.................... //   #byte lcd = 0xF81                   // This puts the entire structure 
.................... //#else 
....................    #byte lcd = 0xF83                   // This puts the entire structure 
.................... //#endif 
.................... //#else 
.................... //#if defined use_portb_lcd 
.................... //   #byte lcd = 6                  // on to port B (at address 6)                ???????? 
.................... //#else 
.................... //   #byte lcd = 8                 // on to port D (at address 8) 
.................... //#endif 
.................... //#endif 
....................  
.................... //#if defined use_portb_lcd 
.................... //   #define set_tris_lcd(x) set_tris_b(x) 
.................... //#else 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... //#endif 
....................  
....................  
.................... #define lcd_type 3           // 0=5x7, 1=5x10, 2=2 lines, 3=2 lines Disp ON 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line             ????????? 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0x0f, 0x01, 0x06}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0x0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,0xF}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
02AC:  MOVLW  F0
02AE:  MOVWF  F95
....................       lcd.rw = 1; 
02B0:  BSF    F83.2
....................       delay_cycles(1); 
02B2:  NOP   
....................       lcd.enable = 1; 
02B4:  BSF    F83.0
....................       delay_cycles(1); 
02B6:  NOP   
....................       high = lcd.data; 
02B8:  SWAPF  F83,W
02BA:  ANDLW  0F
02BC:  MOVWF  5D
....................       lcd.enable = 0; 
02BE:  BCF    F83.0
....................       delay_cycles(1); 
02C0:  NOP   
....................       lcd.enable = 1; 
02C2:  BSF    F83.0
....................       delay_us(1); 
02C4:  BRA    02C6
02C6:  BRA    02C8
02C8:  NOP   
....................       low = lcd.data; 
02CA:  SWAPF  F83,W
02CC:  ANDLW  0F
02CE:  MOVWF  5C
....................       lcd.enable = 0; 
02D0:  BCF    F83.0
....................       set_tris_lcd(LCD_WRITE); 
02D2:  MOVLW  00
02D4:  MOVWF  F95
....................       return( (high<<4) | low); 
02D6:  SWAPF  5D,W
02D8:  MOVWF  00
02DA:  MOVLW  F0
02DC:  ANDWF  00,F
02DE:  MOVF   00,W
02E0:  IORWF  5C,W
02E2:  MOVWF  01
02E4:  GOTO   02EC (RETURN)
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
028E:  SWAPF  5D,W
0290:  ANDLW  F0
0292:  MOVWF  00
0294:  MOVLW  0F
0296:  ANDWF  F83,W
0298:  IORWF  00,W
029A:  MOVWF  F83
....................       delay_cycles(1); 
029C:  NOP   
....................       lcd.enable = 1; 
029E:  BSF    F83.0
....................       delay_us(2); 
02A0:  MOVLW  03
02A2:  MOVWF  00
02A4:  DECFSZ 00,F
02A6:  BRA    02A4
....................       lcd.enable = 0; 
02A8:  BCF    F83.0
02AA:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
02E8:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
02EA:  BRA    02AC
02EC:  MOVFF  01,5C
02F0:  BTFSC  01.7
02F2:  BRA    02EA
....................       lcd.rs = address; 
02F4:  BTFSS  5A.0
02F6:  BCF    F83.1
02F8:  BTFSC  5A.0
02FA:  BSF    F83.1
....................       delay_cycles(1); 
02FC:  NOP   
....................       lcd.rw = 0; 
02FE:  BCF    F83.2
....................       delay_cycles(1); 
0300:  NOP   
....................       lcd.enable = 0; 
0302:  BCF    F83.0
....................       lcd_send_nibble(n >> 4); 
0304:  SWAPF  5B,W
0306:  MOVWF  5C
0308:  MOVLW  0F
030A:  ANDWF  5C,F
030C:  MOVFF  5C,5D
0310:  RCALL  028E
....................       lcd_send_nibble(n & 0xf); 
0312:  MOVF   5B,W
0314:  ANDLW  0F
0316:  MOVWF  5C
0318:  MOVWF  5D
031A:  RCALL  028E
031C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
031E:  MOVLW  00
0320:  MOVWF  F95
....................     delay_ms(45);                                      // modified 
0322:  MOVLW  2D
0324:  MOVWF  56
0326:  RCALL  0268
....................     lcd.rs = 0; 
0328:  BCF    F83.1
....................     lcd.rw = 0; 
032A:  BCF    F83.2
....................     lcd.enable = 0; 
032C:  BCF    F83.0
....................     //delay_ms(15);                                    // modified 
....................     //for(i=1;i<=3;++i) {                              // modified 
....................     //   lcd_send_nibble(3);                           // modified 
....................     //   delay_ms(5);                                  // modified 
....................     //}                                                // modified 
....................     lcd_send_nibble(2); 
032E:  MOVLW  02
0330:  MOVWF  5D
0332:  RCALL  028E
....................     for(i=0;i<=3;++i) 
0334:  CLRF   53
0336:  MOVF   53,W
0338:  SUBLW  03
033A:  BNC   0354
....................        {                                                // modified 
....................           lcd_send_byte(0,LCD_INIT_STRING[i]); 
033C:  CLRF   03
033E:  MOVF   53,W
0340:  RCALL  00AE
0342:  MOVWF  54
0344:  CLRF   5A
0346:  MOVWF  5B
0348:  RCALL  02E8
....................           delay_ms(5);                                  // modified 
034A:  MOVLW  05
034C:  MOVWF  56
034E:  RCALL  0268
0350:  INCF   53,F
0352:  BRA    0336
....................        }                                                // modified 
0354:  GOTO   0546 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
03CE:  DECFSZ 57,W
03D0:  BRA    03D4
03D2:  BRA    03DA
....................      address=lcd_line_two; 
03D4:  MOVLW  40
03D6:  MOVWF  58
03D8:  BRA    03DC
....................    else 
....................      address=0; 
03DA:  CLRF   58
....................    address+=x-1; 
03DC:  MOVLW  01
03DE:  SUBWF  56,W
03E0:  ADDWF  58,F
....................    lcd_send_byte(0,0x80|address); 
03E2:  MOVF   58,W
03E4:  IORLW  80
03E6:  MOVWF  59
03E8:  CLRF   5A
03EA:  MOVWF  5B
03EC:  RCALL  02E8
03EE:  GOTO   0432 (RETURN)
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
03F2:  MOVF   55,W
03F4:  XORLW  0C
03F6:  BZ    0402
03F8:  XORLW  06
03FA:  BZ    0412
03FC:  XORLW  02
03FE:  BZ    041E
0400:  BRA    0428
....................      case '\f'   : lcd_send_byte(0,1); 
0402:  CLRF   5A
0404:  MOVLW  01
0406:  MOVWF  5B
0408:  RCALL  02E8
....................                    delay_ms(2); 
040A:  MOVLW  02
040C:  MOVWF  56
040E:  RCALL  0268
....................                                            break; 
0410:  BRA    0432
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0412:  MOVLW  01
0414:  MOVWF  56
0416:  MOVLW  02
0418:  MOVWF  57
041A:  BRA    03CE
041C:  BRA    0432
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
041E:  CLRF   5A
0420:  MOVLW  10
0422:  MOVWF  5B
0424:  RCALL  02E8
0426:  BRA    0432
....................      default     : lcd_send_byte(1,c);     break; 
0428:  MOVLW  01
042A:  MOVWF  5A
042C:  MOVFF  55,5B
0430:  RCALL  02E8
....................    } 
0432:  GOTO   044A (RETURN)
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... float Vin = 0; 
....................  
.................... #INT_AD 
.................... void int_ad_isr() { 
....................    Vin = *Q * (5.0 / 1023.0 ); 
*
01EE:  MOVFF  3E,03
01F2:  MOVFF  3D,FE9
01F6:  MOVFF  3E,FEA
01FA:  MOVFF  FEC,62
01FE:  MOVF   FED,F
0200:  MOVFF  FEF,61
0204:  BRA    00C2
0206:  MOVFF  03,64
020A:  MOVFF  02,63
020E:  MOVFF  01,62
0212:  MOVFF  00,61
0216:  MOVLW  0A
0218:  MOVWF  68
021A:  MOVLW  28
021C:  MOVWF  67
021E:  MOVLW  20
0220:  MOVWF  66
0222:  MOVLW  77
0224:  MOVWF  65
0226:  BRA    00FA
0228:  MOVFF  03,50
022C:  MOVFF  02,4F
0230:  MOVFF  01,4E
0234:  MOVFF  00,4D
0238:  BCF    F9E.6
023A:  GOTO   0060
.................... } 
....................  
.................... main(){ 
*
0456:  CLRF   FF8
0458:  BCF    FD0.7
045A:  BSF    07.7
045C:  MOVLW  0F
045E:  MOVWF  1A
0460:  MOVLW  92
0462:  MOVWF  19
0464:  MOVLW  0F
0466:  MOVWF  1C
0468:  MOVLW  93
046A:  MOVWF  1B
046C:  MOVLW  0F
046E:  MOVWF  1E
0470:  MOVLW  94
0472:  MOVWF  1D
0474:  MOVLW  0F
0476:  MOVWF  20
0478:  MOVLW  95
047A:  MOVWF  1F
047C:  MOVLW  0F
047E:  MOVWF  22
0480:  MOVLW  96
0482:  MOVWF  21
0484:  MOVLW  0F
0486:  MOVWF  24
0488:  MOVLW  89
048A:  MOVWF  23
048C:  MOVLW  0F
048E:  MOVWF  26
0490:  MOVLW  8A
0492:  MOVWF  25
0494:  MOVLW  0F
0496:  MOVWF  28
0498:  MOVLW  8B
049A:  MOVWF  27
049C:  MOVLW  0F
049E:  MOVWF  2A
04A0:  MOVLW  8C
04A2:  MOVWF  29
04A4:  MOVLW  0F
04A6:  MOVWF  2C
04A8:  MOVLW  8D
04AA:  MOVWF  2B
04AC:  MOVLW  0F
04AE:  MOVWF  2E
04B0:  MOVLW  80
04B2:  MOVWF  2D
04B4:  MOVLW  0F
04B6:  MOVWF  30
04B8:  MOVLW  81
04BA:  MOVWF  2F
04BC:  MOVLW  0F
04BE:  MOVWF  32
04C0:  MOVLW  82
04C2:  MOVWF  31
04C4:  MOVLW  0F
04C6:  MOVWF  34
04C8:  MOVLW  83
04CA:  MOVWF  33
04CC:  MOVLW  0F
04CE:  MOVWF  36
04D0:  MOVLW  84
04D2:  MOVWF  35
04D4:  MOVLW  0F
04D6:  MOVWF  38
04D8:  MOVLW  C2
04DA:  MOVWF  37
04DC:  MOVLW  0F
04DE:  MOVWF  3A
04E0:  MOVLW  C1
04E2:  MOVWF  39
04E4:  MOVLW  0F
04E6:  MOVWF  3C
04E8:  MOVLW  C0
04EA:  MOVWF  3B
04EC:  MOVLW  0F
04EE:  MOVWF  3E
04F0:  MOVLW  C3
04F2:  MOVWF  3D
04F4:  MOVLW  0F
04F6:  MOVWF  40
04F8:  MOVLW  C4
04FA:  MOVWF  3F
04FC:  MOVLW  0F
04FE:  MOVWF  42
0500:  MOVLW  C3
0502:  MOVWF  41
0504:  MOVLW  0F
0506:  MOVWF  44
0508:  MOVLW  F2
050A:  MOVWF  43
050C:  MOVLW  0F
050E:  MOVWF  46
0510:  MOVLW  F0
0512:  MOVWF  45
0514:  MOVLW  0F
0516:  MOVWF  48
0518:  MOVLW  F1
051A:  MOVWF  47
051C:  MOVLW  0F
051E:  MOVWF  4A
0520:  MOVLW  9D
0522:  MOVWF  49
0524:  MOVLW  0F
0526:  MOVWF  4C
0528:  MOVLW  CD
052A:  MOVWF  4B
052C:  CLRF   50
052E:  CLRF   4F
0530:  CLRF   4E
0532:  CLRF   4D
0534:  CLRF   52
0536:  CLRF   51
0538:  MOVF   FC1,W
053A:  ANDLW  C0
053C:  IORLW  0F
053E:  MOVWF  FC1
0540:  MOVLW  07
0542:  MOVWF  FB4
....................    // Initialize LCD 
....................    lcd_init(); 
0544:  BRA    031E
....................     
....................    // Analog setup 
....................    *TRISA = 0x01; 
0546:  MOVFF  19,FE9
054A:  MOVFF  1A,FEA
054E:  MOVLW  01
0550:  MOVWF  FEF
....................    ADCON1 -> PCFGx = 0xE; 
0552:  MOVFF  39,FE9
0556:  MOVFF  3A,FEA
055A:  MOVLW  F0
055C:  ANDWF  FEF,W
055E:  IORLW  0E
0560:  MOVWF  FEF
....................    ADCON0 -> ADON = 1; 
0562:  MOVFF  37,FE9
0566:  MOVFF  38,FEA
056A:  BSF    FEF.0
....................    ADCON0 -> CHSx = 0;   // Channel 0 
056C:  MOVFF  37,FE9
0570:  MOVFF  38,FEA
0574:  MOVLW  C3
0576:  ANDWF  FEF,W
0578:  MOVWF  FEF
....................    ADCON1 -> VCFG0 = 0;   
057A:  MOVFF  39,FE9
057E:  MOVFF  3A,FEA
0582:  BCF    FEF.4
....................    ADCON1 -> VCFG1 = 0;   
0584:  MOVFF  39,FE9
0588:  MOVFF  3A,FEA
058C:  BCF    FEF.5
....................    ADCON2 -> ADFM = 1;   // Right Justified 
058E:  MOVFF  3B,FE9
0592:  MOVFF  3C,FEA
0596:  BSF    FEF.7
....................    ADCON2 -> ACQTx = 5; 
0598:  MOVFF  3B,FE9
059C:  MOVFF  3C,FEA
05A0:  MOVLW  C7
05A2:  ANDWF  FEF,W
05A4:  IORLW  28
05A6:  MOVWF  FEF
....................    ADCON2 -> ADCSx = 5; 
05A8:  MOVFF  3B,FE9
05AC:  MOVFF  3C,FEA
05B0:  MOVLW  F8
05B2:  ANDWF  FEF,W
05B4:  IORLW  05
05B6:  MOVWF  FEF
....................     
....................    // Interrupt setup 
....................    PIE1 -> ADIE = 1; 
05B8:  MOVFF  49,FE9
05BC:  MOVFF  4A,FEA
05C0:  BSF    FEF.6
....................    INTCON -> PEIE = 1; 
05C2:  MOVFF  43,FE9
05C6:  MOVFF  44,FEA
05CA:  BSF    FEF.6
....................    INTCON -> GIE = 1; 
05CC:  MOVFF  43,FE9
05D0:  MOVFF  44,FEA
05D4:  BSF    FEF.7
....................     
....................    while(1){ 
....................       ADCON0 -> GODONE=1;   // Trigger 
05D6:  MOVFF  37,FE9
05DA:  MOVFF  38,FEA
05DE:  BSF    FEF.1
....................       delay_ms( 250 ); 
05E0:  MOVLW  FA
05E2:  MOVWF  56
05E4:  RCALL  0268
....................        
....................       if( Vin > 3.18 && Vin < 3.20 ) { 
05E6:  MOVLW  1F
05E8:  MOVWF  56
05EA:  MOVLW  85
05EC:  MOVWF  55
05EE:  MOVLW  4B
05F0:  MOVWF  54
05F2:  MOVLW  80
05F4:  MOVWF  53
05F6:  MOVFF  50,5A
05FA:  MOVFF  4F,59
05FE:  MOVFF  4E,58
0602:  MOVFF  4D,57
0606:  RCALL  0358
0608:  BNC   063A
060A:  MOVFF  50,56
060E:  MOVFF  4F,55
0612:  MOVFF  4E,54
0616:  MOVFF  4D,53
061A:  MOVLW  CD
061C:  MOVWF  5A
061E:  MOVLW  CC
0620:  MOVWF  59
0622:  MOVLW  4C
0624:  MOVWF  58
0626:  MOVLW  80
0628:  MOVWF  57
062A:  RCALL  0358
062C:  BNC   063A
....................          printf(lcd_putc,"\fSW1"); 
062E:  MOVLW  3E
0630:  MOVWF  FF6
0632:  MOVLW  02
0634:  MOVWF  FF7
0636:  RCALL  0436
....................       } 
0638:  BRA    0736
....................       else if( Vin > 2.80 && Vin < 2.90 ) { 
063A:  MOVLW  33
063C:  MOVWF  56
063E:  MOVWF  55
0640:  MOVWF  54
0642:  MOVLW  80
0644:  MOVWF  53
0646:  MOVFF  50,5A
064A:  MOVFF  4F,59
064E:  MOVFF  4E,58
0652:  MOVFF  4D,57
0656:  RCALL  0358
0658:  BNC   068A
065A:  MOVFF  50,56
065E:  MOVFF  4F,55
0662:  MOVFF  4E,54
0666:  MOVFF  4D,53
066A:  MOVLW  9A
066C:  MOVWF  5A
066E:  MOVLW  99
0670:  MOVWF  59
0672:  MOVLW  39
0674:  MOVWF  58
0676:  MOVLW  80
0678:  MOVWF  57
067A:  RCALL  0358
067C:  BNC   068A
....................          printf(lcd_putc,"\fSW2"); 
067E:  MOVLW  44
0680:  MOVWF  FF6
0682:  MOVLW  02
0684:  MOVWF  FF7
0686:  RCALL  0436
....................       } 
0688:  BRA    0736
....................       else if( Vin > 2.30 && Vin < 2.40 ) { 
068A:  MOVLW  33
068C:  MOVWF  56
068E:  MOVWF  55
0690:  MOVLW  13
0692:  MOVWF  54
0694:  MOVLW  80
0696:  MOVWF  53
0698:  MOVFF  50,5A
069C:  MOVFF  4F,59
06A0:  MOVFF  4E,58
06A4:  MOVFF  4D,57
06A8:  RCALL  0358
06AA:  BNC   06DC
06AC:  MOVFF  50,56
06B0:  MOVFF  4F,55
06B4:  MOVFF  4E,54
06B8:  MOVFF  4D,53
06BC:  MOVLW  9A
06BE:  MOVWF  5A
06C0:  MOVLW  99
06C2:  MOVWF  59
06C4:  MOVLW  19
06C6:  MOVWF  58
06C8:  MOVLW  80
06CA:  MOVWF  57
06CC:  RCALL  0358
06CE:  BNC   06DC
....................          printf(lcd_putc,"\fSW3"); 
06D0:  MOVLW  4A
06D2:  MOVWF  FF6
06D4:  MOVLW  02
06D6:  MOVWF  FF7
06D8:  RCALL  0436
....................       } 
06DA:  BRA    0736
....................       else if( Vin > 1.50 && Vin < 1.60 ) { 
06DC:  CLRF   56
06DE:  CLRF   55
06E0:  MOVLW  40
06E2:  MOVWF  54
06E4:  MOVLW  7F
06E6:  MOVWF  53
06E8:  MOVFF  50,5A
06EC:  MOVFF  4F,59
06F0:  MOVFF  4E,58
06F4:  MOVFF  4D,57
06F8:  RCALL  0358
06FA:  BNC   072C
06FC:  MOVFF  50,56
0700:  MOVFF  4F,55
0704:  MOVFF  4E,54
0708:  MOVFF  4D,53
070C:  MOVLW  CD
070E:  MOVWF  5A
0710:  MOVLW  CC
0712:  MOVWF  59
0714:  MOVLW  4C
0716:  MOVWF  58
0718:  MOVLW  7F
071A:  MOVWF  57
071C:  RCALL  0358
071E:  BNC   072C
....................          printf(lcd_putc,"\fSW4"); 
0720:  MOVLW  50
0722:  MOVWF  FF6
0724:  MOVLW  02
0726:  MOVWF  FF7
0728:  RCALL  0436
....................       } 
072A:  BRA    0736
....................       else { 
....................          printf(lcd_putc,"\fPulsar un boton"); 
072C:  MOVLW  56
072E:  MOVWF  FF6
0730:  MOVLW  02
0732:  MOVWF  FF7
0734:  RCALL  0436
....................       } 
0736:  BRA    05D6
....................    } 
.................... } 
....................  
0738:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
