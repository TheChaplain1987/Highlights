CCS PCH C Compiler, Version 5.085, 47635               31-Oct-23 15:20

               Filename:   D:\Microcontrollers\Timers\Capture\FrequencyCounterOG.lst

               ROM used:   2568 bytes (8%)
                           Largest free fragment is 30196
               RAM used:   100 (7%) at main() level
                           140 (9%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   07E4
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   00CE
0060:  BTFSS  F9D.2
0062:  GOTO   006C
0066:  BTFSC  F9E.2
0068:  GOTO   0130
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include <18f4520.h> 
.................... //////////// Standard Header file for the PIC18F4520 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4520 
00BA:  CLRF   FF7
00BC:  ADDLW  CA
00BE:  MOVWF  FF6
00C0:  MOVLW  00
00C2:  ADDWFC FF7,F
00C4:  TBLRD*+
00C6:  MOVF   FF5,W
00C8:  RETURN 0
00CA:  DATA 2C,0F
00CC:  DATA 01,06
*
00DA:  CLRF   x86
00DC:  CLRF   x87
00DE:  MOVLW  01
00E0:  MOVWF  x88
00E2:  CLRF   FDA
00E4:  CLRF   FD9
00E6:  CLRF   x8B
00E8:  MOVLW  7E
00EA:  MOVWF  x8A
00EC:  CLRF   FEA
00EE:  MOVLW  82
00F0:  MOVWF  FE9
00F2:  MOVFF  8B,FE2
00F6:  MOVFF  8A,FE1
00FA:  MOVFF  88,89
00FE:  BCF    FD8.0
0100:  MOVF   FE5,W
0102:  MULWF  FEE
0104:  MOVF   FF3,W
0106:  ADDWFC x86,F
0108:  MOVF   FF4,W
010A:  ADDWFC x87,F
010C:  DECFSZ x89,F
010E:  BRA    00FE
0110:  MOVFF  86,FDE
0114:  MOVFF  87,86
0118:  CLRF   x87
011A:  BTFSC  FD8.0
011C:  INCF   x87,F
011E:  INCF   x8A,F
0120:  BTFSC  FD8.2
0122:  INCF   x8B,F
0124:  INCF   x88,F
0126:  MOVF   x88,W
0128:  SUBLW  05
012A:  BNZ   00EC
012C:  GOTO   0158 (RETURN)
*
0196:  DATA 0C,20
0198:  DATA 46,20
019A:  DATA 3D,20
019C:  DATA 25,66
019E:  DATA 00,00
*
0290:  MOVLW  8E
0292:  MOVWF  00
0294:  MOVFF  61,01
0298:  MOVFF  60,02
029C:  CLRF   03
029E:  MOVF   01,F
02A0:  BNZ   02B4
02A2:  MOVFF  02,01
02A6:  CLRF   02
02A8:  MOVLW  08
02AA:  SUBWF  00,F
02AC:  MOVF   01,F
02AE:  BNZ   02B4
02B0:  CLRF   00
02B2:  BRA    02C4
02B4:  BCF    FD8.0
02B6:  BTFSC  01.7
02B8:  BRA    02C2
02BA:  RLCF   02,F
02BC:  RLCF   01,F
02BE:  DECF   00,F
02C0:  BRA    02B4
02C2:  BCF    01.7
02C4:  GOTO   096A (RETURN)
02C8:  MOVF   71,W
02CA:  BTFSC  FD8.2
02CC:  BRA    03B0
02CE:  MOVWF  00
02D0:  MOVF   75,W
02D2:  BTFSC  FD8.2
02D4:  BRA    03B0
02D6:  ADDWF  00,F
02D8:  BNC   02E2
02DA:  MOVLW  81
02DC:  ADDWF  00,F
02DE:  BC    03B0
02E0:  BRA    02EA
02E2:  MOVLW  7F
02E4:  SUBWF  00,F
02E6:  BNC   03B0
02E8:  BZ    03B0
02EA:  MOVFF  72,79
02EE:  MOVF   76,W
02F0:  XORWF  79,F
02F2:  BSF    72.7
02F4:  BSF    76.7
02F6:  MOVF   74,W
02F8:  MULWF  78
02FA:  MOVFF  FF4,7B
02FE:  MOVF   73,W
0300:  MULWF  77
0302:  MOVFF  FF4,03
0306:  MOVFF  FF3,7A
030A:  MULWF  78
030C:  MOVF   FF3,W
030E:  ADDWF  7B,F
0310:  MOVF   FF4,W
0312:  ADDWFC 7A,F
0314:  MOVLW  00
0316:  ADDWFC 03,F
0318:  MOVF   74,W
031A:  MULWF  77
031C:  MOVF   FF3,W
031E:  ADDWF  7B,F
0320:  MOVF   FF4,W
0322:  ADDWFC 7A,F
0324:  MOVLW  00
0326:  CLRF   02
0328:  ADDWFC 03,F
032A:  ADDWFC 02,F
032C:  MOVF   72,W
032E:  MULWF  78
0330:  MOVF   FF3,W
0332:  ADDWF  7A,F
0334:  MOVF   FF4,W
0336:  ADDWFC 03,F
0338:  MOVLW  00
033A:  ADDWFC 02,F
033C:  MOVF   72,W
033E:  MULWF  77
0340:  MOVF   FF3,W
0342:  ADDWF  03,F
0344:  MOVF   FF4,W
0346:  ADDWFC 02,F
0348:  MOVLW  00
034A:  CLRF   01
034C:  ADDWFC 01,F
034E:  MOVF   74,W
0350:  MULWF  76
0352:  MOVF   FF3,W
0354:  ADDWF  7A,F
0356:  MOVF   FF4,W
0358:  ADDWFC 03,F
035A:  MOVLW  00
035C:  ADDWFC 02,F
035E:  ADDWFC 01,F
0360:  MOVF   73,W
0362:  MULWF  76
0364:  MOVF   FF3,W
0366:  ADDWF  03,F
0368:  MOVF   FF4,W
036A:  ADDWFC 02,F
036C:  MOVLW  00
036E:  ADDWFC 01,F
0370:  MOVF   72,W
0372:  MULWF  76
0374:  MOVF   FF3,W
0376:  ADDWF  02,F
0378:  MOVF   FF4,W
037A:  ADDWFC 01,F
037C:  INCF   00,F
037E:  BTFSC  01.7
0380:  BRA    038C
0382:  RLCF   7A,F
0384:  RLCF   03,F
0386:  RLCF   02,F
0388:  RLCF   01,F
038A:  DECF   00,F
038C:  MOVLW  00
038E:  BTFSS  7A.7
0390:  BRA    03A6
0392:  INCF   03,F
0394:  ADDWFC 02,F
0396:  ADDWFC 01,F
0398:  MOVF   01,W
039A:  BNZ   03A6
039C:  MOVF   02,W
039E:  BNZ   03A6
03A0:  MOVF   03,W
03A2:  BNZ   03A6
03A4:  INCF   00,F
03A6:  BTFSC  79.7
03A8:  BSF    01.7
03AA:  BTFSS  79.7
03AC:  BCF    01.7
03AE:  BRA    03B8
03B0:  CLRF   00
03B2:  CLRF   01
03B4:  CLRF   02
03B6:  CLRF   03
03B8:  RETURN 0
03BA:  MOVF   60,W
03BC:  BTFSC  FD8.2
03BE:  BRA    050A
03C0:  MOVWF  6C
03C2:  MOVF   64,W
03C4:  BTFSC  FD8.2
03C6:  BRA    050A
03C8:  SUBWF  6C,F
03CA:  BNC   03D6
03CC:  MOVLW  7F
03CE:  ADDWF  6C,F
03D0:  BTFSC  FD8.0
03D2:  BRA    050A
03D4:  BRA    03E2
03D6:  MOVLW  81
03D8:  SUBWF  6C,F
03DA:  BTFSS  FD8.0
03DC:  BRA    050A
03DE:  BTFSC  FD8.2
03E0:  BRA    050A
03E2:  MOVFF  6C,00
03E6:  CLRF   01
03E8:  CLRF   02
03EA:  CLRF   03
03EC:  CLRF   6B
03EE:  MOVFF  61,6A
03F2:  BSF    6A.7
03F4:  MOVFF  62,69
03F8:  MOVFF  63,68
03FC:  MOVLW  19
03FE:  MOVWF  6C
0400:  MOVF   67,W
0402:  SUBWF  68,F
0404:  BC    0420
0406:  MOVLW  01
0408:  SUBWF  69,F
040A:  BC    0420
040C:  SUBWF  6A,F
040E:  BC    0420
0410:  SUBWF  6B,F
0412:  BC    0420
0414:  INCF   6B,F
0416:  INCF   6A,F
0418:  INCF   69,F
041A:  MOVF   67,W
041C:  ADDWF  68,F
041E:  BRA    0470
0420:  MOVF   66,W
0422:  SUBWF  69,F
0424:  BC    044A
0426:  MOVLW  01
0428:  SUBWF  6A,F
042A:  BC    044A
042C:  SUBWF  6B,F
042E:  BC    044A
0430:  INCF   6B,F
0432:  INCF   6A,F
0434:  MOVF   66,W
0436:  ADDWF  69,F
0438:  MOVF   67,W
043A:  ADDWF  68,F
043C:  BNC   0470
043E:  INCF   69,F
0440:  BNZ   0470
0442:  INCF   6A,F
0444:  BNZ   0470
0446:  INCF   6B,F
0448:  BRA    0470
044A:  MOVF   65,W
044C:  IORLW  80
044E:  SUBWF  6A,F
0450:  BC    046E
0452:  MOVLW  01
0454:  SUBWF  6B,F
0456:  BC    046E
0458:  INCF   6B,F
045A:  MOVF   65,W
045C:  IORLW  80
045E:  ADDWF  6A,F
0460:  MOVF   66,W
0462:  ADDWF  69,F
0464:  BNC   0438
0466:  INCF   6A,F
0468:  BNZ   0438
046A:  INCF   6B,F
046C:  BRA    0438
046E:  BSF    03.0
0470:  DECFSZ 6C,F
0472:  BRA    0476
0474:  BRA    048C
0476:  BCF    FD8.0
0478:  RLCF   68,F
047A:  RLCF   69,F
047C:  RLCF   6A,F
047E:  RLCF   6B,F
0480:  BCF    FD8.0
0482:  RLCF   03,F
0484:  RLCF   02,F
0486:  RLCF   01,F
0488:  RLCF   6D,F
048A:  BRA    0400
048C:  BTFSS  6D.0
048E:  BRA    049C
0490:  BCF    FD8.0
0492:  RRCF   01,F
0494:  RRCF   02,F
0496:  RRCF   03,F
0498:  RRCF   6D,F
049A:  BRA    04A0
049C:  DECF   00,F
049E:  BZ    050A
04A0:  BTFSC  6D.7
04A2:  BRA    04E0
04A4:  BCF    FD8.0
04A6:  RLCF   68,F
04A8:  RLCF   69,F
04AA:  RLCF   6A,F
04AC:  RLCF   6B,F
04AE:  MOVF   67,W
04B0:  SUBWF  68,F
04B2:  BC    04C2
04B4:  MOVLW  01
04B6:  SUBWF  69,F
04B8:  BC    04C2
04BA:  SUBWF  6A,F
04BC:  BC    04C2
04BE:  SUBWF  6B,F
04C0:  BNC   04F6
04C2:  MOVF   66,W
04C4:  SUBWF  69,F
04C6:  BC    04D2
04C8:  MOVLW  01
04CA:  SUBWF  6A,F
04CC:  BC    04D2
04CE:  SUBWF  6B,F
04D0:  BNC   04F6
04D2:  MOVF   65,W
04D4:  IORLW  80
04D6:  SUBWF  6A,F
04D8:  BC    04E0
04DA:  MOVLW  01
04DC:  SUBWF  6B,F
04DE:  BNC   04F6
04E0:  INCF   03,F
04E2:  BNZ   04F6
04E4:  INCF   02,F
04E6:  BNZ   04F6
04E8:  INCF   01,F
04EA:  BNZ   04F6
04EC:  INCF   00,F
04EE:  BZ    050A
04F0:  RRCF   01,F
04F2:  RRCF   02,F
04F4:  RRCF   03,F
04F6:  MOVFF  61,6C
04FA:  MOVF   65,W
04FC:  XORWF  6C,F
04FE:  BTFSS  6C.7
0500:  BRA    0506
0502:  BSF    01.7
0504:  BRA    0512
0506:  BCF    01.7
0508:  BRA    0512
050A:  CLRF   00
050C:  CLRF   01
050E:  CLRF   02
0510:  CLRF   03
0512:  GOTO   09C8 (RETURN)
*
057C:  TBLRD*+
057E:  MOVFF  FF6,65
0582:  MOVFF  FF7,66
0586:  MOVFF  FF5,71
058A:  RCALL  053A
058C:  MOVFF  65,FF6
0590:  MOVFF  66,FF7
0594:  DECFSZ 64,F
0596:  BRA    057C
0598:  GOTO   09E6 (RETURN)
059C:  MOVF   71,W
059E:  SUBLW  B6
05A0:  MOVWF  71
05A2:  CLRF   03
05A4:  MOVFF  72,75
05A8:  BSF    72.7
05AA:  BCF    FD8.0
05AC:  RRCF   72,F
05AE:  RRCF   73,F
05B0:  RRCF   74,F
05B2:  RRCF   03,F
05B4:  RRCF   02,F
05B6:  RRCF   01,F
05B8:  RRCF   00,F
05BA:  DECFSZ 71,F
05BC:  BRA    05AA
05BE:  BTFSS  75.7
05C0:  BRA    05D8
05C2:  COMF   00,F
05C4:  COMF   01,F
05C6:  COMF   02,F
05C8:  COMF   03,F
05CA:  INCF   00,F
05CC:  BTFSC  FD8.2
05CE:  INCF   01,F
05D0:  BTFSC  FD8.2
05D2:  INCF   02,F
05D4:  BTFSC  FD8.2
05D6:  INCF   03,F
05D8:  GOTO   06B8 (RETURN)
05DC:  BTFSC  FD8.1
05DE:  BRA    05E6
05E0:  CLRF   FEA
05E2:  MOVLW  79
05E4:  MOVWF  FE9
05E6:  CLRF   00
05E8:  CLRF   01
05EA:  CLRF   02
05EC:  CLRF   03
05EE:  CLRF   79
05F0:  CLRF   7A
05F2:  CLRF   7B
05F4:  CLRF   7C
05F6:  MOVF   78,W
05F8:  IORWF  77,W
05FA:  IORWF  76,W
05FC:  IORWF  75,W
05FE:  BZ    0658
0600:  MOVLW  20
0602:  MOVWF  7D
0604:  BCF    FD8.0
0606:  RLCF   71,F
0608:  RLCF   72,F
060A:  RLCF   73,F
060C:  RLCF   74,F
060E:  RLCF   79,F
0610:  RLCF   7A,F
0612:  RLCF   7B,F
0614:  RLCF   7C,F
0616:  MOVF   78,W
0618:  SUBWF  7C,W
061A:  BNZ   062C
061C:  MOVF   77,W
061E:  SUBWF  7B,W
0620:  BNZ   062C
0622:  MOVF   76,W
0624:  SUBWF  7A,W
0626:  BNZ   062C
0628:  MOVF   75,W
062A:  SUBWF  79,W
062C:  BNC   064C
062E:  MOVF   75,W
0630:  SUBWF  79,F
0632:  MOVF   76,W
0634:  BTFSS  FD8.0
0636:  INCFSZ 76,W
0638:  SUBWF  7A,F
063A:  MOVF   77,W
063C:  BTFSS  FD8.0
063E:  INCFSZ 77,W
0640:  SUBWF  7B,F
0642:  MOVF   78,W
0644:  BTFSS  FD8.0
0646:  INCFSZ 78,W
0648:  SUBWF  7C,F
064A:  BSF    FD8.0
064C:  RLCF   00,F
064E:  RLCF   01,F
0650:  RLCF   02,F
0652:  RLCF   03,F
0654:  DECFSZ 7D,F
0656:  BRA    0604
0658:  MOVFF  79,FEF
065C:  MOVFF  7A,FEC
0660:  MOVFF  7B,FEC
0664:  MOVFF  7C,FEC
0668:  RETURN 0
066A:  MOVF   FE9,W
066C:  MOVWF  69
066E:  MOVF   68,W
0670:  MOVWF  6B
0672:  BZ    06A6
0674:  MOVFF  67,74
0678:  MOVFF  66,73
067C:  MOVFF  65,72
0680:  MOVFF  64,71
0684:  CLRF   78
0686:  CLRF   77
0688:  MOVLW  20
068A:  MOVWF  76
068C:  MOVLW  82
068E:  MOVWF  75
0690:  RCALL  02C8
0692:  MOVFF  03,67
0696:  MOVFF  02,66
069A:  MOVFF  01,65
069E:  MOVFF  00,64
06A2:  DECFSZ 6B,F
06A4:  BRA    0674
06A6:  MOVFF  67,74
06AA:  MOVFF  66,73
06AE:  MOVFF  65,72
06B2:  MOVFF  64,71
06B6:  BRA    059C
06B8:  MOVFF  03,67
06BC:  MOVFF  02,66
06C0:  MOVFF  01,65
06C4:  MOVFF  00,64
06C8:  BTFSS  67.7
06CA:  BRA    06E6
06CC:  DECF   69,F
06CE:  BSF    69.5
06D0:  COMF   64,F
06D2:  COMF   65,F
06D4:  COMF   66,F
06D6:  COMF   67,F
06D8:  INCF   64,F
06DA:  BTFSC  FD8.2
06DC:  INCF   65,F
06DE:  BTFSC  FD8.2
06E0:  INCF   66,F
06E2:  BTFSC  FD8.2
06E4:  INCF   67,F
06E6:  MOVLW  3B
06E8:  MOVWF  70
06EA:  MOVLW  9A
06EC:  MOVWF  6F
06EE:  MOVLW  CA
06F0:  MOVWF  6E
06F2:  CLRF   6D
06F4:  MOVLW  0A
06F6:  MOVWF  6B
06F8:  MOVF   68,W
06FA:  BTFSC  FD8.2
06FC:  INCF   69,F
06FE:  BSF    FD8.1
0700:  CLRF   FEA
0702:  MOVLW  64
0704:  MOVWF  FE9
0706:  MOVFF  67,74
070A:  MOVFF  66,73
070E:  MOVFF  65,72
0712:  MOVFF  64,71
0716:  MOVFF  70,78
071A:  MOVFF  6F,77
071E:  MOVFF  6E,76
0722:  MOVFF  6D,75
0726:  RCALL  05DC
0728:  MOVF   01,W
072A:  MOVF   00,F
072C:  BNZ   074C
072E:  INCF   68,W
0730:  SUBWF  6B,W
0732:  BZ    074C
0734:  MOVF   69,W
0736:  BZ    0750
0738:  ANDLW  0F
073A:  SUBWF  6B,W
073C:  BZ    0740
073E:  BC    07AE
0740:  BTFSC  69.7
0742:  BRA    07AE
0744:  BTFSC  69.6
0746:  BRA    0750
0748:  MOVLW  20
074A:  BRA    07A6
074C:  MOVLW  20
074E:  ANDWF  69,F
0750:  BTFSS  69.5
0752:  BRA    076C
0754:  BCF    69.5
0756:  MOVF   68,W
0758:  BTFSS  FD8.2
075A:  DECF   69,F
075C:  MOVF   00,W
075E:  MOVWF  69
0760:  MOVLW  2D
0762:  MOVWF  71
0764:  RCALL  053A
0766:  MOVF   69,W
0768:  MOVWF  00
076A:  CLRF   69
076C:  MOVF   68,W
076E:  SUBWF  6B,W
0770:  BNZ   0786
0772:  MOVF   00,W
0774:  MOVWF  69
0776:  MOVLW  2E
0778:  MOVWF  71
077A:  RCALL  053A
077C:  MOVF   69,W
077E:  MOVWF  00
0780:  MOVLW  20
0782:  ANDWF  69,F
0784:  MOVLW  00
0786:  MOVLW  30
0788:  BTFSS  69.5
078A:  BRA    07A6
078C:  BCF    69.5
078E:  MOVF   68,W
0790:  BTFSS  FD8.2
0792:  DECF   69,F
0794:  MOVF   00,W
0796:  MOVWF  69
0798:  MOVLW  2D
079A:  MOVWF  71
079C:  RCALL  053A
079E:  MOVF   69,W
07A0:  MOVWF  00
07A2:  CLRF   69
07A4:  MOVLW  30
07A6:  ADDWF  00,F
07A8:  MOVFF  00,71
07AC:  RCALL  053A
07AE:  BCF    FD8.1
07B0:  MOVFF  70,74
07B4:  MOVFF  6F,73
07B8:  MOVFF  6E,72
07BC:  MOVFF  6D,71
07C0:  CLRF   78
07C2:  CLRF   77
07C4:  CLRF   76
07C6:  MOVLW  0A
07C8:  MOVWF  75
07CA:  RCALL  05DC
07CC:  MOVFF  03,70
07D0:  MOVFF  02,6F
07D4:  MOVFF  01,6E
07D8:  MOVFF  00,6D
07DC:  DECFSZ 6B,F
07DE:  BRA    06FE
07E0:  GOTO   0A00 (RETURN)
....................  
.................... #list 
....................  
.................... #use delay (clock = 20000000) 
*
01A0:  CLRF   FEA
01A2:  MOVLW  72
01A4:  MOVWF  FE9
01A6:  MOVF   FEF,W
01A8:  BZ    01C4
01AA:  MOVLW  06
01AC:  MOVWF  01
01AE:  CLRF   00
01B0:  DECFSZ 00,F
01B2:  BRA    01B0
01B4:  DECFSZ 01,F
01B6:  BRA    01AE
01B8:  MOVLW  7B
01BA:  MOVWF  00
01BC:  DECFSZ 00,F
01BE:  BRA    01BC
01C0:  DECFSZ FEF,F
01C2:  BRA    01AA
01C4:  RETURN 0
.................... #fuses HS, NOWDT, NOLVP 
.................... #include "../../Library/myLibrary.h" 
.................... // A library for the PIC18F4520 
....................  
.................... int *TRISA = 0xF92; // Connect to TRISx 
.................... int *TRISB = 0xF93; 
.................... int *TRISC = 0xF94; 
.................... int *TRISD = 0xF95; 
.................... int *TRISE = 0xF96; 
....................  
.................... int *LATA = 0xF89;  // Connect to LATx 
.................... int *LATB = 0xF8A; 
.................... int *LATC = 0xF8B; 
.................... int *LATD = 0xF8C; 
.................... int *LATE = 0xF8D; 
....................  
.................... int *PORTA = 0xF80; // Connect to LATx 
.................... int *PORTB = 0xF81; 
.................... int *PORTC = 0xF82; 
.................... int *PORTD = 0xF83; 
.................... int *PORTE = 0xF84; 
....................  
.................... struct _adcon0 { 
....................    int ADON:1; 
....................    int GODONE:1; 
....................    int CHSx:4; 
....................    int unused:2; 
.................... }; 
.................... struct _adcon0 *ADCON0 = 0xFC2; 
....................  
.................... struct _adcon1 {   // Analog vs digital 
....................    int PCFGx:4; 
....................    int VCFG0:1; 
....................    int VCFG1:1; 
....................    int unused:2; 
.................... }; 
.................... struct _adcon1 *ADCON1 = 0xFC1; 
....................  
.................... struct _adcon2 { 
....................    int ADCSx:3; 
....................    int ACQTx:3; 
....................    int unused:1; 
....................    int ADFM:1; 
.................... }; 
.................... struct _adcon2 *ADCON2 = 0xFC0; 
....................  
.................... int16 *Q = 0xFC3; 
.................... int *ADRESH = 0xFC4; 
.................... int *ADRESL = 0xFC3; 
....................  
.................... struct _intcon { 
....................    int RBIF:1; 
....................    int INT0IF:1; 
....................    int TMR0IF:1; 
....................    int RBIE:1; 
....................    int INT0IE:1; 
....................    int TMR0IE:1; 
....................    int PEIE:1; 
....................    int GIE:1; 
.................... }; 
.................... struct _intcon *INTCON = 0xFF2; 
....................  
.................... struct _intcon3 { 
....................    int INT1IF:1; 
....................    int INT2IF:1; 
....................    int unused:1; 
....................    int INT1IE:1; 
....................    int INT2IE:1; 
....................    int notused:1; 
....................    int INT1IP:1; 
....................    int INT2IP:1; 
.................... }; 
.................... struct _intcon3 *INTCON3 = 0xFF0; 
....................  
.................... struct _intcon2 {  // Interrupts 
....................    int RBIP:1; 
....................    int unused:1; 
....................    int TMR0IP:1; 
....................    int notused:1; 
....................    int INTEDG2:1; 
....................    int INTEDG1:1; 
....................    int INTEDG0:1; 
....................    int RBPU:1; 
.................... }; 
.................... struct _intcon2 *INTCON2 = 0xFF1; 
....................  
.................... struct _pie1 { 
....................    int TMR1IE:1; 
....................    int TMR2IE:1; 
....................    int CCP1IE:1; 
....................    int SSPIE:1; 
....................    int TXIE:1; 
....................    int RCIE:1; 
....................    int ADIE:1; 
....................    int PSPIE:1; 
.................... }; 
.................... struct _pie1 *PIE1 = 0xF9D; 
....................  
.................... struct _t1con { 
....................    int TMR1ON:1; 
....................    int TMR1CS:1; 
....................    int T1SYNC:1; 
....................    int T1OSCEN:1; 
....................    int T1CKPSx:2; 
....................    int T1RUN: 1; 
....................    int RD16:1; 
.................... }; 
.................... struct _t1con *T1CON = 0xFCD; 
....................  
.................... struct _ccpxcon { 
....................    int CCPxMx:4; 
....................    int DCxBx:2; 
....................    int unused:2; 
.................... }; 
.................... struct _ccpxcon *CCP1CON = 0xFBD; 
.................... struct _ccpxcon *CCP2CON = 0xFBA; 
....................  
.................... int16 *CCPR1 = 0xFBE;      
....................  
.................... struct _eccplas { 
....................    int PSSBD:2; 
....................    int PSSAC:2; 
....................    int ECCPAS:3; 
....................    int ECCPASE:1; 
.................... }; 
.................... struct _eccplas *ECCP1AS = 0xFB6; 
....................  
.................... #include "../../Library/modifiedlcd.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             Modified LCD.C                        //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////         ***This function was modified to fit the Samsumgs6A0069   //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_lcd FALSE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         }lcd; 
.................... //struct lcd_pin_map *lcd = 0xF83; 
....................  
.................... //#if defined(__PCH__) 
.................... //#if defined use_portb_lcd 
.................... //   #byte lcd = 0xF81                   // This puts the entire structure 
.................... //#else 
....................    #byte lcd = 0xF83                   // This puts the entire structure 
.................... //#endif 
.................... //#else 
.................... //#if defined use_portb_lcd 
.................... //   #byte lcd = 6                  // on to port B (at address 6)                ???????? 
.................... //#else 
.................... //   #byte lcd = 8                 // on to port D (at address 8) 
.................... //#endif 
.................... //#endif 
....................  
.................... //#if defined use_portb_lcd 
.................... //   #define set_tris_lcd(x) set_tris_b(x) 
.................... //#else 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... //#endif 
....................  
....................  
.................... #define lcd_type 3           // 0=5x7, 1=5x10, 2=2 lines, 3=2 lines Disp ON 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line             ????????? 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0x0f, 0x01, 0x06}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0x0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,0xF}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
01E4:  MOVLW  F0
01E6:  MOVWF  F95
....................       lcd.rw = 1; 
01E8:  BSF    F83.2
....................       delay_cycles(1); 
01EA:  NOP   
....................       lcd.enable = 1; 
01EC:  BSF    F83.0
....................       delay_cycles(1); 
01EE:  NOP   
....................       high = lcd.data; 
01F0:  SWAPF  F83,W
01F2:  ANDLW  0F
01F4:  MOVWF  79
....................       lcd.enable = 0; 
01F6:  BCF    F83.0
....................       delay_cycles(1); 
01F8:  NOP   
....................       lcd.enable = 1; 
01FA:  BSF    F83.0
....................       delay_us(1); 
01FC:  BRA    01FE
01FE:  BRA    0200
0200:  NOP   
....................       low = lcd.data; 
0202:  SWAPF  F83,W
0204:  ANDLW  0F
0206:  MOVWF  78
....................       lcd.enable = 0; 
0208:  BCF    F83.0
....................       set_tris_lcd(LCD_WRITE); 
020A:  MOVLW  00
020C:  MOVWF  F95
....................       return( (high<<4) | low); 
020E:  SWAPF  79,W
0210:  MOVWF  00
0212:  MOVLW  F0
0214:  ANDWF  00,F
0216:  MOVF   00,W
0218:  IORWF  78,W
021A:  MOVWF  01
021C:  GOTO   0224 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
01C6:  SWAPF  79,W
01C8:  ANDLW  F0
01CA:  MOVWF  00
01CC:  MOVLW  0F
01CE:  ANDWF  F83,W
01D0:  IORWF  00,W
01D2:  MOVWF  F83
....................       delay_cycles(1); 
01D4:  NOP   
....................       lcd.enable = 1; 
01D6:  BSF    F83.0
....................       delay_us(2); 
01D8:  MOVLW  03
01DA:  MOVWF  00
01DC:  DECFSZ 00,F
01DE:  BRA    01DC
....................       lcd.enable = 0; 
01E0:  BCF    F83.0
01E2:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
0220:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
0222:  BRA    01E4
0224:  MOVFF  01,78
0228:  BTFSC  01.7
022A:  BRA    0222
....................       lcd.rs = address; 
022C:  BTFSS  76.0
022E:  BCF    F83.1
0230:  BTFSC  76.0
0232:  BSF    F83.1
....................       delay_cycles(1); 
0234:  NOP   
....................       lcd.rw = 0; 
0236:  BCF    F83.2
....................       delay_cycles(1); 
0238:  NOP   
....................       lcd.enable = 0; 
023A:  BCF    F83.0
....................       lcd_send_nibble(n >> 4); 
023C:  SWAPF  77,W
023E:  MOVWF  78
0240:  MOVLW  0F
0242:  ANDWF  78,F
0244:  MOVFF  78,79
0248:  RCALL  01C6
....................       lcd_send_nibble(n & 0xf); 
024A:  MOVF   77,W
024C:  ANDLW  0F
024E:  MOVWF  78
0250:  MOVWF  79
0252:  RCALL  01C6
0254:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
0256:  MOVLW  00
0258:  MOVWF  F95
....................     delay_ms(45);                                      // modified 
025A:  MOVLW  2D
025C:  MOVWF  72
025E:  RCALL  01A0
....................     lcd.rs = 0; 
0260:  BCF    F83.1
....................     lcd.rw = 0; 
0262:  BCF    F83.2
....................     lcd.enable = 0; 
0264:  BCF    F83.0
....................     //delay_ms(15);                                    // modified 
....................     //for(i=1;i<=3;++i) {                              // modified 
....................     //   lcd_send_nibble(3);                           // modified 
....................     //   delay_ms(5);                                  // modified 
....................     //}                                                // modified 
....................     lcd_send_nibble(2); 
0266:  MOVLW  02
0268:  MOVWF  79
026A:  RCALL  01C6
....................     for(i=0;i<=3;++i) 
026C:  CLRF   60
026E:  MOVF   60,W
0270:  SUBLW  03
0272:  BNC   028C
....................        {                                                // modified 
....................           lcd_send_byte(0,LCD_INIT_STRING[i]); 
0274:  CLRF   03
0276:  MOVF   60,W
0278:  RCALL  00BA
027A:  MOVWF  61
027C:  CLRF   76
027E:  MOVWF  77
0280:  RCALL  0220
....................           delay_ms(5);                                  // modified 
0282:  MOVLW  05
0284:  MOVWF  72
0286:  RCALL  01A0
0288:  INCF   60,F
028A:  BRA    026E
....................        }                                                // modified 
028C:  GOTO   08FA (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
0516:  DECFSZ 73,W
0518:  BRA    051C
051A:  BRA    0522
....................      address=lcd_line_two; 
051C:  MOVLW  40
051E:  MOVWF  74
0520:  BRA    0524
....................    else 
....................      address=0; 
0522:  CLRF   74
....................    address+=x-1; 
0524:  MOVLW  01
0526:  SUBWF  72,W
0528:  ADDWF  74,F
....................    lcd_send_byte(0,0x80|address); 
052A:  MOVF   74,W
052C:  IORLW  80
052E:  MOVWF  75
0530:  CLRF   76
0532:  MOVWF  77
0534:  RCALL  0220
0536:  GOTO   057A (RETURN)
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
053A:  MOVF   71,W
053C:  XORLW  0C
053E:  BZ    054A
0540:  XORLW  06
0542:  BZ    055A
0544:  XORLW  02
0546:  BZ    0566
0548:  BRA    0570
....................      case '\f'   : lcd_send_byte(0,1); 
054A:  CLRF   76
054C:  MOVLW  01
054E:  MOVWF  77
0550:  RCALL  0220
....................                    delay_ms(2); 
0552:  MOVLW  02
0554:  MOVWF  72
0556:  RCALL  01A0
....................                                            break; 
0558:  BRA    057A
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
055A:  MOVLW  01
055C:  MOVWF  72
055E:  MOVLW  02
0560:  MOVWF  73
0562:  BRA    0516
0564:  BRA    057A
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0566:  CLRF   76
0568:  MOVLW  10
056A:  MOVWF  77
056C:  RCALL  0220
056E:  BRA    057A
....................      default     : lcd_send_byte(1,c);     break; 
0570:  MOVLW  01
0572:  MOVWF  76
0574:  MOVFF  71,77
0578:  RCALL  0220
....................    } 
057A:  RETURN 0
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... unsigned int x = 0; 
.................... unsigned int16 tstop, tstart, telapsed; 
....................  
.................... #INT_TIMER1 
.................... void int_timer1_isr(){ 
....................    x++;                     // Count the overflows 
*
00CE:  INCF   55,F
....................    output_toggle( PIN_C0 ); 
00D0:  BCF    F94.0
00D2:  BTG    F8B.0
.................... } 
....................  
00D4:  BCF    F9E.0
00D6:  GOTO   006C
.................... #INT_CCP1 
.................... void int_ccp1_isr(){ 
....................     tstop = *CCPR1; 
*
0130:  MOVFF  51,FE9
0134:  MOVFF  52,FEA
0138:  MOVFF  FEC,57
013C:  MOVF   FED,F
013E:  MOVFF  FEF,56
....................     telapsed = x * 0x10000 -tstart + tstop; 
0142:  CLRF   x81
0144:  CLRF   x80
0146:  CLRF   7F
0148:  MOVFF  55,7E
014C:  CLRF   x85
014E:  MOVLW  01
0150:  MOVWF  x84
0152:  CLRF   x83
0154:  CLRF   x82
0156:  BRA    00DA
0158:  MOVFF  03,81
015C:  MOVFF  02,80
0160:  MOVFF  01,7F
0164:  MOVFF  00,7E
0168:  MOVF   58,W
016A:  SUBWF  7E,F
016C:  MOVF   59,W
016E:  SUBWFB 7F,F
0170:  MOVLW  00
0172:  SUBWFB x80,F
0174:  SUBWFB x81,F
0176:  MOVF   56,W
0178:  ADDWF  7E,W
017A:  MOVWF  5A
017C:  MOVF   57,W
017E:  ADDWFC 7F,W
0180:  MOVWF  5B
....................     x = 0;   // Rest Overflowwe 
0182:  CLRF   55
....................     tstart = tstop; 
0184:  MOVFF  57,59
0188:  MOVFF  56,58
....................     output_toggle( PIN_C1 ); 
018C:  BCF    F94.1
018E:  BTG    F8B.1
0190:  BCF    F9E.2
0192:  GOTO   006C
.................... } 
....................  
.................... main(){ 
*
07E4:  CLRF   FF8
07E6:  BCF    FD0.7
07E8:  BSF    07.7
07EA:  MOVLW  0F
07EC:  MOVWF  1A
07EE:  MOVLW  92
07F0:  MOVWF  19
07F2:  MOVLW  0F
07F4:  MOVWF  1C
07F6:  MOVLW  93
07F8:  MOVWF  1B
07FA:  MOVLW  0F
07FC:  MOVWF  1E
07FE:  MOVLW  94
0800:  MOVWF  1D
0802:  MOVLW  0F
0804:  MOVWF  20
0806:  MOVLW  95
0808:  MOVWF  1F
080A:  MOVLW  0F
080C:  MOVWF  22
080E:  MOVLW  96
0810:  MOVWF  21
0812:  MOVLW  0F
0814:  MOVWF  24
0816:  MOVLW  89
0818:  MOVWF  23
081A:  MOVLW  0F
081C:  MOVWF  26
081E:  MOVLW  8A
0820:  MOVWF  25
0822:  MOVLW  0F
0824:  MOVWF  28
0826:  MOVLW  8B
0828:  MOVWF  27
082A:  MOVLW  0F
082C:  MOVWF  2A
082E:  MOVLW  8C
0830:  MOVWF  29
0832:  MOVLW  0F
0834:  MOVWF  2C
0836:  MOVLW  8D
0838:  MOVWF  2B
083A:  MOVLW  0F
083C:  MOVWF  2E
083E:  MOVLW  80
0840:  MOVWF  2D
0842:  MOVLW  0F
0844:  MOVWF  30
0846:  MOVLW  81
0848:  MOVWF  2F
084A:  MOVLW  0F
084C:  MOVWF  32
084E:  MOVLW  82
0850:  MOVWF  31
0852:  MOVLW  0F
0854:  MOVWF  34
0856:  MOVLW  83
0858:  MOVWF  33
085A:  MOVLW  0F
085C:  MOVWF  36
085E:  MOVLW  84
0860:  MOVWF  35
0862:  MOVLW  0F
0864:  MOVWF  38
0866:  MOVLW  C2
0868:  MOVWF  37
086A:  MOVLW  0F
086C:  MOVWF  3A
086E:  MOVLW  C1
0870:  MOVWF  39
0872:  MOVLW  0F
0874:  MOVWF  3C
0876:  MOVLW  C0
0878:  MOVWF  3B
087A:  MOVLW  0F
087C:  MOVWF  3E
087E:  MOVLW  C3
0880:  MOVWF  3D
0882:  MOVLW  0F
0884:  MOVWF  40
0886:  MOVLW  C4
0888:  MOVWF  3F
088A:  MOVLW  0F
088C:  MOVWF  42
088E:  MOVLW  C3
0890:  MOVWF  41
0892:  MOVLW  0F
0894:  MOVWF  44
0896:  MOVLW  F2
0898:  MOVWF  43
089A:  MOVLW  0F
089C:  MOVWF  46
089E:  MOVLW  F0
08A0:  MOVWF  45
08A2:  MOVLW  0F
08A4:  MOVWF  48
08A6:  MOVLW  F1
08A8:  MOVWF  47
08AA:  MOVLW  0F
08AC:  MOVWF  4A
08AE:  MOVLW  9D
08B0:  MOVWF  49
08B2:  MOVLW  0F
08B4:  MOVWF  4C
08B6:  MOVLW  CD
08B8:  MOVWF  4B
08BA:  MOVLW  0F
08BC:  MOVWF  4E
08BE:  MOVLW  BD
08C0:  MOVWF  4D
08C2:  MOVLW  0F
08C4:  MOVWF  50
08C6:  MOVLW  BA
08C8:  MOVWF  4F
08CA:  MOVLW  0F
08CC:  MOVWF  52
08CE:  MOVLW  BE
08D0:  MOVWF  51
08D2:  MOVLW  0F
08D4:  MOVWF  54
08D6:  MOVLW  B6
08D8:  MOVWF  53
08DA:  CLRF   55
08DC:  MOVF   FC1,W
08DE:  ANDLW  C0
08E0:  IORLW  0F
08E2:  MOVWF  FC1
08E4:  MOVLW  07
08E6:  MOVWF  FB4
08E8:  MOVLW  95
08EA:  MOVWF  5F
08EC:  MOVLW  BF
08EE:  MOVWF  5E
08F0:  MOVLW  56
08F2:  MOVWF  5D
08F4:  MOVLW  68
08F6:  MOVWF  5C
....................    float T1c = 4 * 1 / 20000000.0; 
....................    lcd_init();            // Initializing the LCD Panel 
08F8:  BRA    0256
....................    *TRISC = 0x4;          // 0000 0100   C2 is input 
08FA:  MOVFF  1D,FE9
08FE:  MOVFF  1E,FEA
0902:  MOVLW  04
0904:  MOVWF  FEF
....................    // Capture System Setup 
....................    CCP1CON->CCPxMx = 0x4; //Capture every falling 
0906:  MOVFF  4D,FE9
090A:  MOVFF  4E,FEA
090E:  MOVLW  F0
0910:  ANDWF  FEF,W
0912:  IORLW  04
0914:  MOVWF  FEF
....................     
....................    // Timer Setup 
....................    T1CON->TMR1ON = 1;     // Timer is ON 
0916:  MOVFF  4B,FE9
091A:  MOVFF  4C,FEA
091E:  BSF    FEF.0
....................    T1CON->TMR1CS = 0;     // Fosc / 4 
0920:  MOVFF  4B,FE9
0924:  MOVFF  4C,FEA
0928:  BCF    FEF.1
....................    T1CON->T1CKPSx = 0;    // PS = 1; 
092A:  MOVFF  4B,FE9
092E:  MOVFF  4C,FEA
0932:  MOVLW  CF
0934:  ANDWF  FEF,W
0936:  MOVWF  FEF
....................     
....................    // Interrupt System Setup 
....................    PIE1->TMR1IE = 1;      // Timer 1 overflow interrupt system 0n 
0938:  MOVFF  49,FE9
093C:  MOVFF  4A,FEA
0940:  BSF    FEF.0
....................    PIE1->CCP1IE = 1;      // CCP1 Interrupt Systen ON 
0942:  MOVFF  49,FE9
0946:  MOVFF  4A,FEA
094A:  BSF    FEF.2
....................    INTCON->PEIE = 1; 
094C:  MOVFF  43,FE9
0950:  MOVFF  44,FEA
0954:  BSF    FEF.6
....................    INTCON->GIE = 1;       // Interrupt System Enabled 
0956:  MOVFF  43,FE9
095A:  MOVFF  44,FEA
095E:  BSF    FEF.7
....................    while(1){ 
....................          // Just show me the data 
....................          printf(lcd_putc,"\f F = %f", 60 / ( 161 * (T1c * telapsed ) ) ); 
0960:  MOVFF  5B,61
0964:  MOVFF  5A,60
0968:  BRA    0290
096A:  MOVFF  5F,74
096E:  MOVFF  5E,73
0972:  MOVFF  5D,72
0976:  MOVFF  5C,71
097A:  MOVFF  03,78
097E:  MOVFF  02,77
0982:  MOVFF  01,76
0986:  MOVFF  00,75
098A:  RCALL  02C8
098C:  CLRF   74
098E:  CLRF   73
0990:  MOVLW  21
0992:  MOVWF  72
0994:  MOVLW  86
0996:  MOVWF  71
0998:  MOVFF  03,78
099C:  MOVFF  02,77
09A0:  MOVFF  01,76
09A4:  MOVFF  00,75
09A8:  RCALL  02C8
09AA:  CLRF   63
09AC:  CLRF   62
09AE:  MOVLW  70
09B0:  MOVWF  61
09B2:  MOVLW  84
09B4:  MOVWF  60
09B6:  MOVFF  03,67
09BA:  MOVFF  02,66
09BE:  MOVFF  01,65
09C2:  MOVFF  00,64
09C6:  BRA    03BA
09C8:  MOVFF  03,63
09CC:  MOVFF  02,62
09D0:  MOVFF  01,61
09D4:  MOVFF  00,60
09D8:  MOVLW  96
09DA:  MOVWF  FF6
09DC:  MOVLW  01
09DE:  MOVWF  FF7
09E0:  MOVLW  06
09E2:  MOVWF  64
09E4:  BRA    057C
09E6:  MOVLW  89
09E8:  MOVWF  FE9
09EA:  MOVFF  63,67
09EE:  MOVFF  62,66
09F2:  MOVFF  61,65
09F6:  MOVFF  60,64
09FA:  MOVLW  02
09FC:  MOVWF  68
09FE:  BRA    066A
....................          delay_ms(100); 
0A00:  MOVLW  64
0A02:  MOVWF  72
0A04:  CALL   01A0
0A08:  BRA    0960
....................    } 
.................... } 
....................  
0A0A:  SLEEP 
....................     
....................     

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
