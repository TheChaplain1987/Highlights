D G "__PCH__" 0 40 ""5.008""
D G "__DEVICE__" 0 40 "4520"
D G "__DATE__" 0 40 ""27-Oct-23""
D G "__TIME__" 0 40 ""17:13:52"" "Standard Header file for the PIC18F4520 device ////////////////"
c L "set_tris_a" 1 5 19 "FUNCTION"
v L "value" 1 34 "int8" `54 
f B "set_tris_a" 1 34 "void(int8 value)" `53 
v L "value" 1 35 "int8" `56 
f B "set_tris_b" 1 35 "void(int8 value)" `55 
v L "value" 1 36 "int8" `58 
f B "set_tris_c" 1 36 "void(int8 value)" `57 
v L "value" 1 37 "int8" `60 
f B "set_tris_d" 1 37 "void(int8 value)" `59 
v L "value" 1 38 "int8" `62 
f B "set_tris_e" 1 38 "void(int8 value)" `61 
f B "get_tris_a" 1 39 "int8()" `63 
f B "get_tris_b" 1 40 "int8()" `64 
f B "get_tris_c" 1 41 "int8()" `65 
f B "get_tris_d" 1 42 "int8()" `66 
f B "get_tris_e" 1 43 "int8()" `67 
v L "value" 1 44 "int8" `69 
f B "output_a" 1 44 "void(int8 value)" `68 
v L "value" 1 45 "int8" `71 
f B "output_b" 1 45 "void(int8 value)" `70 
v L "value" 1 46 "int8" `73 
f B "output_c" 1 46 "void(int8 value)" `72 
v L "value" 1 47 "int8" `75 
f B "output_d" 1 47 "void(int8 value)" `74 
v L "value" 1 48 "int8" `77 
f B "output_e" 1 48 "void(int8 value)" `76 
f B "input_a" 1 49 "int8()" `78 
f B "input_b" 1 50 "int8()" `79 
f B "input_c" 1 51 "int8()" `80 
f B "input_d" 1 52 "int8()" `81 
f B "input_e" 1 53 "int8()" `82 
f B "input_change_a" 1 54 "int8()" `83 
f B "input_change_b" 1 55 "int8()" `84 
f B "input_change_c" 1 56 "int8()" `85 
f B "input_change_d" 1 57 "int8()" `86 
f B "input_change_e" 1 58 "int8()" `87 
v L "pin" 1 59 "int16" `89 
f B "input" 1 59 "int8(int16 pin)" `88 
v L "pin" 1 60 "int16" `91 
f B "input_state" 1 60 "int8(int16 pin)" `90 
v L "pin" 1 61 "int16" `93 
f B "output_low" 1 61 "void(int16 pin)" `92 
v L "pin" 1 62 "int16" `95 
f B "output_high" 1 62 "void(int16 pin)" `94 
v L "pin" 1 63 "int16" `97 
f B "output_toggle" 1 63 "void(int16 pin)" `96 
v L "pin" 1 64 "int16" `99 
v L "level" 1 64 "int8" `100 
f B "output_bit" 1 64 "void(int16 pin,int8 level)" `98 
v L "pin" 1 65 "int16" `102 
f B "output_float" 1 65 "void(int16 pin)" `101 
v L "pin" 1 66 "int16" `104 
f B "output_drive" 1 66 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 70 "31744"
d G "PIN_A1" 1 71 "31745"
d G "PIN_A2" 1 72 "31746"
d G "PIN_A3" 1 73 "31747"
d G "PIN_A4" 1 74 "31748"
d G "PIN_A5" 1 75 "31749"
d G "PIN_A6" 1 76 "31750"
d G "PIN_A7" 1 77 "31751"
d G "PIN_B0" 1 79 "31752"
d G "PIN_B1" 1 80 "31753"
d G "PIN_B2" 1 81 "31754"
d G "PIN_B3" 1 82 "31755"
d G "PIN_B4" 1 83 "31756"
d G "PIN_B5" 1 84 "31757"
d G "PIN_B6" 1 85 "31758"
d G "PIN_B7" 1 86 "31759"
d G "PIN_C0" 1 88 "31760"
d G "PIN_C1" 1 89 "31761"
d G "PIN_C2" 1 90 "31762"
d G "PIN_C3" 1 91 "31763"
d G "PIN_C4" 1 92 "31764"
d G "PIN_C5" 1 93 "31765"
d G "PIN_C6" 1 94 "31766"
d G "PIN_C7" 1 95 "31767"
d G "PIN_D0" 1 97 "31768"
d G "PIN_D1" 1 98 "31769"
d G "PIN_D2" 1 99 "31770"
d G "PIN_D3" 1 100 "31771"
d G "PIN_D4" 1 101 "31772"
d G "PIN_D5" 1 102 "31773"
d G "PIN_D6" 1 103 "31774"
d G "PIN_D7" 1 104 "31775"
d G "PIN_E0" 1 106 "31776"
d G "PIN_E1" 1 107 "31777"
d G "PIN_E2" 1 108 "31778"
d G "PIN_E3" 1 109 "31779"
d G "FALSE" 1 112 "0"
d G "TRUE" 1 113 "1"
d G "BYTE" 1 115 "int8"
d G "BOOLEAN" 1 116 "int1"
d G "getc" 1 118 "getch"
d G "fgetc" 1 119 "getch"
d G "getchar" 1 120 "getch"
d G "putc" 1 121 "putchar"
d G "fputc" 1 122 "putchar"
d G "fgets" 1 123 "gets"
d G "fputs" 1 124 "puts"
c L "output_drive" 1 5 3 "FUNCTION"
f B "restart_cause" 1 129 "int8()" `105 
f B "reset_cpu" 1 130 "void()" `106 
f B "sleep" 1 131 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 133 "7"
d G "MCLR_FROM_SLEEP" 1 134 "11"
d G "MCLR_FROM_RUN" 1 135 "15"
d G "NORMAL_POWER_UP" 1 136 "12"
d G "BROWNOUT_RESTART" 1 137 "14"
d G "WDT_FROM_SLEEP" 1 138 "3"
d G "RESET_INSTRUCTION" 1 139 "0"
d G "SLEEP_FULL" 1 142 "0" "Default"
d G "SLEEP_IDLE" 1 143 "1" "Clock and peripherals don't stop"
c L "sleep" 1 5 5 "FUNCTION"
v L "mode" 1 150 "int8" `109 
f B "setup_timer_0" 1 150 "void(int8 mode)" `108 
v L "value" 1 151 "int16" `111 
f B "set_timer0" 1 151 "void(int16 value)" `110 
f B "get_timer0" 1 152 "int16()" `112 
v L "mode" 1 153 "int8" `114 
v L "prescaler" 1 153 "int8" `115 
f B "setup_counters" 1 153 "void(int8 mode,int8 prescaler)" `113 
v L "value" 1 154 "int16" `117 
f B "set_rtcc" 1 154 "void(int16 value)" `116 
f B "get_rtcc" 1 155 "int16()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 157 "0"
d G "T0_EXT_L_TO_H" 1 158 "32"
d G "T0_EXT_H_TO_L" 1 159 "48"
d G "T0_DIV_1" 1 161 "8"
d G "T0_DIV_2" 1 162 "0"
d G "T0_DIV_4" 1 163 "1"
d G "T0_DIV_8" 1 164 "2"
d G "T0_DIV_16" 1 165 "3"
d G "T0_DIV_32" 1 166 "4"
d G "T0_DIV_64" 1 167 "5"
d G "T0_DIV_128" 1 168 "6"
d G "T0_DIV_256" 1 169 "7"
d G "T0_OFF" 1 171 "0x80"
d G "T0_8_BIT" 1 173 "0x40"
d G "RTCC_INTERNAL" 1 175 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 176 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 177 "48"
d G "RTCC_DIV_1" 1 178 "8"
d G "RTCC_DIV_2" 1 179 "0"
d G "RTCC_DIV_4" 1 180 "1"
d G "RTCC_DIV_8" 1 181 "2"
d G "RTCC_DIV_16" 1 182 "3"
d G "RTCC_DIV_32" 1 183 "4"
d G "RTCC_DIV_64" 1 184 "5"
d G "RTCC_DIV_128" 1 185 "6"
d G "RTCC_DIV_256" 1 186 "7"
d G "RTCC_OFF" 1 187 "0x80"
d G "RTCC_8_BIT" 1 188 "0x40"
c L "get_rtcc" 1 5 8 "FUNCTION"
v L "mode" 1 199 "int16" `120 
f B "setup_wdt" 1 199 "void(int16 mode)" `119 
f B "restart_wdt" 1 200 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 202 "0x100"
d G "WDT_OFF" 1 203 "0"
d G "WDT_4MS" 1 205 "0x300"
d G "WDT_8MS" 1 206 "0x500"
d G "WDT_16MS" 1 207 "0x700"
d G "WDT_32MS" 1 208 "0x900"
d G "WDT_64MS" 1 209 "0xB00"
d G "WDT_128MS" 1 210 "0xD00"
d G "WDT_256MS" 1 211 "0xF00"
d G "WDT_512MS" 1 212 "0x1100"
d G "WDT_1S" 1 213 "0x1300"
d G "WDT_2S" 1 214 "0x1500"
d G "WDT_4S" 1 215 "0x1700"
d G "WDT_8S" 1 216 "0x1900"
d G "WDT_16" 1 217 "0x1B00"
d G "WDT_32S" 1 218 "0x1D00"
d G "WDT_64S" 1 219 "0x1F00"
d G "WDT_128S" 1 220 "0x2100"
c L "restart_wdt" 1 5 3 "FUNCTION"
v L "mode" 1 226 "int16" `123 
f B "setup_timer_1" 1 226 "void(int16 mode)" `122 
f B "get_timer1" 1 227 "int16()" `124 
v L "value" 1 228 "int16" `126 
f B "set_timer1" 1 228 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 231 "0"
d G "T1_INTERNAL" 1 232 "0x85"
d G "T1_EXTERNAL" 1 233 "0x87"
d G "T1_EXTERNAL_SYNC" 1 234 "0x83"
d G "T1_CLK_OUT" 1 236 "8"
d G "T1_DIV_BY_1" 1 238 "0"
d G "T1_DIV_BY_2" 1 239 "0x10"
d G "T1_DIV_BY_4" 1 240 "0x20"
d G "T1_DIV_BY_8" 1 241 "0x30"
c L "set_timer1" 1 5 3 "FUNCTION"
v L "mode" 1 246 "int8" `128 
v L "period" 1 246 "int8" `129 
v L "postscale" 1 246 "int8" `130 
f B "setup_timer_2" 1 246 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 1 247 "int8()" `131 
v L "value" 1 248 "int8" `133 
f B "set_timer2" 1 248 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 250 "0"
d G "T2_DIV_BY_1" 1 251 "4"
d G "T2_DIV_BY_4" 1 252 "5"
d G "T2_DIV_BY_16" 1 253 "6"
c L "set_timer2" 1 5 3 "FUNCTION"
v L "mode" 1 258 "int16" `135 
f B "setup_timer_3" 1 258 "void(int16 mode)" `134 
f B "get_timer3" 1 259 "int16()" `136 
v L "value" 1 260 "int16" `138 
f B "set_timer3" 1 260 "void(int16 value)" `137  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 263 "0"
d G "T3_INTERNAL" 1 264 "0x85"
d G "T3_EXTERNAL" 1 265 "0x87"
d G "T3_EXTERNAL_SYNC" 1 266 "0x83"
d G "T3_DIV_BY_1" 1 268 "0"
d G "T3_DIV_BY_2" 1 269 "0x10"
d G "T3_DIV_BY_4" 1 270 "0x20"
d G "T3_DIV_BY_8" 1 271 "0x30"
c L "set_timer3" 1 5 4 "FUNCTION"
v L "mode" 1 277 "int32" `140 
f B "setup_ccp1" 1 277 "void(int32 mode)" `139 
v L "mode" 1 278 "int32" `142 
v L "pwm" 1 278 "int8" `143 
f G "setup_ccp1" 1 278 "void(int32 mode,int8 pwm)" `141 
v L "value" 1 279 "int16" `145 
f B "set_pwm1_duty" 1 279 "void(int16 value)" `144  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 281 "0"
d G "CCP_CAPTURE_FE" 1 282 "4"
d G "CCP_CAPTURE_RE" 1 283 "5"
d G "CCP_CAPTURE_DIV_4" 1 284 "6"
d G "CCP_CAPTURE_DIV_16" 1 285 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 286 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 287 "9"
d G "CCP_COMPARE_INT" 1 288 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 289 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 1 290 "0xB"
d G "CCP_PWM" 1 291 "0xC"
d G "CCP_PWM_PLUS_1" 1 292 "0x1c"
d G "CCP_PWM_PLUS_2" 1 293 "0x2c"
d G "CCP_PWM_PLUS_3" 1 294 "0x3c"
c L "set_pwm1_duty" 1 5 1 "FUNCTION"
d G "T3_CCP1_TO_2" 1 300 "0x48"
d G "T3_CCP2" 1 301 "0x8"
d G "CCP_PWM_H_H" 1 304 "0x0c"
d G "CCP_PWM_H_L" 1 305 "0x0d"
d G "CCP_PWM_L_H" 1 306 "0x0e"
d G "CCP_PWM_L_L" 1 307 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 309 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 310 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 311 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 313 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 314 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 315 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 316 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 317 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 318 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 319 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 321 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 322 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 323 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 325 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 326 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 327 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 329 "0x80000000"
c L "set_pwm1_duty" 1 5 1 "FUNCTION"
v L "mode" 1 333 "int32" `150 
f B "setup_ccp2" 1 333 "void(int32 mode)" `149 
v L "mode" 1 334 "int32" `152 
v L "pwm" 1 334 "int8" `153 
f G "setup_ccp2" 1 334 "void(int32 mode,int8 pwm)" `151 
v L "value" 1 335 "int16" `155 
f B "set_pwm2_duty" 1 335 "void(int16 value)" `154 
c L "set_pwm2_duty" 1 5 5 "FUNCTION"
v L "mode" 1 344 "int8" `160 
f B "setup_psp" 1 344 "void(int8 mode)" `159 
f B "psp_output_full" 1 345 "int8()" `161 
f B "psp_input_full" 1 346 "int8()" `162 
f B "psp_overflow" 1 347 "int8()" `163  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 349 "0x10"
d G "PSP_DISABLED" 1 350 "0"
c L "psp_overflow" 1 5 3 "FUNCTION"
v L "mode" 1 357 "int32" `166 
f B "setup_spi" 1 357 "void(int32 mode)" `165 
v L "value" 1 358 "int8" `168 
f B "spi_write" 1 358 "void(int8 value)" `167 
f B "spi_read" 1 359 "int8()" `169 
v L "value" 1 360 "int8" `171 
f G "spi_read" 1 360 "int8(int8 value)" `170 
f B "spi_data_in" 1 361 "int8()" `172  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 363 "0x00"
d G "SPI_MASTER" 1 364 "0x20"
d G "SPI_SLAVE" 1 365 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 366 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 367 "0x00"
d G "SPI_CLK_DIV_4" 1 368 "0x00"
d G "SPI_CLK_DIV_16" 1 369 "0x01"
d G "SPI_CLK_DIV_64" 1 370 "0x02"
d G "SPI_CLK_T2" 1 371 "0x03"
d G "SPI_SS_DISABLED" 1 372 "0x01"
d G "SPI_XMIT_L_TO_H" 1 374 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 375 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 377 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 378 "0x8000"
d G "SPI_L_TO_H" 1 381 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 382 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 5 2 "FUNCTION"
v L "baud" 1 386 "int32" `174 
f B "setup_uart" 1 386 "void(int32 baud)" `173 
v L "baud" 1 387 "int32" `176 
v L "stream" 1 387 "int8" `177 
f G "setup_uart" 1 387 "void(int32 baud,int8 stream)" `175 
v L "baud" 1 388 "int32" `179 
v L "stream" 1 388 "int8" `180 
v L "clock" 1 388 "int32" `181 
f G "setup_uart" 1 388 "void(int32 baud,int8 stream,int32 clock)" `178 
v L "baud" 1 389 "int32" `183 
f B "set_uart_speed" 1 389 "void(int32 baud)" `182 
v L "baud" 1 390 "int32" `185 
v L "stream" 1 390 "int8" `186 
f G "set_uart_speed" 1 390 "void(int32 baud,int8 stream)" `184 
v L "baud" 1 391 "int32" `188 
v L "stream" 1 391 "int8" `189 
v L "clock" 1 391 "int32" `190 
f G "set_uart_speed" 1 391 "void(int32 baud,int8 stream,int32 clock)" `187  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 395 "2"
d G "UART_DATA" 1 396 "4"
d G "UART_AUTODETECT" 1 397 "8"
d G "UART_AUTODETECT_NOWAIT" 1 398 "9"
d G "UART_WAKEUP_ON_RDA" 1 399 "10"
d G "UART_SEND_BREAK" 1 400 "13"
c L "set_uart_speed" 1 5 3 "FUNCTION"
v L "mode" 1 404 "int32" `192 
f B "setup_comparator" 1 404 "void(int32 mode)" `191  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 406 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 407 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 408 "0xbcf05"
d G "NC_NC_NC_NC" 1 409 "0x0ff07"
d G "A0_A3_A1_A2" 1 410 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 411 "0x9ef01"
d G "A0_VR_A1_VR" 1 412 "0x3ff06"
d G "A3_VR_A2_VR" 1 413 "0xcff0e"
d G "CP1_INVERT" 1 414 "0x0000010"
d G "CP2_INVERT" 1 415 "0x0000020"
c L "setup_comparator" 1 5 2 "FUNCTION"
v L "mode" 1 422 "int8" `196 
f B "setup_vref" 1 422 "void(int8 mode)" `195  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 424 "0xa0"
d G "VREF_HIGH" 1 425 "0x80"
d G "VREF_F5" 1 427 "0x40"
d G "VREF_COMP" 1 428 "0x10"
c L "setup_vref" 1 5 2 "FUNCTION"
v L "mode" 1 432 "int8" `198 
f B "setup_low_volt_detect" 1 432 "void(int8 mode)" `197  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 434 "0x1F"
d G "LVD_45" 1 435 "0x1E"
d G "LVD_42" 1 436 "0x1D"
d G "LVD_40" 1 437 "0x1C"
d G "LVD_38" 1 438 "0x1B"
d G "LVD_36" 1 439 "0x1A"
d G "LVD_35" 1 440 "0x19"
d G "LVD_33" 1 441 "0x18"
d G "LVD_30" 1 442 "0x17"
d G "LVD_28" 1 443 "0x16"
d G "LVD_27" 1 444 "0x15"
d G "LVD_25" 1 445 "0x14"
d G "LVD_24" 1 446 "0x13"
d G "LVD_23" 1 447 "0x12"
d G "LVD_22" 1 448 "0x11"
d G "LVD_21" 1 449 "0x10"
d G "LVD_TRIGGER_BELOW" 1 451 "0"
d G "LVD_TRIGGER_ABOVE" 1 452 "0x80"
c L "setup_low_volt_detect" 1 5 2 "FUNCTION"
v L "mode" 1 457 "int8" `200 
f B "setup_oscillator" 1 457 "int8(int8 mode)" `199 
v L "mode" 1 458 "int8" `202 
v L "tune" 1 458 "sint8" `203 
f G "setup_oscillator" 1 458 "int8(int8 mode,sint8 tune)" `201  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 461 "0"
d G "OSC_125KHZ" 1 462 "0x10"
d G "OSC_250KHZ" 1 463 "0x20"
d G "OSC_500KHZ" 1 464 "0x30"
d G "OSC_1MHZ" 1 465 "0x40"
d G "OSC_2MHZ" 1 466 "0x50"
d G "OSC_4MHZ" 1 467 "0x60"
d G "OSC_8MHZ" 1 468 "0x70"
d G "OSC_16MHZ" 1 469 "0x4060"
d G "OSC_32MHZ" 1 470 "0x4070"
d G "OSC_TIMER1" 1 472 "1"
d G "OSC_INTRC" 1 473 "2"
d G "OSC_NORMAL" 1 474 "0"
d G "OSC_IDLE_MODE" 1 476 "0x80"
d G "OSC_31250" 1 477 "0x8000"
d G "OSC_PLL_ON" 1 478 "0x4000"
d G "OSC_PLL_OFF" 1 479 "0"
d G "OSC_STATE_STABLE" 1 483 "4"
d G "OSC_STATE_EXT_RUNNING" 1 484 "8"
c L "setup_oscillator" 1 5 4 "FUNCTION"
v L "mode" 1 491 "int16" `205 
f B "setup_adc" 1 491 "void(int16 mode)" `204 
f B "read_adc" 1 492 "int8()" `206 
v L "mode" 1 493 "int8" `208 
f G "read_adc" 1 493 "int8(int8 mode)" `207 
f G "read_adc" 1 494 "int16()" `209 
v L "mode" 1 495 "int8" `211 
f G "read_adc" 1 495 "int16(int8 mode)" `210 
f B "adc_done" 1 496 "int8()" `212  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 498 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 499 "0x100"
d G "ADC_CLOCK_DIV_4" 1 500 "0x04"
d G "ADC_CLOCK_DIV_8" 1 501 "0x01"
d G "ADC_CLOCK_DIV_16" 1 502 "0x05"
d G "ADC_CLOCK_DIV_32" 1 503 "0x02"
d G "ADC_CLOCK_DIV_64" 1 504 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 505 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 507 "0x00"
d G "ADC_TAD_MUL_2" 1 508 "0x08"
d G "ADC_TAD_MUL_4" 1 509 "0x10"
d G "ADC_TAD_MUL_6" 1 510 "0x18"
d G "ADC_TAD_MUL_8" 1 511 "0x20"
d G "ADC_TAD_MUL_12" 1 512 "0x28"
d G "ADC_TAD_MUL_16" 1 513 "0x30"
d G "ADC_TAD_MUL_20" 1 514 "0x38"
c L "adc_done" 1 5 1 "FUNCTION"
v L "pins" 1 517 "int8" `214 
f B "setup_adc_ports" 1 517 "void(int8 pins)" `213 
v L "pins" 1 518 "int8" `216 
v L "reference" 1 518 "int8" `217 
f G "setup_adc_ports" 1 518 "void(int8 pins,int8 reference)" `215 
v L "channel" 1 519 "int8" `219 
f B "set_adc_channel" 1 519 "void(int8 channel)" `218  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 522 "0x0F" "None"
d G "ALL_ANALOG" 1 523 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 1 524 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 1 525 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 1 526 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 1 527 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 1 528 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 1 529 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 1 530 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 1 531 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 1 532 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 1 533 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 1 534 "0x0D" "A0 A1"
d G "AN0" 1 535 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 1 536 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 1 537 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 1 538 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 1 539 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 1 540 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 1 541 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 1 542 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 1 543 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 1 544 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 1 545 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 1 546 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 1 547 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 1 550 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 1 551 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 1 552 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 1 553 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 1 556 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 557 "1"
d G "ADC_READ_ONLY" 1 558 "6"
c L "set_adc_channel" 1 5 3 "FUNCTION"
v L "x" 1 564 "sint8" `221 
f B "abs" 1 564 "sint8(sint8 x)" `220 
v L "x" 1 565 "sint16" `223 
f G "abs" 1 565 "sint16(sint16 x)" `222 
v L "x" 1 566 "sint32" `225 
f G "abs" 1 566 "sint32(sint32 x)" `224 
v L "x" 1 567 "float" `227 
f G "abs" 1 567 "float(float x)" `226 
v L "??65535" 1 568 "int8" `229 
v L "??65535" 1 568 "int8" `230 
f B "_mul" 1 568 "int16(int8 ,int8 )" `228 
v L "??65535" 1 569 "sint8" `229 
v L "??65535" 1 569 "sint8" `233 
f G "_mul" 1 569 "sint16(sint8 ,sint8 )" `231 
v L "??65535" 1 570 "int16" `229 
v L "??65535" 1 570 "int16" `236 
f G "_mul" 1 570 "int32(int16 ,int16 )" `234 
v L "??65535" 1 571 "sint16" `229 
v L "??65535" 1 571 "sint16" `239 
f G "_mul" 1 571 "sint32(sint16 ,sint16 )" `237  "Memory Manipulation Prototypes:"
v L "bank" 1 574 "int8" `241 
v L "offset" 1 574 "int8" `242 
f B "read_bank" 1 574 "int8(int8 bank,int8 offset)" `240 
v L "bank" 1 575 "int8" `244 
v L "offset" 1 575 "int8" `245 
v L "value" 1 575 "int8" `246 
f B "write_bank" 1 575 "void(int8 bank,int8 offset,int8 value)" `243 
v L "dest" 1 576 "*int8" `248 
v L "src" 1 576 "*int8" `249 
f B "strcpy" 1 576 "void(*int8 dest,*int8 src)" `247 
v L "dest" 1 577 "*int8" `251 
v L "src" 1 577 "*int8" `252 
f B "strcopy" 1 577 "void(*int8 dest,*int8 src)" `250 
v L "destination" 1 578 "*int8" `254 
v L "value" 1 578 "int8" `255 
v L "num" 1 578 "int16" `256 
f B "memset" 1 578 "void(*int8 destination,int8 value,int16 num)" `253 
v L "destination" 1 579 "*int8" `258 
v L "source" 1 579 "*int8" `259 
v L "num" 1 579 "int16" `260 
f B "memcpy" 1 579 "void(*int8 destination,*int8 source,int16 num)" `257  "String Prototypes:"
v L "cvalue" 1 582 "int8" `262 
f B "toupper" 1 582 "int8(int8 cvalue)" `261 
v L "cvalue" 1 583 "int8" `264 
f B "tolower" 1 583 "int8(int8 cvalue)" `263 
v L "string" 1 584 "*int8" `266 
v L "cstring" 1 584 "*int8" `267 
f B "sprintf" 1 584 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `265  "Data Manipulators Prototypes:"
v L "address" 1 587 "*int8" `270 
v L "bytes" 1 587 "int8" `271 
v L "value" 1 587 "int8" `272 
f B "shift_left" 1 587 "int8(*int8 address,int8 bytes,int8 value)" `269 
v L "address" 1 588 "*int8" `274 
v L "bytes" 1 588 "int8" `275 
v L "value" 1 588 "int8" `276 
f B "shift_right" 1 588 "int8(*int8 address,int8 bytes,int8 value)" `273 
v L "address" 1 589 "*int8" `278 
v L "bytes" 1 589 "int8" `279 
f B "rotate_left" 1 589 "void(*int8 address,int8 bytes)" `277 
v L "address" 1 590 "*int8" `281 
v L "bytes" 1 590 "int8" `282 
f B "rotate_right" 1 590 "void(*int8 address,int8 bytes)" `280 
v L "value" 1 591 "int8" `284 
f B "swap" 1 591 "void(int8 value)" `283 
v L "var" 1 592 "int16" `286 
v L "offset" 1 592 "int8" `287 
f B "make8" 1 592 "int8(int16 var,int8 offset)" `285 
v L "var" 1 593 "int32" `286 
v L "offset" 1 593 "int8" `290 
f G "make8" 1 593 "int8(int32 var,int8 offset)" `288 
v L "varhigh" 1 594 "int8" `292 
v L "varlow" 1 594 "int8" `293 
f B "make16" 1 594 "int16(int8 varhigh,int8 varlow)" `291 
v L "var1" 1 595 "int16" `295 
f B "make32" 1 595 "int32(int16 var1)" `294 
v L "var1" 1 596 "int16" `297 
v L "var2" 1 596 "int16" `298 
f G "make32" 1 596 "int32(int16 var1,int16 var2)" `296 
v L "var1" 1 597 "int16" `297 
v L "var2" 1 597 "int8" `301 
f G "make32" 1 597 "int32(int16 var1,int8 var2)" `299 
v L "var1" 1 598 "int16" `303 
v L "var2" 1 598 "int8" `304 
v L "var3" 1 598 "int8" `305 
f G "make32" 1 598 "int32(int16 var1,int8 var2,int8 var3)" `302 
v L "var1" 1 599 "int8" `307 
f G "make32" 1 599 "int32(int8 var1)" `306 
v L "var1" 1 600 "int8" `297 
v L "var2" 1 600 "int8" `310 
f G "make32" 1 600 "int32(int8 var1,int8 var2)" `308 
v L "var1" 1 601 "int8" `303 
v L "var2" 1 601 "int8" `304 
v L "var3" 1 601 "int8" `314 
f G "make32" 1 601 "int32(int8 var1,int8 var2,int8 var3)" `311 
v L "var1" 1 602 "int8" `316 
v L "var2" 1 602 "int8" `317 
v L "var3" 1 602 "int8" `318 
v L "var4" 1 602 "int8" `319 
f G "make32" 1 602 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `315 
v L "var1" 1 603 "int8" `297 
v L "var2" 1 603 "int16" `322 
f G "make32" 1 603 "int32(int8 var1,int16 var2)" `320 
v L "var1" 1 604 "int8" `303 
v L "var2" 1 604 "int16" `304 
v L "var3" 1 604 "int8" `326 
f G "make32" 1 604 "int32(int8 var1,int16 var2,int8 var3)" `323 
v L "var1" 1 605 "int8" `303 
v L "var2" 1 605 "int8" `304 
v L "var3" 1 605 "int16" `330 
f G "make32" 1 605 "int32(int8 var1,int8 var2,int16 var3)" `327 
v L "var" 1 606 "int8" `332 
v L "bit" 1 606 "int8" `333 
f B "bit_set" 1 606 "void(int8 var,int8 bit)" `331 
v L "var" 1 607 "int16" `332 
v L "bit" 1 607 "int8" `336 
f G "bit_set" 1 607 "void(int16 var,int8 bit)" `334 
v L "var" 1 608 "int32" `332 
v L "bit" 1 608 "int8" `339 
f G "bit_set" 1 608 "void(int32 var,int8 bit)" `337 
v L "var" 1 609 "int8" `341 
v L "bit" 1 609 "int8" `342 
f B "bit_clear" 1 609 "void(int8 var,int8 bit)" `340 
v L "var" 1 610 "int16" `341 
v L "bit" 1 610 "int8" `345 
f G "bit_clear" 1 610 "void(int16 var,int8 bit)" `343 
v L "var" 1 611 "int32" `341 
v L "bit" 1 611 "int8" `348 
f G "bit_clear" 1 611 "void(int32 var,int8 bit)" `346 
v L "var" 1 612 "int8" `350 
v L "bit" 1 612 "int8" `351 
f B "bit_test" 1 612 "int8(int8 var,int8 bit)" `349 
v L "var" 1 613 "int16" `350 
v L "bit" 1 613 "int8" `354 
f G "bit_test" 1 613 "int8(int16 var,int8 bit)" `352 
v L "var" 1 614 "int32" `350 
v L "bit" 1 614 "int8" `357 
f G "bit_test" 1 614 "int8(int32 var,int8 bit)" `355  "#use delay() Prototypes:"
v L "count" 1 617 "int8" `359 
f B "delay_cycles" 1 617 "void(int8 count)" `358 
v L "time" 1 618 "int16" `361 
f B "delay_ms" 1 618 "void(int16 time)" `360 
v L "time" 1 619 "int16" `363 
f B "delay_us" 1 619 "void(int16 time)" `362  "#use rs232() Prototypes:"
v L "cdata" 1 622 "int8" `365 
f B "putchar" 1 622 "void(int8 cdata)" `364 
v L "cdata" 1 623 "int8" `367 
v L "stream" 1 623 "int8" `368 
f G "putchar" 1 623 "void(int8 cdata,int8 stream)" `366 
v L "string" 1 624 "*int8" `370 
f B "puts" 1 624 "void(*int8 string)" `369 
v L "string" 1 625 "*int8" `372 
v L "stream" 1 625 "int8" `373 
f G "puts" 1 625 "void(*int8 string,int8 stream)" `371 
f B "getch" 1 626 "int8()" `374 
v L "stream" 1 627 "int8" `376 
f G "getch" 1 627 "int8(int8 stream)" `375 
v L "string" 1 628 "*int8" `378 
f B "gets" 1 628 "void(*int8 string)" `377 
v L "string" 1 629 "*int8" `380 
v L "stream" 1 629 "int8" `381 
f G "gets" 1 629 "void(*int8 string,int8 stream)" `379 
f B "kbhit" 1 630 "int8()" `382 
v L "stream" 1 631 "int8" `384 
f G "kbhit" 1 631 "int8(int8 stream)" `383 
v L "string" 1 632 "*int8" `386 
f B "printf" 1 632 "void(*int8 string,*int8 _VA_LIST)" `385 
v L "stream" 1 633 "int8" `389 
v L "string" 1 633 "*int8" `390 
f B "fprintf" 1 633 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `388 
f B "putc_send" 1 634 "void()" `392 
v L "stream" 1 635 "int8" `394 
f B "fputc_send" 1 635 "void(int8 stream)" `393 
f B "rcv_buffer_full" 1 636 "int8()" `395 
v L "stream" 1 637 "int8" `397 
f G "rcv_buffer_full" 1 637 "int8(int8 stream)" `396 
f B "rcv_buffer_bytes" 1 638 "int16()" `398 
v L "stream" 1 639 "int8" `400 
f G "rcv_buffer_bytes" 1 639 "int16(int8 stream)" `399 
f B "tx_buffer_full" 1 640 "int8()" `401 
v L "stream" 1 641 "int8" `403 
f G "tx_buffer_full" 1 641 "int8(int8 stream)" `402 
f B "tx_buffer_bytes" 1 642 "int16()" `404 
v L "stream" 1 643 "int8" `406 
f G "tx_buffer_bytes" 1 643 "int16(int8 stream)" `405  "#use i2c() Prototypes:"
f B "i2c_read" 1 646 "int8()" `407 
v L "stream" 1 647 "int8" `409 
f G "i2c_read" 1 647 "int8(int8 stream)" `408 
v L "stream" 1 648 "int8" `411 
v L "ack" 1 648 "int8" `412 
f G "i2c_read" 1 648 "int8(int8 stream,int8 ack)" `410 
v L "data" 1 649 "int8" `414 
f B "i2c_write" 1 649 "int8(int8 data)" `413 
v L "stream" 1 650 "int8" `416 
v L "data" 1 650 "int8" `417 
f G "i2c_write" 1 650 "int8(int8 stream,int8 data)" `415 
f B "i2c_start" 1 651 "void()" `418 
v L "stream" 1 652 "int8" `420 
f G "i2c_start" 1 652 "void(int8 stream)" `419 
v L "stream" 1 653 "int8" `422 
v L "restart" 1 653 "int8" `423 
f G "i2c_start" 1 653 "void(int8 stream,int8 restart)" `421 
f B "i2c_stop" 1 654 "void()" `424 
v L "stream" 1 655 "int8" `426 
f G "i2c_stop" 1 655 "void(int8 stream)" `425 
f B "i2c_isr_state" 1 656 "int8()" `427 
v L "addr" 1 657 "int8" `429 
f B "i2c_slaveaddr" 1 657 "void(int8 addr)" `428 
v L "stream" 1 658 "int8" `431 
v L "addr" 1 658 "int8" `432 
f G "i2c_slaveaddr" 1 658 "void(int8 stream,int8 addr)" `430 
f B "i2c_poll" 1 659 "int8()" `433 
v L "stream" 1 660 "int8" `435 
f G "i2c_poll" 1 660 "int8(int8 stream)" `434 
v L "baud" 1 661 "int32" `437 
f B "i2c_init" 1 661 "void(int32 baud)" `436 
v L "stream" 1 662 "int8" `439 
v L "baud" 1 662 "int32" `440 
f G "i2c_init" 1 662 "void(int8 stream,int32 baud)" `438  "#use spi() Prototypes:"
f B "spi_xfer" 1 665 "int8()" `441 
f G "spi_xfer" 1 666 "int16()" `442 
f G "spi_xfer" 1 667 "int32()" `443 
v L "data" 1 668 "int8" `445 
f G "spi_xfer" 1 668 "int8(int8 data)" `444 
v L "data" 1 669 "int16" `447 
f G "spi_xfer" 1 669 "int16(int16 data)" `446 
v L "data" 1 670 "int32" `449 
f G "spi_xfer" 1 670 "int32(int32 data)" `448 
v L "stream" 1 671 "int8" `451 
v L "data" 1 671 "int8" `452 
f G "spi_xfer" 1 671 "int8(int8 stream,int8 data)" `450 
v L "stream" 1 672 "int8" `451 
v L "data" 1 672 "int16" `455 
f G "spi_xfer" 1 672 "int16(int8 stream,int16 data)" `453 
v L "stream" 1 673 "int8" `451 
v L "data" 1 673 "int32" `458 
f G "spi_xfer" 1 673 "int32(int8 stream,int32 data)" `456 
v L "stream" 1 674 "int8" `460 
v L "data" 1 674 "int8" `461 
v L "bits" 1 674 "int8" `462 
f G "spi_xfer" 1 674 "int8(int8 stream,int8 data,int8 bits)" `459 
v L "stream" 1 675 "int8" `460 
v L "data" 1 675 "int16" `461 
v L "bits" 1 675 "int8" `466 
f G "spi_xfer" 1 675 "int16(int8 stream,int16 data,int8 bits)" `463 
v L "stream" 1 676 "int8" `460 
v L "data" 1 676 "int32" `461 
v L "bits" 1 676 "int8" `470 
f G "spi_xfer" 1 676 "int32(int8 stream,int32 data,int8 bits)" `467 
v L "baud" 1 677 "int32" `472 
f B "spi_init" 1 677 "void(int32 baud)" `471 
v L "stream" 1 678 "int8" `474 
v L "baud" 1 678 "int32" `475 
f G "spi_init" 1 678 "void(int8 stream,int32 baud)" `473 
v L "baud" 1 679 "int32" `477 
f B "spi_speed" 1 679 "void(int32 baud)" `476 
v L "stream" 1 680 "int8" `479 
v L "baud" 1 680 "int32" `480 
f G "spi_speed" 1 680 "void(int8 stream,int32 baud)" `478 
v L "stream" 1 681 "int8" `482 
v L "baud" 1 681 "int32" `483 
v L "clock" 1 681 "int32" `484 
f G "spi_speed" 1 681 "void(int8 stream,int32 baud,int32 clock)" `481 
v L "data" 1 682 "int8" `486 
f B "spi_prewrite" 1 682 "void(int8 data)" `485 
v L "data" 1 683 "int16" `488 
f G "spi_prewrite" 1 683 "void(int16 data)" `487 
v L "data" 1 684 "int32" `490 
f G "spi_prewrite" 1 684 "void(int32 data)" `489 
v L "??65535" 1 685 "int8" `492 
v L "data" 1 685 "int8" `493 
f G "spi_prewrite" 1 685 "void(int8 ,int8 data)" `491 
v L "??65535" 1 686 "int8" `492 
v L "data" 1 686 "int16" `496 
f G "spi_prewrite" 1 686 "void(int8 ,int16 data)" `494 
v L "??65535" 1 687 "int8" `492 
v L "data" 1 687 "int32" `499 
f G "spi_prewrite" 1 687 "void(int8 ,int32 data)" `497 
f B "spi_xfer_in" 1 688 "int8()" `500 
f G "spi_xfer_in" 1 689 "int16()" `501 
f G "spi_xfer_in" 1 690 "int32()" `502 
v L "bits" 1 691 "int8" `504 
f G "spi_xfer_in" 1 691 "int8(int8 bits)" `503 
v L "bits" 1 692 "int8" `506 
f G "spi_xfer_in" 1 692 "int16(int8 bits)" `505 
v L "bits" 1 693 "int8" `508 
f G "spi_xfer_in" 1 693 "int32(int8 bits)" `507 
v L "stream" 1 694 "int8" `510 
v L "bits" 1 694 "int8" `511 
f G "spi_xfer_in" 1 694 "int8(int8 stream,int8 bits)" `509 
v L "stream" 1 695 "int8" `510 
v L "bits" 1 695 "int8" `514 
f G "spi_xfer_in" 1 695 "int16(int8 stream,int8 bits)" `512 
v L "stream" 1 696 "int8" `510 
v L "bits" 1 696 "int8" `517 
f G "spi_xfer_in" 1 696 "int32(int8 stream,int8 bits)" `515  "#use rtos() Prototypes:"
f B "rtos_run" 1 699 "void()" `518 
f B "rtos_yield" 1 700 "void()" `519 
v L "task" 1 701 "int8" `521 
f B "rtos_enable" 1 701 "void(int8 task)" `520 
v L "task" 1 702 "int8" `523 
f B "rtos_disable" 1 702 "void(int8 task)" `522 
f B "rtos_terminate" 1 703 "void()" `524 
v L "flag" 1 704 "int8" `526 
f B "rtos_await" 1 704 "void(int8 flag)" `525 
v L "sem" 1 705 "int8" `528 
f B "rtos_wait" 1 705 "void(int8 sem)" `527 
v L "sem" 1 706 "int8" `530 
f B "rtos_signal" 1 706 "void(int8 sem)" `529 
v L "task" 1 707 "int8" `532 
v L "msg" 1 707 "int8" `533 
f B "rtos_msg_send" 1 707 "void(int8 task,int8 msg)" `531 
f B "rtos_msg_read" 1 708 "int8()" `534 
f B "rtos_msg_poll" 1 709 "int8()" `535 
v L "task" 1 710 "int8" `537 
f B "rtos_overrun" 1 710 "int8(int8 task)" `536 
v L "task" 1 711 "int8" `539 
v L "stat" 1 711 "*int8" `540 
f B "rtos_stats" 1 711 "void(int8 task,*int8 stat)" `538  "#use timer() Prototypes:"
f B "get_ticks" 1 714 "int8()" `541 
f G "get_ticks" 1 715 "int16()" `542 
f G "get_ticks" 1 716 "int32()" `543 
v L "stream" 1 717 "int8" `545 
f G "get_ticks" 1 717 "int8(int8 stream)" `544 
v L "stream" 1 718 "int8" `547 
f G "get_ticks" 1 718 "int16(int8 stream)" `546 
v L "stream" 1 719 "int8" `549 
f G "get_ticks" 1 719 "int32(int8 stream)" `548 
v L "value" 1 720 "int8" `551 
f B "set_ticks" 1 720 "void(int8 value)" `550 
v L "value" 1 721 "int16" `553 
f G "set_ticks" 1 721 "void(int16 value)" `552 
v L "value" 1 722 "int32" `555 
f G "set_ticks" 1 722 "void(int32 value)" `554 
v L "stream" 1 723 "int8" `557 
v L "value" 1 723 "int8" `558 
f G "set_ticks" 1 723 "void(int8 stream,int8 value)" `556 
v L "stream" 1 724 "int8" `557 
v L "value" 1 724 "int16" `561 
f G "set_ticks" 1 724 "void(int8 stream,int16 value)" `559 
v L "stream" 1 725 "int8" `557 
v L "value" 1 725 "int32" `564 
f G "set_ticks" 1 725 "void(int8 stream,int32 value)" `562  "#use pwm() Prototypes:"
f B "pwm_on" 1 728 "void()" `565 
v L "stream" 1 729 "int8" `567 
f G "pwm_on" 1 729 "void(int8 stream)" `566 
f B "pwm_off" 1 730 "void()" `568 
v L "stream" 1 731 "int8" `570 
f G "pwm_off" 1 731 "void(int8 stream)" `569 
v L "duty" 1 732 "int16" `572 
f B "pwm_set_duty" 1 732 "void(int16 duty)" `571 
v L "stream" 1 733 "int8" `574 
v L "duty" 1 733 "int16" `575 
f G "pwm_set_duty" 1 733 "void(int8 stream,int16 duty)" `573 
v L "percent" 1 734 "int16" `577 
f B "pwm_set_duty_percent" 1 734 "void(int16 percent)" `576 
v L "stream" 1 735 "int8" `579 
v L "percent" 1 735 "int16" `580 
f G "pwm_set_duty_percent" 1 735 "void(int8 stream,int16 percent)" `578 
v L "frequency" 1 736 "int32" `582 
f B "pwm_set_frequency" 1 736 "void(int32 frequency)" `581 
v L "stream" 1 737 "int8" `584 
v L "frequency" 1 737 "int32" `585 
f G "pwm_set_frequency" 1 737 "void(int8 stream,int32 frequency)" `583  "#use capture() Prototypes:"
f B "get_capture_time" 1 740 "int16()" `586 
v L "stream" 1 741 "int8" `588 
f G "get_capture_time" 1 741 "int16(int8 stream)" `587 
f B "get_capture_event" 1 742 "int8()" `589 
v L "stream" 1 743 "int8" `591 
f G "get_capture_event" 1 743 "int8(int8 stream)" `590  "Enviroment Prototypes:"
c L "get_capture_event" 1 5 2 "FUNCTION"
v L "address" 1 756 "int16" `593 
f B "goto_address" 1 756 "void(int16 address)" `592 
v L "label" 1 757 "int16" `595 
f B "label_address" 1 757 "int16(int16 label)" `594  "Program Memory Prototypes:"
v L "address" 1 760 "int16" `597 
v L "dataptr" 1 760 "*int8" `598 
v L "count" 1 760 "int16" `599 
f B "read_program_memory" 1 760 "void(int16 address,*int8 dataptr,int16 count)" `596 
v L "address" 1 761 "int16" `601 
f B "read_program_eeprom" 1 761 "int16(int16 address)" `600 
v L "address" 1 762 "int16" `603 
f B "erase_program_eeprom" 1 762 "void(int16 address)" `602 
v L "address" 1 763 "int16" `605 
v L "dataptr" 1 763 "*int8" `606 
v L "count" 1 763 "int16" `607 
f B "write_program_memory" 1 763 "void(int16 address,*int8 dataptr,int16 count)" `604 
v L "address" 1 764 "int16" `609 
v L "data" 1 764 "int16" `610 
f B "write_program_eeprom" 1 764 "void(int16 address,int16 data)" `608  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 769 "int16" `611 
v L "address" 1 774 "__EEADDRESS__" `613 
f B "read_eeprom" 1 774 "int8(__EEADDRESS__ address)" `612 
v L "address" 1 775 "__EEADDRESS__" `615 
v L "value" 1 775 "int8" `616 
f B "write_eeprom" 1 775 "void(__EEADDRESS__ address,int8 value)" `614  "INT"
c L "write_eeprom" 1 5 4 "FUNCTION"
v L "interrupt" 1 782 "int32" `618 
f B "enable_interrupts" 1 782 "void(int32 interrupt)" `617 
v L "interrupt" 1 783 "int32" `620 
f B "disable_interrupts" 1 783 "void(int32 interrupt)" `619 
v L "interrupt" 1 784 "int32" `622 
f B "clear_interrupt" 1 784 "void(int32 interrupt)" `621 
v L "interrupt" 1 785 "int32" `624 
f B "interrupt_active" 1 785 "int8(int32 interrupt)" `623 
v L "source" 1 786 "int8" `626 
v L "edge" 1 786 "int8" `627 
f B "ext_int_edge" 1 786 "void(int8 source,int8 edge)" `625 
v L "address" 1 787 "int16" `629 
f B "jump_to_irs" 1 787 "void(int16 address)" `628  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 789 "0x40"
d G "H_TO_L" 1 790 "0"
d G "GLOBAL" 1 792 "0xF2C0"
d G "PERIPH" 1 793 "0xF240"
d G "INT_RTCC" 1 794 "0x00F220"
d G "INT_TIMER0" 1 795 "0x00F220"
d G "INT_TIMER1" 1 796 "0x009D01"
d G "INT_TIMER2" 1 797 "0x009D02"
d G "INT_TIMER3" 1 798 "0x00A002"
d G "INT_EXT_L2H" 1 799 "0x5000F210"
d G "INT_EXT_H2L" 1 800 "0x6000F210"
d G "INT_EXT" 1 801 "0x00F210"
d G "INT_EXT1_L2H" 1 802 "0x5001F008"
d G "INT_EXT1_H2L" 1 803 "0x6001F008"
d G "INT_EXT1" 1 804 "0x00F008"
d G "INT_EXT2_L2H" 1 805 "0x5002F010"
d G "INT_EXT2_H2L" 1 806 "0x6002F010"
d G "INT_EXT2" 1 807 "0x00F010"
d G "INT_RB" 1 808 "0x00FFF208"
d G "INT_PSP" 1 809 "0x009D80"
d G "INT_AD" 1 810 "0x009D40"
d G "INT_RDA" 1 811 "0x009D20"
d G "INT_TBE" 1 812 "0x009D10"
d G "INT_SSP" 1 813 "0x009D08"
d G "INT_CCP1" 1 814 "0x009D04"
d G "INT_CCP2" 1 815 "0x00A001"
d G "INT_BUSCOL" 1 816 "0x00A008"
d G "INT_LOWVOLT" 1 817 "0x00A004"
d G "INT_COMP" 1 818 "0x00A040"
d G "INT_EEPROM" 1 819 "0x00A010"
d G "INT_OSCF" 1 820 "0x00A080"
d G "INT_HLVD" 1 821 "0x00A004"
C L "jump_to_irs" 2 1 1 "FUNCTION"
V G "TRISA" 2 3 "*int8" `634 
C L "jump_to_irs" 2 1 1 "FUNCTION"
V G "TRISB" 2 4 "*int8" `635 
V G "TRISC" 2 5 "*int8" `636 
V G "TRISD" 2 6 "*int8" `637 
V G "TRISE" 2 7 "*int8" `638 
V G "LATA" 2 9 "*int8" `639 
C L "jump_to_irs" 2 1 1 "FUNCTION"
V G "LATB" 2 10 "*int8" `640 
V G "LATC" 2 11 "*int8" `641 
V G "LATD" 2 12 "*int8" `642 
V G "LATE" 2 13 "*int8" `643 
V G "PORTA" 2 15 "*int8" `644 
C L "jump_to_irs" 2 1 1 "FUNCTION"
V G "PORTB" 2 16 "*int8" `645 
V G "PORTC" 2 17 "*int8" `646 
V G "PORTD" 2 18 "*int8" `647 
V G "PORTE" 2 19 "*int8" `648 
V G "ADCON0" 2 27 "*_adcon0" `654 
C L "jump_to_irs" 2 1 1 "FUNCTION"
V G "ADCON1" 2 35 "*_adcon1" `660 
V G "ADCON2" 2 43 "*_adcon2" `666 
V G "Q" 2 45 "*int16" `667 
V G "ADRESH" 2 46 "*int8" `668 
V G "ADRESL" 2 47 "*int8" `669 
V G "INTCON" 2 59 "*_intcon" `679 
V G "INTCON3" 2 71 "*_intcon3" `689 
C L "jump_to_irs" 2 1 1 "FUNCTION"
V G "INTCON2" 2 83 "*_intcon2" `699 
V G "PIE1" 2 95 "*_pie1" `709 
V G "T1CON" 2 106 "*_t1con" `718 
V G "CCP1CON" 2 113 "*_ccpxcon" `723 
V G "CCP2CON" 2 114 "*_ccpxcon" `724 
D G "use_portb_lcd" 3 40 "FALSE"
C L "jump_to_irs" 3 2 1 "FUNCTION"
C L "jump_to_irs" 3 2 1 "FUNCTION"
C L "jump_to_irs" 3 2 1 "FUNCTION"
C L "jump_to_irs" 3 2 1 "FUNCTION"
C L "jump_to_irs" 3 2 1 "FUNCTION"
C L "jump_to_irs" 3 2 1 "FUNCTION"
V G "lcd" 3 49 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `731  "struct lcd_pin_map *lcd = 0xF83;"
C L "jump_to_irs" 3 2 4 "FUNCTION"
D G "set_tris_lcd" 3 68 "(x) set_tris_d(x)"
D G "lcd_type" 3 72 "3" "0=5x7, 1=5x10, 2=2 lines, 3=2 lines Disp ON"
D G "lcd_line_two" 3 73 "0x40" "LCD RAM address for the second line             ?????????"
V G "LCD_INIT_STRING" 3 75 "[4]" `732 
C L "jump_to_irs" 3 2 4 "FUNCTION"
V G "LCD_WRITE" 3 83 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `735 
C L "jump_to_irs" 3 2 1 "FUNCTION"
V G "LCD_READ" 3 84 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `737 
C L "jump_to_irs" 3 2 1 "FUNCTION"
F G "lcd_read_byte" 3 88 "int8()" `739 
V L "low" 3 89 "int8" `740 
V L "high" 3 89 "int8" `741 
V L "n" 3 107 "int8" `743 
F G "lcd_send_nibble" 3 107 "void(int8 n)" `742 
V L "address" 3 116 "int8" `745 
V L "n" 3 116 "int8" `746 
F G "lcd_send_byte" 3 116 "void(int8 address,int8 n)" `744 
F G "lcd_init" 3 130 "void()" `747 
V L "i" 3 131 "int8" `748 
C L "lcd_init" 3 2 1 "FUNCTION"
C L "lcd_init" 3 2 5 "FUNCTION"
C L "lcd_init" 3 2 1 "FUNCTION"
C L "lcd_init" 3 2 1 "FUNCTION"
C L "lcd_init" 3 2 1 "FUNCTION"
V L "x" 3 151 "int8" `750 
V L "y" 3 151 "int8" `751 
F G "lcd_gotoxy" 3 151 "void(int8 x,int8 y)" `749 
V L "address" 3 152 "int8" `752 
V L "c" 3 162 "int8" `754 
F G "lcd_putc" 3 162 "void(int8 c)" `753 
V L "x" 3 173 "int8" `756 
V L "y" 3 173 "int8" `757 
F G "lcd_getc" 3 173 "int8(int8 x,int8 y)" `755 
V L "value" 3 174 "int8" `758 
C L "lcd_getc" 3 2 1 "FUNCTION"
V G "x" 0 7 "int8" `759 
F G "int_timer1_isr" 0 9 "void()" `760 
C L "int_timer1_isr" 0 10 1 "FUNCTION"
V G "t_start" 0 13 "int16" `761 
V G "t_stop" 0 13 "int16" `762 
V G "delta_t" 0 13 "int16" `763 
F G "int_ccp1_isr" 0 15 "void()" `764 
F G "MAIN" 0 22 "int8()" `768 
V L "T1c" 0 23 "float" `769 
C L "MAIN" 0 10 1 "FUNCTION"
C L "MAIN" 0 10 1 "FUNCTION"
C L "MAIN" 0 10 1 "FUNCTION"
C L "MAIN" 0 10 1 "FUNCTION"
C L "MAIN" 0 10 1 "FUNCTION"
C L "MAIN" 0 10 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
