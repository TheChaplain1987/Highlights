CCS PCH C Compiler, Version 5.085, 47635               31-Oct-23 14:42

               Filename:   D:\Microcontrollers\Timers\Capture\FrequencyCounter.lst

               ROM used:   2574 bytes (8%)
                           Largest free fragment is 30190
               RAM used:   106 (7%) at main() level
                           144 (9%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   07DC
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   00CE
0060:  BTFSS  F9D.2
0062:  GOTO   006C
0066:  BTFSC  F9E.2
0068:  GOTO   012C
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include <18f4520.h> 
.................... //////////// Standard Header file for the PIC18F4520 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4520 
00BA:  CLRF   FF7
00BC:  ADDLW  CA
00BE:  MOVWF  FF6
00C0:  MOVLW  00
00C2:  ADDWFC FF7,F
00C4:  TBLRD*+
00C6:  MOVF   FF5,W
00C8:  RETURN 0
00CA:  DATA 2C,0F
00CC:  DATA 01,06
*
00D6:  CLRF   x8A
00D8:  CLRF   x8B
00DA:  MOVLW  01
00DC:  MOVWF  x8C
00DE:  CLRF   FDA
00E0:  CLRF   FD9
00E2:  CLRF   x8F
00E4:  MOVLW  82
00E6:  MOVWF  x8E
00E8:  CLRF   FEA
00EA:  MOVLW  86
00EC:  MOVWF  FE9
00EE:  MOVFF  8F,FE2
00F2:  MOVFF  8E,FE1
00F6:  MOVFF  8C,8D
00FA:  BCF    FD8.0
00FC:  MOVF   FE5,W
00FE:  MULWF  FEE
0100:  MOVF   FF3,W
0102:  ADDWFC x8A,F
0104:  MOVF   FF4,W
0106:  ADDWFC x8B,F
0108:  DECFSZ x8D,F
010A:  BRA    00FA
010C:  MOVFF  8A,FDE
0110:  MOVFF  8B,8A
0114:  CLRF   x8B
0116:  BTFSC  FD8.0
0118:  INCF   x8B,F
011A:  INCF   x8E,F
011C:  BTFSC  FD8.2
011E:  INCF   x8F,F
0120:  INCF   x8C,F
0122:  MOVF   x8C,W
0124:  SUBLW  05
0126:  BNZ   00E8
0128:  GOTO   0154 (RETURN)
*
018E:  DATA 0C,20
0190:  DATA 46,20
0192:  DATA 3D,20
0194:  DATA 25,66
0196:  DATA 00,00
*
0288:  MOVLW  8E
028A:  MOVWF  00
028C:  MOVFF  69,01
0290:  MOVFF  68,02
0294:  CLRF   03
0296:  MOVF   01,F
0298:  BNZ   02AC
029A:  MOVFF  02,01
029E:  CLRF   02
02A0:  MOVLW  08
02A2:  SUBWF  00,F
02A4:  MOVF   01,F
02A6:  BNZ   02AC
02A8:  CLRF   00
02AA:  BRA    02BC
02AC:  BCF    FD8.0
02AE:  BTFSC  01.7
02B0:  BRA    02BA
02B2:  RLCF   02,F
02B4:  RLCF   01,F
02B6:  DECF   00,F
02B8:  BRA    02AC
02BA:  BCF    01.7
02BC:  GOTO   0958 (RETURN)
02C0:  MOVF   75,W
02C2:  BTFSC  FD8.2
02C4:  BRA    03A8
02C6:  MOVWF  00
02C8:  MOVF   79,W
02CA:  BTFSC  FD8.2
02CC:  BRA    03A8
02CE:  ADDWF  00,F
02D0:  BNC   02DA
02D2:  MOVLW  81
02D4:  ADDWF  00,F
02D6:  BC    03A8
02D8:  BRA    02E2
02DA:  MOVLW  7F
02DC:  SUBWF  00,F
02DE:  BNC   03A8
02E0:  BZ    03A8
02E2:  MOVFF  76,7D
02E6:  MOVF   7A,W
02E8:  XORWF  7D,F
02EA:  BSF    76.7
02EC:  BSF    7A.7
02EE:  MOVF   78,W
02F0:  MULWF  7C
02F2:  MOVFF  FF4,7F
02F6:  MOVF   77,W
02F8:  MULWF  7B
02FA:  MOVFF  FF4,03
02FE:  MOVFF  FF3,7E
0302:  MULWF  7C
0304:  MOVF   FF3,W
0306:  ADDWF  7F,F
0308:  MOVF   FF4,W
030A:  ADDWFC 7E,F
030C:  MOVLW  00
030E:  ADDWFC 03,F
0310:  MOVF   78,W
0312:  MULWF  7B
0314:  MOVF   FF3,W
0316:  ADDWF  7F,F
0318:  MOVF   FF4,W
031A:  ADDWFC 7E,F
031C:  MOVLW  00
031E:  CLRF   02
0320:  ADDWFC 03,F
0322:  ADDWFC 02,F
0324:  MOVF   76,W
0326:  MULWF  7C
0328:  MOVF   FF3,W
032A:  ADDWF  7E,F
032C:  MOVF   FF4,W
032E:  ADDWFC 03,F
0330:  MOVLW  00
0332:  ADDWFC 02,F
0334:  MOVF   76,W
0336:  MULWF  7B
0338:  MOVF   FF3,W
033A:  ADDWF  03,F
033C:  MOVF   FF4,W
033E:  ADDWFC 02,F
0340:  MOVLW  00
0342:  CLRF   01
0344:  ADDWFC 01,F
0346:  MOVF   78,W
0348:  MULWF  7A
034A:  MOVF   FF3,W
034C:  ADDWF  7E,F
034E:  MOVF   FF4,W
0350:  ADDWFC 03,F
0352:  MOVLW  00
0354:  ADDWFC 02,F
0356:  ADDWFC 01,F
0358:  MOVF   77,W
035A:  MULWF  7A
035C:  MOVF   FF3,W
035E:  ADDWF  03,F
0360:  MOVF   FF4,W
0362:  ADDWFC 02,F
0364:  MOVLW  00
0366:  ADDWFC 01,F
0368:  MOVF   76,W
036A:  MULWF  7A
036C:  MOVF   FF3,W
036E:  ADDWF  02,F
0370:  MOVF   FF4,W
0372:  ADDWFC 01,F
0374:  INCF   00,F
0376:  BTFSC  01.7
0378:  BRA    0384
037A:  RLCF   7E,F
037C:  RLCF   03,F
037E:  RLCF   02,F
0380:  RLCF   01,F
0382:  DECF   00,F
0384:  MOVLW  00
0386:  BTFSS  7E.7
0388:  BRA    039E
038A:  INCF   03,F
038C:  ADDWFC 02,F
038E:  ADDWFC 01,F
0390:  MOVF   01,W
0392:  BNZ   039E
0394:  MOVF   02,W
0396:  BNZ   039E
0398:  MOVF   03,W
039A:  BNZ   039E
039C:  INCF   00,F
039E:  BTFSC  7D.7
03A0:  BSF    01.7
03A2:  BTFSS  7D.7
03A4:  BCF    01.7
03A6:  BRA    03B0
03A8:  CLRF   00
03AA:  CLRF   01
03AC:  CLRF   02
03AE:  CLRF   03
03B0:  RETURN 0
03B2:  MOVF   68,W
03B4:  BTFSC  FD8.2
03B6:  BRA    0502
03B8:  MOVWF  74
03BA:  MOVF   6C,W
03BC:  BTFSC  FD8.2
03BE:  BRA    0502
03C0:  SUBWF  74,F
03C2:  BNC   03CE
03C4:  MOVLW  7F
03C6:  ADDWF  74,F
03C8:  BTFSC  FD8.0
03CA:  BRA    0502
03CC:  BRA    03DA
03CE:  MOVLW  81
03D0:  SUBWF  74,F
03D2:  BTFSS  FD8.0
03D4:  BRA    0502
03D6:  BTFSC  FD8.2
03D8:  BRA    0502
03DA:  MOVFF  74,00
03DE:  CLRF   01
03E0:  CLRF   02
03E2:  CLRF   03
03E4:  CLRF   73
03E6:  MOVFF  69,72
03EA:  BSF    72.7
03EC:  MOVFF  6A,71
03F0:  MOVFF  6B,70
03F4:  MOVLW  19
03F6:  MOVWF  74
03F8:  MOVF   6F,W
03FA:  SUBWF  70,F
03FC:  BC    0418
03FE:  MOVLW  01
0400:  SUBWF  71,F
0402:  BC    0418
0404:  SUBWF  72,F
0406:  BC    0418
0408:  SUBWF  73,F
040A:  BC    0418
040C:  INCF   73,F
040E:  INCF   72,F
0410:  INCF   71,F
0412:  MOVF   6F,W
0414:  ADDWF  70,F
0416:  BRA    0468
0418:  MOVF   6E,W
041A:  SUBWF  71,F
041C:  BC    0442
041E:  MOVLW  01
0420:  SUBWF  72,F
0422:  BC    0442
0424:  SUBWF  73,F
0426:  BC    0442
0428:  INCF   73,F
042A:  INCF   72,F
042C:  MOVF   6E,W
042E:  ADDWF  71,F
0430:  MOVF   6F,W
0432:  ADDWF  70,F
0434:  BNC   0468
0436:  INCF   71,F
0438:  BNZ   0468
043A:  INCF   72,F
043C:  BNZ   0468
043E:  INCF   73,F
0440:  BRA    0468
0442:  MOVF   6D,W
0444:  IORLW  80
0446:  SUBWF  72,F
0448:  BC    0466
044A:  MOVLW  01
044C:  SUBWF  73,F
044E:  BC    0466
0450:  INCF   73,F
0452:  MOVF   6D,W
0454:  IORLW  80
0456:  ADDWF  72,F
0458:  MOVF   6E,W
045A:  ADDWF  71,F
045C:  BNC   0430
045E:  INCF   72,F
0460:  BNZ   0430
0462:  INCF   73,F
0464:  BRA    0430
0466:  BSF    03.0
0468:  DECFSZ 74,F
046A:  BRA    046E
046C:  BRA    0484
046E:  BCF    FD8.0
0470:  RLCF   70,F
0472:  RLCF   71,F
0474:  RLCF   72,F
0476:  RLCF   73,F
0478:  BCF    FD8.0
047A:  RLCF   03,F
047C:  RLCF   02,F
047E:  RLCF   01,F
0480:  RLCF   75,F
0482:  BRA    03F8
0484:  BTFSS  75.0
0486:  BRA    0494
0488:  BCF    FD8.0
048A:  RRCF   01,F
048C:  RRCF   02,F
048E:  RRCF   03,F
0490:  RRCF   75,F
0492:  BRA    0498
0494:  DECF   00,F
0496:  BZ    0502
0498:  BTFSC  75.7
049A:  BRA    04D8
049C:  BCF    FD8.0
049E:  RLCF   70,F
04A0:  RLCF   71,F
04A2:  RLCF   72,F
04A4:  RLCF   73,F
04A6:  MOVF   6F,W
04A8:  SUBWF  70,F
04AA:  BC    04BA
04AC:  MOVLW  01
04AE:  SUBWF  71,F
04B0:  BC    04BA
04B2:  SUBWF  72,F
04B4:  BC    04BA
04B6:  SUBWF  73,F
04B8:  BNC   04EE
04BA:  MOVF   6E,W
04BC:  SUBWF  71,F
04BE:  BC    04CA
04C0:  MOVLW  01
04C2:  SUBWF  72,F
04C4:  BC    04CA
04C6:  SUBWF  73,F
04C8:  BNC   04EE
04CA:  MOVF   6D,W
04CC:  IORLW  80
04CE:  SUBWF  72,F
04D0:  BC    04D8
04D2:  MOVLW  01
04D4:  SUBWF  73,F
04D6:  BNC   04EE
04D8:  INCF   03,F
04DA:  BNZ   04EE
04DC:  INCF   02,F
04DE:  BNZ   04EE
04E0:  INCF   01,F
04E2:  BNZ   04EE
04E4:  INCF   00,F
04E6:  BZ    0502
04E8:  RRCF   01,F
04EA:  RRCF   02,F
04EC:  RRCF   03,F
04EE:  MOVFF  69,74
04F2:  MOVF   6D,W
04F4:  XORWF  74,F
04F6:  BTFSS  74.7
04F8:  BRA    04FE
04FA:  BSF    01.7
04FC:  BRA    050A
04FE:  BCF    01.7
0500:  BRA    050A
0502:  CLRF   00
0504:  CLRF   01
0506:  CLRF   02
0508:  CLRF   03
050A:  GOTO   09C6 (RETURN)
*
0574:  TBLRD*+
0576:  MOVFF  FF6,69
057A:  MOVFF  FF7,6A
057E:  MOVFF  FF5,75
0582:  RCALL  0532
0584:  MOVFF  69,FF6
0588:  MOVFF  6A,FF7
058C:  DECFSZ 68,F
058E:  BRA    0574
0590:  GOTO   09E4 (RETURN)
0594:  MOVF   75,W
0596:  SUBLW  B6
0598:  MOVWF  75
059A:  CLRF   03
059C:  MOVFF  76,79
05A0:  BSF    76.7
05A2:  BCF    FD8.0
05A4:  RRCF   76,F
05A6:  RRCF   77,F
05A8:  RRCF   78,F
05AA:  RRCF   03,F
05AC:  RRCF   02,F
05AE:  RRCF   01,F
05B0:  RRCF   00,F
05B2:  DECFSZ 75,F
05B4:  BRA    05A2
05B6:  BTFSS  79.7
05B8:  BRA    05D0
05BA:  COMF   00,F
05BC:  COMF   01,F
05BE:  COMF   02,F
05C0:  COMF   03,F
05C2:  INCF   00,F
05C4:  BTFSC  FD8.2
05C6:  INCF   01,F
05C8:  BTFSC  FD8.2
05CA:  INCF   02,F
05CC:  BTFSC  FD8.2
05CE:  INCF   03,F
05D0:  GOTO   06B0 (RETURN)
05D4:  BTFSC  FD8.1
05D6:  BRA    05DE
05D8:  CLRF   FEA
05DA:  MOVLW  7D
05DC:  MOVWF  FE9
05DE:  CLRF   00
05E0:  CLRF   01
05E2:  CLRF   02
05E4:  CLRF   03
05E6:  CLRF   7D
05E8:  CLRF   7E
05EA:  CLRF   7F
05EC:  CLRF   x80
05EE:  MOVF   7C,W
05F0:  IORWF  7B,W
05F2:  IORWF  7A,W
05F4:  IORWF  79,W
05F6:  BZ    0650
05F8:  MOVLW  20
05FA:  MOVWF  x81
05FC:  BCF    FD8.0
05FE:  RLCF   75,F
0600:  RLCF   76,F
0602:  RLCF   77,F
0604:  RLCF   78,F
0606:  RLCF   7D,F
0608:  RLCF   7E,F
060A:  RLCF   7F,F
060C:  RLCF   x80,F
060E:  MOVF   7C,W
0610:  SUBWF  x80,W
0612:  BNZ   0624
0614:  MOVF   7B,W
0616:  SUBWF  7F,W
0618:  BNZ   0624
061A:  MOVF   7A,W
061C:  SUBWF  7E,W
061E:  BNZ   0624
0620:  MOVF   79,W
0622:  SUBWF  7D,W
0624:  BNC   0644
0626:  MOVF   79,W
0628:  SUBWF  7D,F
062A:  MOVF   7A,W
062C:  BTFSS  FD8.0
062E:  INCFSZ 7A,W
0630:  SUBWF  7E,F
0632:  MOVF   7B,W
0634:  BTFSS  FD8.0
0636:  INCFSZ 7B,W
0638:  SUBWF  7F,F
063A:  MOVF   7C,W
063C:  BTFSS  FD8.0
063E:  INCFSZ 7C,W
0640:  SUBWF  x80,F
0642:  BSF    FD8.0
0644:  RLCF   00,F
0646:  RLCF   01,F
0648:  RLCF   02,F
064A:  RLCF   03,F
064C:  DECFSZ x81,F
064E:  BRA    05FC
0650:  MOVFF  7D,FEF
0654:  MOVFF  7E,FEC
0658:  MOVFF  7F,FEC
065C:  MOVFF  80,FEC
0660:  RETURN 0
0662:  MOVF   FE9,W
0664:  MOVWF  6D
0666:  MOVF   6C,W
0668:  MOVWF  6F
066A:  BZ    069E
066C:  MOVFF  6B,78
0670:  MOVFF  6A,77
0674:  MOVFF  69,76
0678:  MOVFF  68,75
067C:  CLRF   7C
067E:  CLRF   7B
0680:  MOVLW  20
0682:  MOVWF  7A
0684:  MOVLW  82
0686:  MOVWF  79
0688:  RCALL  02C0
068A:  MOVFF  03,6B
068E:  MOVFF  02,6A
0692:  MOVFF  01,69
0696:  MOVFF  00,68
069A:  DECFSZ 6F,F
069C:  BRA    066C
069E:  MOVFF  6B,78
06A2:  MOVFF  6A,77
06A6:  MOVFF  69,76
06AA:  MOVFF  68,75
06AE:  BRA    0594
06B0:  MOVFF  03,6B
06B4:  MOVFF  02,6A
06B8:  MOVFF  01,69
06BC:  MOVFF  00,68
06C0:  BTFSS  6B.7
06C2:  BRA    06DE
06C4:  DECF   6D,F
06C6:  BSF    6D.5
06C8:  COMF   68,F
06CA:  COMF   69,F
06CC:  COMF   6A,F
06CE:  COMF   6B,F
06D0:  INCF   68,F
06D2:  BTFSC  FD8.2
06D4:  INCF   69,F
06D6:  BTFSC  FD8.2
06D8:  INCF   6A,F
06DA:  BTFSC  FD8.2
06DC:  INCF   6B,F
06DE:  MOVLW  3B
06E0:  MOVWF  74
06E2:  MOVLW  9A
06E4:  MOVWF  73
06E6:  MOVLW  CA
06E8:  MOVWF  72
06EA:  CLRF   71
06EC:  MOVLW  0A
06EE:  MOVWF  6F
06F0:  MOVF   6C,W
06F2:  BTFSC  FD8.2
06F4:  INCF   6D,F
06F6:  BSF    FD8.1
06F8:  CLRF   FEA
06FA:  MOVLW  68
06FC:  MOVWF  FE9
06FE:  MOVFF  6B,78
0702:  MOVFF  6A,77
0706:  MOVFF  69,76
070A:  MOVFF  68,75
070E:  MOVFF  74,7C
0712:  MOVFF  73,7B
0716:  MOVFF  72,7A
071A:  MOVFF  71,79
071E:  RCALL  05D4
0720:  MOVF   01,W
0722:  MOVF   00,F
0724:  BNZ   0744
0726:  INCF   6C,W
0728:  SUBWF  6F,W
072A:  BZ    0744
072C:  MOVF   6D,W
072E:  BZ    0748
0730:  ANDLW  0F
0732:  SUBWF  6F,W
0734:  BZ    0738
0736:  BC    07A6
0738:  BTFSC  6D.7
073A:  BRA    07A6
073C:  BTFSC  6D.6
073E:  BRA    0748
0740:  MOVLW  20
0742:  BRA    079E
0744:  MOVLW  20
0746:  ANDWF  6D,F
0748:  BTFSS  6D.5
074A:  BRA    0764
074C:  BCF    6D.5
074E:  MOVF   6C,W
0750:  BTFSS  FD8.2
0752:  DECF   6D,F
0754:  MOVF   00,W
0756:  MOVWF  6D
0758:  MOVLW  2D
075A:  MOVWF  75
075C:  RCALL  0532
075E:  MOVF   6D,W
0760:  MOVWF  00
0762:  CLRF   6D
0764:  MOVF   6C,W
0766:  SUBWF  6F,W
0768:  BNZ   077E
076A:  MOVF   00,W
076C:  MOVWF  6D
076E:  MOVLW  2E
0770:  MOVWF  75
0772:  RCALL  0532
0774:  MOVF   6D,W
0776:  MOVWF  00
0778:  MOVLW  20
077A:  ANDWF  6D,F
077C:  MOVLW  00
077E:  MOVLW  30
0780:  BTFSS  6D.5
0782:  BRA    079E
0784:  BCF    6D.5
0786:  MOVF   6C,W
0788:  BTFSS  FD8.2
078A:  DECF   6D,F
078C:  MOVF   00,W
078E:  MOVWF  6D
0790:  MOVLW  2D
0792:  MOVWF  75
0794:  RCALL  0532
0796:  MOVF   6D,W
0798:  MOVWF  00
079A:  CLRF   6D
079C:  MOVLW  30
079E:  ADDWF  00,F
07A0:  MOVFF  00,75
07A4:  RCALL  0532
07A6:  BCF    FD8.1
07A8:  MOVFF  74,78
07AC:  MOVFF  73,77
07B0:  MOVFF  72,76
07B4:  MOVFF  71,75
07B8:  CLRF   7C
07BA:  CLRF   7B
07BC:  CLRF   7A
07BE:  MOVLW  0A
07C0:  MOVWF  79
07C2:  RCALL  05D4
07C4:  MOVFF  03,74
07C8:  MOVFF  02,73
07CC:  MOVFF  01,72
07D0:  MOVFF  00,71
07D4:  DECFSZ 6F,F
07D6:  BRA    06F6
07D8:  GOTO   09FE (RETURN)
....................  
.................... #list 
....................  
.................... #use delay (clock = 20000000) 
*
0198:  CLRF   FEA
019A:  MOVLW  76
019C:  MOVWF  FE9
019E:  MOVF   FEF,W
01A0:  BZ    01BC
01A2:  MOVLW  06
01A4:  MOVWF  01
01A6:  CLRF   00
01A8:  DECFSZ 00,F
01AA:  BRA    01A8
01AC:  DECFSZ 01,F
01AE:  BRA    01A6
01B0:  MOVLW  7B
01B2:  MOVWF  00
01B4:  DECFSZ 00,F
01B6:  BRA    01B4
01B8:  DECFSZ FEF,F
01BA:  BRA    01A2
01BC:  RETURN 0
.................... #fuses HS, NOWDT, NOLVP 
.................... #include "../../Library/myLibrary.h" 
.................... // A library for the PIC18F4520 
....................  
.................... int *TRISA = 0xF92; // Connect to TRISx 
.................... int *TRISB = 0xF93; 
.................... int *TRISC = 0xF94; 
.................... int *TRISD = 0xF95; 
.................... int *TRISE = 0xF96; 
....................  
.................... int *LATA = 0xF89;  // Connect to LATx 
.................... int *LATB = 0xF8A; 
.................... int *LATC = 0xF8B; 
.................... int *LATD = 0xF8C; 
.................... int *LATE = 0xF8D; 
....................  
.................... int *PORTA = 0xF80; // Connect to LATx 
.................... int *PORTB = 0xF81; 
.................... int *PORTC = 0xF82; 
.................... int *PORTD = 0xF83; 
.................... int *PORTE = 0xF84; 
....................  
.................... struct _adcon0 { 
....................    int ADON:1; 
....................    int GODONE:1; 
....................    int CHSx:4; 
....................    int unused:2; 
.................... }; 
.................... struct _adcon0 *ADCON0 = 0xFC2; 
....................  
.................... struct _adcon1 {   // Analog vs digital 
....................    int PCFGx:4; 
....................    int VCFG0:1; 
....................    int VCFG1:1; 
....................    int unused:2; 
.................... }; 
.................... struct _adcon1 *ADCON1 = 0xFC1; 
....................  
.................... struct _adcon2 { 
....................    int ADCSx:3; 
....................    int ACQTx:3; 
....................    int unused:1; 
....................    int ADFM:1; 
.................... }; 
.................... struct _adcon2 *ADCON2 = 0xFC0; 
....................  
.................... int16 *Q = 0xFC3; 
.................... int *ADRESH = 0xFC4; 
.................... int *ADRESL = 0xFC3; 
....................  
.................... struct _intcon { 
....................    int RBIF:1; 
....................    int INT0IF:1; 
....................    int TMR0IF:1; 
....................    int RBIE:1; 
....................    int INT0IE:1; 
....................    int TMR0IE:1; 
....................    int PEIE:1; 
....................    int GIE:1; 
.................... }; 
.................... struct _intcon *INTCON = 0xFF2; 
....................  
.................... struct _intcon3 { 
....................    int INT1IF:1; 
....................    int INT2IF:1; 
....................    int unused:1; 
....................    int INT1IE:1; 
....................    int INT2IE:1; 
....................    int notused:1; 
....................    int INT1IP:1; 
....................    int INT2IP:1; 
.................... }; 
.................... struct _intcon3 *INTCON3 = 0xFF0; 
....................  
.................... struct _intcon2 {  // Interrupts 
....................    int RBIP:1; 
....................    int unused:1; 
....................    int TMR0IP:1; 
....................    int notused:1; 
....................    int INTEDG2:1; 
....................    int INTEDG1:1; 
....................    int INTEDG0:1; 
....................    int RBPU:1; 
.................... }; 
.................... struct _intcon2 *INTCON2 = 0xFF1; 
....................  
.................... struct _pie1 { 
....................    int TMR1IE:1; 
....................    int TMR2IE:1; 
....................    int CCP1IE:1; 
....................    int SSPIE:1; 
....................    int TXIE:1; 
....................    int RCIE:1; 
....................    int ADIE:1; 
....................    int PSPIE:1; 
.................... }; 
.................... struct _pie1 *PIE1 = 0xF9D; 
....................  
.................... struct _t1con { 
....................    int TMR1ON:1; 
....................    int TMR1CS:1; 
....................    int T1SYNC:1; 
....................    int T1OSCEN:1; 
....................    int T1CKPSx:2; 
....................    int T1RUN: 1; 
....................    int RD16:1; 
.................... }; 
.................... struct _t1con *T1CON = 0xFCD; 
....................  
.................... struct _ccpxcon { 
....................    int CCPxMx:4; 
....................    int DCxBx:2; 
....................    int unused:2; 
.................... }; 
.................... struct _ccpxcon *CCP1CON = 0xFBD; 
.................... struct _ccpxcon *CCP2CON = 0xFBA; 
....................  
.................... int16 *CCPR1 = 0xFBE;      
....................  
.................... struct _eccplas { 
....................    int PSSBD:2; 
....................    int PSSAC:2; 
....................    int ECCPAS:3; 
....................    int ECCPASE:1; 
.................... }; 
.................... struct _eccplas *ECCP1AS = 0xFB6; 
....................  
.................... #include "../../Library/modifiedlcd.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             Modified LCD.C                        //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////         ***This function was modified to fit the Samsumgs6A0069   //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_lcd FALSE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         }lcd; 
.................... //struct lcd_pin_map *lcd = 0xF83; 
....................  
.................... //#if defined(__PCH__) 
.................... //#if defined use_portb_lcd 
.................... //   #byte lcd = 0xF81                   // This puts the entire structure 
.................... //#else 
....................    #byte lcd = 0xF83                   // This puts the entire structure 
.................... //#endif 
.................... //#else 
.................... //#if defined use_portb_lcd 
.................... //   #byte lcd = 6                  // on to port B (at address 6)                ???????? 
.................... //#else 
.................... //   #byte lcd = 8                 // on to port D (at address 8) 
.................... //#endif 
.................... //#endif 
....................  
.................... //#if defined use_portb_lcd 
.................... //   #define set_tris_lcd(x) set_tris_b(x) 
.................... //#else 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... //#endif 
....................  
....................  
.................... #define lcd_type 3           // 0=5x7, 1=5x10, 2=2 lines, 3=2 lines Disp ON 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line             ????????? 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0x0f, 0x01, 0x06}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0x0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,0xF}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
01DC:  MOVLW  F0
01DE:  MOVWF  F95
....................       lcd.rw = 1; 
01E0:  BSF    F83.2
....................       delay_cycles(1); 
01E2:  NOP   
....................       lcd.enable = 1; 
01E4:  BSF    F83.0
....................       delay_cycles(1); 
01E6:  NOP   
....................       high = lcd.data; 
01E8:  SWAPF  F83,W
01EA:  ANDLW  0F
01EC:  MOVWF  7D
....................       lcd.enable = 0; 
01EE:  BCF    F83.0
....................       delay_cycles(1); 
01F0:  NOP   
....................       lcd.enable = 1; 
01F2:  BSF    F83.0
....................       delay_us(1); 
01F4:  BRA    01F6
01F6:  BRA    01F8
01F8:  NOP   
....................       low = lcd.data; 
01FA:  SWAPF  F83,W
01FC:  ANDLW  0F
01FE:  MOVWF  7C
....................       lcd.enable = 0; 
0200:  BCF    F83.0
....................       set_tris_lcd(LCD_WRITE); 
0202:  MOVLW  00
0204:  MOVWF  F95
....................       return( (high<<4) | low); 
0206:  SWAPF  7D,W
0208:  MOVWF  00
020A:  MOVLW  F0
020C:  ANDWF  00,F
020E:  MOVF   00,W
0210:  IORWF  7C,W
0212:  MOVWF  01
0214:  GOTO   021C (RETURN)
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
01BE:  SWAPF  7D,W
01C0:  ANDLW  F0
01C2:  MOVWF  00
01C4:  MOVLW  0F
01C6:  ANDWF  F83,W
01C8:  IORWF  00,W
01CA:  MOVWF  F83
....................       delay_cycles(1); 
01CC:  NOP   
....................       lcd.enable = 1; 
01CE:  BSF    F83.0
....................       delay_us(2); 
01D0:  MOVLW  03
01D2:  MOVWF  00
01D4:  DECFSZ 00,F
01D6:  BRA    01D4
....................       lcd.enable = 0; 
01D8:  BCF    F83.0
01DA:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
0218:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
021A:  BRA    01DC
021C:  MOVFF  01,7C
0220:  BTFSC  01.7
0222:  BRA    021A
....................       lcd.rs = address; 
0224:  BTFSS  7A.0
0226:  BCF    F83.1
0228:  BTFSC  7A.0
022A:  BSF    F83.1
....................       delay_cycles(1); 
022C:  NOP   
....................       lcd.rw = 0; 
022E:  BCF    F83.2
....................       delay_cycles(1); 
0230:  NOP   
....................       lcd.enable = 0; 
0232:  BCF    F83.0
....................       lcd_send_nibble(n >> 4); 
0234:  SWAPF  7B,W
0236:  MOVWF  7C
0238:  MOVLW  0F
023A:  ANDWF  7C,F
023C:  MOVFF  7C,7D
0240:  RCALL  01BE
....................       lcd_send_nibble(n & 0xf); 
0242:  MOVF   7B,W
0244:  ANDLW  0F
0246:  MOVWF  7C
0248:  MOVWF  7D
024A:  RCALL  01BE
024C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
024E:  MOVLW  00
0250:  MOVWF  F95
....................     delay_ms(45);                                      // modified 
0252:  MOVLW  2D
0254:  MOVWF  76
0256:  RCALL  0198
....................     lcd.rs = 0; 
0258:  BCF    F83.1
....................     lcd.rw = 0; 
025A:  BCF    F83.2
....................     lcd.enable = 0; 
025C:  BCF    F83.0
....................     //delay_ms(15);                                    // modified 
....................     //for(i=1;i<=3;++i) {                              // modified 
....................     //   lcd_send_nibble(3);                           // modified 
....................     //   delay_ms(5);                                  // modified 
....................     //}                                                // modified 
....................     lcd_send_nibble(2); 
025E:  MOVLW  02
0260:  MOVWF  7D
0262:  RCALL  01BE
....................     for(i=0;i<=3;++i) 
0264:  CLRF   68
0266:  MOVF   68,W
0268:  SUBLW  03
026A:  BNC   0284
....................        {                                                // modified 
....................           lcd_send_byte(0,LCD_INIT_STRING[i]); 
026C:  CLRF   03
026E:  MOVF   68,W
0270:  RCALL  00BA
0272:  MOVWF  69
0274:  CLRF   7A
0276:  MOVWF  7B
0278:  RCALL  0218
....................           delay_ms(5);                                  // modified 
027A:  MOVLW  05
027C:  MOVWF  76
027E:  RCALL  0198
0280:  INCF   68,F
0282:  BRA    0266
....................        }                                                // modified 
0284:  GOTO   08E2 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
050E:  DECFSZ 77,W
0510:  BRA    0514
0512:  BRA    051A
....................      address=lcd_line_two; 
0514:  MOVLW  40
0516:  MOVWF  78
0518:  BRA    051C
....................    else 
....................      address=0; 
051A:  CLRF   78
....................    address+=x-1; 
051C:  MOVLW  01
051E:  SUBWF  76,W
0520:  ADDWF  78,F
....................    lcd_send_byte(0,0x80|address); 
0522:  MOVF   78,W
0524:  IORLW  80
0526:  MOVWF  79
0528:  CLRF   7A
052A:  MOVWF  7B
052C:  RCALL  0218
052E:  GOTO   0572 (RETURN)
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
0532:  MOVF   75,W
0534:  XORLW  0C
0536:  BZ    0542
0538:  XORLW  06
053A:  BZ    0552
053C:  XORLW  02
053E:  BZ    055E
0540:  BRA    0568
....................      case '\f'   : lcd_send_byte(0,1); 
0542:  CLRF   7A
0544:  MOVLW  01
0546:  MOVWF  7B
0548:  RCALL  0218
....................                    delay_ms(2); 
054A:  MOVLW  02
054C:  MOVWF  76
054E:  RCALL  0198
....................                                            break; 
0550:  BRA    0572
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0552:  MOVLW  01
0554:  MOVWF  76
0556:  MOVLW  02
0558:  MOVWF  77
055A:  BRA    050E
055C:  BRA    0572
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
055E:  CLRF   7A
0560:  MOVLW  10
0562:  MOVWF  7B
0564:  RCALL  0218
0566:  BRA    0572
....................      default     : lcd_send_byte(1,c);     break; 
0568:  MOVLW  01
056A:  MOVWF  7A
056C:  MOVFF  75,7B
0570:  RCALL  0218
....................    } 
0572:  RETURN 0
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... unsigned int x = 0; 
.................... unsigned int16 tstop, tstart, telapsed; 
.................... float TCCPx, RPM; 
....................  
.................... #INT_TIMER1 
.................... void int_timer1_isr(){ 
....................    x++;                     // Count the overflows 
*
00CE:  INCF   55,F
.................... } 
....................  
00D0:  BCF    F9E.0
00D2:  GOTO   006C
.................... #INT_CCP1 
.................... void int_ccp1_isr(){ 
....................     tstop = *CCPR1;   // 16 bit pointer to CCPR1L 
*
012C:  MOVFF  51,FE9
0130:  MOVFF  52,FEA
0134:  MOVFF  FEC,57
0138:  MOVF   FED,F
013A:  MOVFF  FEF,56
....................     telapsed = x * 0x10000 -tstart + tstop; 
013E:  CLRF   x85
0140:  CLRF   x84
0142:  CLRF   x83
0144:  MOVFF  55,82
0148:  CLRF   x89
014A:  MOVLW  01
014C:  MOVWF  x88
014E:  CLRF   x87
0150:  CLRF   x86
0152:  BRA    00D6
0154:  MOVFF  03,85
0158:  MOVFF  02,84
015C:  MOVFF  01,83
0160:  MOVFF  00,82
0164:  MOVF   58,W
0166:  SUBWF  x82,F
0168:  MOVF   59,W
016A:  SUBWFB x83,F
016C:  MOVLW  00
016E:  SUBWFB x84,F
0170:  SUBWFB x85,F
0172:  MOVF   56,W
0174:  ADDWF  x82,W
0176:  MOVWF  5A
0178:  MOVF   57,W
017A:  ADDWFC x83,W
017C:  MOVWF  5B
....................     x = 0;   // Rest Overflowwe 
017E:  CLRF   55
....................     tstart = tstop; 
0180:  MOVFF  57,59
0184:  MOVFF  56,58
0188:  BCF    F9E.2
018A:  GOTO   006C
.................... } 
....................  
.................... main(){ 
*
07DC:  CLRF   FF8
07DE:  BCF    FD0.7
07E0:  BSF    07.7
07E2:  MOVLW  0F
07E4:  MOVWF  1A
07E6:  MOVLW  92
07E8:  MOVWF  19
07EA:  MOVLW  0F
07EC:  MOVWF  1C
07EE:  MOVLW  93
07F0:  MOVWF  1B
07F2:  MOVLW  0F
07F4:  MOVWF  1E
07F6:  MOVLW  94
07F8:  MOVWF  1D
07FA:  MOVLW  0F
07FC:  MOVWF  20
07FE:  MOVLW  95
0800:  MOVWF  1F
0802:  MOVLW  0F
0804:  MOVWF  22
0806:  MOVLW  96
0808:  MOVWF  21
080A:  MOVLW  0F
080C:  MOVWF  24
080E:  MOVLW  89
0810:  MOVWF  23
0812:  MOVLW  0F
0814:  MOVWF  26
0816:  MOVLW  8A
0818:  MOVWF  25
081A:  MOVLW  0F
081C:  MOVWF  28
081E:  MOVLW  8B
0820:  MOVWF  27
0822:  MOVLW  0F
0824:  MOVWF  2A
0826:  MOVLW  8C
0828:  MOVWF  29
082A:  MOVLW  0F
082C:  MOVWF  2C
082E:  MOVLW  8D
0830:  MOVWF  2B
0832:  MOVLW  0F
0834:  MOVWF  2E
0836:  MOVLW  80
0838:  MOVWF  2D
083A:  MOVLW  0F
083C:  MOVWF  30
083E:  MOVLW  81
0840:  MOVWF  2F
0842:  MOVLW  0F
0844:  MOVWF  32
0846:  MOVLW  82
0848:  MOVWF  31
084A:  MOVLW  0F
084C:  MOVWF  34
084E:  MOVLW  83
0850:  MOVWF  33
0852:  MOVLW  0F
0854:  MOVWF  36
0856:  MOVLW  84
0858:  MOVWF  35
085A:  MOVLW  0F
085C:  MOVWF  38
085E:  MOVLW  C2
0860:  MOVWF  37
0862:  MOVLW  0F
0864:  MOVWF  3A
0866:  MOVLW  C1
0868:  MOVWF  39
086A:  MOVLW  0F
086C:  MOVWF  3C
086E:  MOVLW  C0
0870:  MOVWF  3B
0872:  MOVLW  0F
0874:  MOVWF  3E
0876:  MOVLW  C3
0878:  MOVWF  3D
087A:  MOVLW  0F
087C:  MOVWF  40
087E:  MOVLW  C4
0880:  MOVWF  3F
0882:  MOVLW  0F
0884:  MOVWF  42
0886:  MOVLW  C3
0888:  MOVWF  41
088A:  MOVLW  0F
088C:  MOVWF  44
088E:  MOVLW  F2
0890:  MOVWF  43
0892:  MOVLW  0F
0894:  MOVWF  46
0896:  MOVLW  F0
0898:  MOVWF  45
089A:  MOVLW  0F
089C:  MOVWF  48
089E:  MOVLW  F1
08A0:  MOVWF  47
08A2:  MOVLW  0F
08A4:  MOVWF  4A
08A6:  MOVLW  9D
08A8:  MOVWF  49
08AA:  MOVLW  0F
08AC:  MOVWF  4C
08AE:  MOVLW  CD
08B0:  MOVWF  4B
08B2:  MOVLW  0F
08B4:  MOVWF  4E
08B6:  MOVLW  BD
08B8:  MOVWF  4D
08BA:  MOVLW  0F
08BC:  MOVWF  50
08BE:  MOVLW  BA
08C0:  MOVWF  4F
08C2:  MOVLW  0F
08C4:  MOVWF  52
08C6:  MOVLW  BE
08C8:  MOVWF  51
08CA:  MOVLW  0F
08CC:  MOVWF  54
08CE:  MOVLW  B6
08D0:  MOVWF  53
08D2:  CLRF   55
08D4:  MOVF   FC1,W
08D6:  ANDLW  C0
08D8:  IORLW  0F
08DA:  MOVWF  FC1
08DC:  MOVLW  07
08DE:  MOVWF  FB4
....................    lcd_init();   // Initializing the LCD Panel 
08E0:  BRA    024E
....................    float T1c = 4 * 1 / 20000000.0;   
08E2:  MOVLW  95
08E4:  MOVWF  67
08E6:  MOVLW  BF
08E8:  MOVWF  66
08EA:  MOVLW  56
08EC:  MOVWF  65
08EE:  MOVLW  68
08F0:  MOVWF  64
....................    *TRISC = 0x4;          // 0000 0100   C2 is input 
08F2:  MOVFF  1D,FE9
08F6:  MOVFF  1E,FEA
08FA:  MOVLW  04
08FC:  MOVWF  FEF
....................    // Capture System Setup 
....................    CCP1CON->CCPxMx = 0x4; //Capture every falling 
08FE:  MOVFF  4D,FE9
0902:  MOVFF  4E,FEA
0906:  MOVLW  F0
0908:  ANDWF  FEF,W
090A:  IORLW  04
090C:  MOVWF  FEF
....................     
....................    // Timer Setup 
....................    //T1CON->TMR1ON = 1;     // Timer is ON 
....................    T1CON->TMR1CS = 0;     // Fosc / 4 
090E:  MOVFF  4B,FE9
0912:  MOVFF  4C,FEA
0916:  BCF    FEF.1
....................    T1CON->T1CKPSx = 0;    // PS = 1; 
0918:  MOVFF  4B,FE9
091C:  MOVFF  4C,FEA
0920:  MOVLW  CF
0922:  ANDWF  FEF,W
0924:  MOVWF  FEF
....................     
....................    // Interrupt System Setup 
....................    PIE1->TMR1IE = 1;      // Timer 1 overflow interrupt system 0n 
0926:  MOVFF  49,FE9
092A:  MOVFF  4A,FEA
092E:  BSF    FEF.0
....................    PIE1->CCP1IE = 1;      // CCP1 Interrupt Systen ON 
0930:  MOVFF  49,FE9
0934:  MOVFF  4A,FEA
0938:  BSF    FEF.2
....................    INTCON->PEIE = 1; 
093A:  MOVFF  43,FE9
093E:  MOVFF  44,FEA
0942:  BSF    FEF.6
....................    INTCON->GIE = 1;       // Interrupt System Enabled 
0944:  MOVFF  43,FE9
0948:  MOVFF  44,FEA
094C:  BSF    FEF.7
....................    while(1){ 
....................          // Just show me the data 
....................          // Math 
....................          TCCPx = telapsed * T1c; 
094E:  MOVFF  5B,69
0952:  MOVFF  5A,68
0956:  BRA    0288
0958:  MOVFF  03,78
095C:  MOVFF  02,77
0960:  MOVFF  01,76
0964:  MOVFF  00,75
0968:  MOVFF  67,7C
096C:  MOVFF  66,7B
0970:  MOVFF  65,7A
0974:  MOVFF  64,79
0978:  RCALL  02C0
097A:  MOVFF  03,5F
097E:  MOVFF  02,5E
0982:  MOVFF  01,5D
0986:  MOVFF  00,5C
....................          RPM = 60.0 / ( 161.0 * TCCPx ); 
098A:  CLRF   78
098C:  CLRF   77
098E:  MOVLW  21
0990:  MOVWF  76
0992:  MOVLW  86
0994:  MOVWF  75
0996:  MOVFF  5F,7C
099A:  MOVFF  5E,7B
099E:  MOVFF  5D,7A
09A2:  MOVFF  5C,79
09A6:  RCALL  02C0
09A8:  CLRF   6B
09AA:  CLRF   6A
09AC:  MOVLW  70
09AE:  MOVWF  69
09B0:  MOVLW  84
09B2:  MOVWF  68
09B4:  MOVFF  03,6F
09B8:  MOVFF  02,6E
09BC:  MOVFF  01,6D
09C0:  MOVFF  00,6C
09C4:  BRA    03B2
09C6:  MOVFF  03,63
09CA:  MOVFF  02,62
09CE:  MOVFF  01,61
09D2:  MOVFF  00,60
....................          //printf(lcd_putc,"\f F = %f", 1.0/(T1c * telapsed) ); 
....................          printf(lcd_putc,"\f F = %f",RPM ); 
09D6:  MOVLW  8E
09D8:  MOVWF  FF6
09DA:  MOVLW  01
09DC:  MOVWF  FF7
09DE:  MOVLW  06
09E0:  MOVWF  68
09E2:  BRA    0574
09E4:  MOVLW  89
09E6:  MOVWF  FE9
09E8:  MOVFF  63,6B
09EC:  MOVFF  62,6A
09F0:  MOVFF  61,69
09F4:  MOVFF  60,68
09F8:  MOVLW  02
09FA:  MOVWF  6C
09FC:  BRA    0662
....................          delay_ms(500); 
09FE:  MOVLW  02
0A00:  MOVWF  68
0A02:  MOVLW  FA
0A04:  MOVWF  76
0A06:  CALL   0198
0A0A:  DECFSZ 68,F
0A0C:  BRA    0A02
0A0E:  BRA    094E
....................    } 
.................... } 
....................  
0A10:  SLEEP 
....................     
....................     

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
