CCS PCH C Compiler, Version 5.085, 47635               05-Dec-23 13:56

               Filename:   D:\Microcontrollers\Cruise Control\Cruise-Control.lst

               ROM used:   3626 bytes (11%)
                           Largest free fragment is 29138
               RAM used:   139 (9%) at main() level
                           175 (11%) worst case
               Stack used: 6 locations (4 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   096E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   00E6
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   01B0
006C:  BTFSS  F9D.6
006E:  GOTO   0078
0072:  BTFSC  F9E.6
0074:  GOTO   0302
0078:  BTFSS  FA0.0
007A:  GOTO   0084
007E:  BTFSC  FA1.0
0080:  GOTO   0142
0084:  MOVFF  0E,00
0088:  MOVFF  0F,01
008C:  MOVFF  10,02
0090:  MOVFF  11,03
0094:  MOVFF  0C,FE9
0098:  MOVFF  07,FEA
009C:  BSF    07.7
009E:  MOVFF  08,FE1
00A2:  MOVFF  09,FE2
00A6:  MOVFF  0A,FD9
00AA:  MOVFF  0B,FDA
00AE:  MOVFF  12,FF3
00B2:  MOVFF  13,FF4
00B6:  MOVFF  14,FFA
00BA:  MOVFF  15,FF5
00BE:  MOVFF  16,FF6
00C2:  MOVFF  17,FF7
00C6:  MOVF   04,W
00C8:  MOVFF  06,FE0
00CC:  MOVFF  05,FD8
00D0:  RETFIE 0
.................... #include <18f4520.h> 
.................... //////////// Standard Header file for the PIC18F4520 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4520 
00D2:  CLRF   FF7
00D4:  ADDLW  E2
00D6:  MOVWF  FF6
00D8:  MOVLW  00
00DA:  ADDWFC FF7,F
00DC:  TBLRD*+
00DE:  MOVF   FF5,W
00E0:  RETURN 0
00E2:  DATA 2C,0F
00E4:  DATA 01,06
*
00EE:  CLRF   xA9
00F0:  CLRF   xAA
00F2:  MOVLW  01
00F4:  MOVWF  xAB
00F6:  CLRF   FDA
00F8:  CLRF   FD9
00FA:  CLRF   xAE
00FC:  MOVLW  A1
00FE:  MOVWF  xAD
0100:  CLRF   FEA
0102:  MOVLW  A5
0104:  MOVWF  FE9
0106:  MOVFF  AE,FE2
010A:  MOVFF  AD,FE1
010E:  MOVFF  AB,AC
0112:  BCF    FD8.0
0114:  MOVF   FE5,W
0116:  MULWF  FEE
0118:  MOVF   FF3,W
011A:  ADDWFC xA9,F
011C:  MOVF   FF4,W
011E:  ADDWFC xAA,F
0120:  DECFSZ xAC,F
0122:  BRA    0112
0124:  MOVFF  A9,FDE
0128:  MOVFF  AA,A9
012C:  CLRF   xAA
012E:  BTFSC  FD8.0
0130:  INCF   xAA,F
0132:  INCF   xAD,F
0134:  BTFSC  FD8.2
0136:  INCF   xAE,F
0138:  INCF   xAB,F
013A:  MOVF   xAB,W
013C:  SUBLW  05
013E:  BNZ   0100
0140:  RETURN 0
*
01D8:  MOVLW  8E
01DA:  MOVWF  00
01DC:  MOVFF  A4,01
01E0:  MOVFF  A3,02
01E4:  CLRF   03
01E6:  MOVF   01,F
01E8:  BNZ   01FC
01EA:  MOVFF  02,01
01EE:  CLRF   02
01F0:  MOVLW  08
01F2:  SUBWF  00,F
01F4:  MOVF   01,F
01F6:  BNZ   01FC
01F8:  CLRF   00
01FA:  BRA    020C
01FC:  BCF    FD8.0
01FE:  BTFSC  01.7
0200:  BRA    020A
0202:  RLCF   02,F
0204:  RLCF   01,F
0206:  DECF   00,F
0208:  BRA    01FC
020A:  BCF    01.7
020C:  GOTO   031A (RETURN)
0210:  MOVF   xA3,W
0212:  BTFSC  FD8.2
0214:  BRA    02F8
0216:  MOVWF  00
0218:  MOVF   xA7,W
021A:  BTFSC  FD8.2
021C:  BRA    02F8
021E:  ADDWF  00,F
0220:  BNC   022A
0222:  MOVLW  81
0224:  ADDWF  00,F
0226:  BC    02F8
0228:  BRA    0232
022A:  MOVLW  7F
022C:  SUBWF  00,F
022E:  BNC   02F8
0230:  BZ    02F8
0232:  MOVFF  A4,AB
0236:  MOVF   xA8,W
0238:  XORWF  xAB,F
023A:  BSF    xA4.7
023C:  BSF    xA8.7
023E:  MOVF   xA6,W
0240:  MULWF  xAA
0242:  MOVFF  FF4,AD
0246:  MOVF   xA5,W
0248:  MULWF  xA9
024A:  MOVFF  FF4,03
024E:  MOVFF  FF3,AC
0252:  MULWF  xAA
0254:  MOVF   FF3,W
0256:  ADDWF  xAD,F
0258:  MOVF   FF4,W
025A:  ADDWFC xAC,F
025C:  MOVLW  00
025E:  ADDWFC 03,F
0260:  MOVF   xA6,W
0262:  MULWF  xA9
0264:  MOVF   FF3,W
0266:  ADDWF  xAD,F
0268:  MOVF   FF4,W
026A:  ADDWFC xAC,F
026C:  MOVLW  00
026E:  CLRF   02
0270:  ADDWFC 03,F
0272:  ADDWFC 02,F
0274:  MOVF   xA4,W
0276:  MULWF  xAA
0278:  MOVF   FF3,W
027A:  ADDWF  xAC,F
027C:  MOVF   FF4,W
027E:  ADDWFC 03,F
0280:  MOVLW  00
0282:  ADDWFC 02,F
0284:  MOVF   xA4,W
0286:  MULWF  xA9
0288:  MOVF   FF3,W
028A:  ADDWF  03,F
028C:  MOVF   FF4,W
028E:  ADDWFC 02,F
0290:  MOVLW  00
0292:  CLRF   01
0294:  ADDWFC 01,F
0296:  MOVF   xA6,W
0298:  MULWF  xA8
029A:  MOVF   FF3,W
029C:  ADDWF  xAC,F
029E:  MOVF   FF4,W
02A0:  ADDWFC 03,F
02A2:  MOVLW  00
02A4:  ADDWFC 02,F
02A6:  ADDWFC 01,F
02A8:  MOVF   xA5,W
02AA:  MULWF  xA8
02AC:  MOVF   FF3,W
02AE:  ADDWF  03,F
02B0:  MOVF   FF4,W
02B2:  ADDWFC 02,F
02B4:  MOVLW  00
02B6:  ADDWFC 01,F
02B8:  MOVF   xA4,W
02BA:  MULWF  xA8
02BC:  MOVF   FF3,W
02BE:  ADDWF  02,F
02C0:  MOVF   FF4,W
02C2:  ADDWFC 01,F
02C4:  INCF   00,F
02C6:  BTFSC  01.7
02C8:  BRA    02D4
02CA:  RLCF   xAC,F
02CC:  RLCF   03,F
02CE:  RLCF   02,F
02D0:  RLCF   01,F
02D2:  DECF   00,F
02D4:  MOVLW  00
02D6:  BTFSS  xAC.7
02D8:  BRA    02EE
02DA:  INCF   03,F
02DC:  ADDWFC 02,F
02DE:  ADDWFC 01,F
02E0:  MOVF   01,W
02E2:  BNZ   02EE
02E4:  MOVF   02,W
02E6:  BNZ   02EE
02E8:  MOVF   03,W
02EA:  BNZ   02EE
02EC:  INCF   00,F
02EE:  BTFSC  xAB.7
02F0:  BSF    01.7
02F2:  BTFSS  xAB.7
02F4:  BCF    01.7
02F6:  BRA    0300
02F8:  CLRF   00
02FA:  CLRF   01
02FC:  CLRF   02
02FE:  CLRF   03
0300:  RETURN 0
*
0352:  DATA 0C,52
0354:  DATA 50,4D
0356:  DATA 20,3D
0358:  DATA 20,25
035A:  DATA 66,00
035C:  DATA 0A,45
035E:  DATA 52,50
0360:  DATA 4D,20
0362:  DATA 3D,20
0364:  DATA 25,66
0366:  DATA 00,00
*
0458:  MOVLW  B6
045A:  MOVWF  00
045C:  CLRF   03
045E:  CLRF   02
0460:  CLRF   01
0462:  MOVF   x8B,W
0464:  IORWF  x8C,W
0466:  IORWF  x8D,W
0468:  IORWF  x8E,W
046A:  BNZ   0470
046C:  CLRF   00
046E:  BRA    048A
0470:  BCF    FD8.0
0472:  BTFSC  01.7
0474:  BRA    0488
0476:  RLCF   x8B,F
0478:  RLCF   x8C,F
047A:  RLCF   x8D,F
047C:  RLCF   x8E,F
047E:  RLCF   03,F
0480:  RLCF   02,F
0482:  RLCF   01,F
0484:  DECFSZ 00,F
0486:  BRA    0470
0488:  BCF    01.7
048A:  GOTO   0C80 (RETURN)
048E:  MOVF   x87,W
0490:  BTFSC  FD8.2
0492:  BRA    05DE
0494:  MOVWF  x93
0496:  MOVF   x8B,W
0498:  BTFSC  FD8.2
049A:  BRA    05DE
049C:  SUBWF  x93,F
049E:  BNC   04AA
04A0:  MOVLW  7F
04A2:  ADDWF  x93,F
04A4:  BTFSC  FD8.0
04A6:  BRA    05DE
04A8:  BRA    04B6
04AA:  MOVLW  81
04AC:  SUBWF  x93,F
04AE:  BTFSS  FD8.0
04B0:  BRA    05DE
04B2:  BTFSC  FD8.2
04B4:  BRA    05DE
04B6:  MOVFF  93,00
04BA:  CLRF   01
04BC:  CLRF   02
04BE:  CLRF   03
04C0:  CLRF   x92
04C2:  MOVFF  88,91
04C6:  BSF    x91.7
04C8:  MOVFF  89,90
04CC:  MOVFF  8A,8F
04D0:  MOVLW  19
04D2:  MOVWF  x93
04D4:  MOVF   x8E,W
04D6:  SUBWF  x8F,F
04D8:  BC    04F4
04DA:  MOVLW  01
04DC:  SUBWF  x90,F
04DE:  BC    04F4
04E0:  SUBWF  x91,F
04E2:  BC    04F4
04E4:  SUBWF  x92,F
04E6:  BC    04F4
04E8:  INCF   x92,F
04EA:  INCF   x91,F
04EC:  INCF   x90,F
04EE:  MOVF   x8E,W
04F0:  ADDWF  x8F,F
04F2:  BRA    0544
04F4:  MOVF   x8D,W
04F6:  SUBWF  x90,F
04F8:  BC    051E
04FA:  MOVLW  01
04FC:  SUBWF  x91,F
04FE:  BC    051E
0500:  SUBWF  x92,F
0502:  BC    051E
0504:  INCF   x92,F
0506:  INCF   x91,F
0508:  MOVF   x8D,W
050A:  ADDWF  x90,F
050C:  MOVF   x8E,W
050E:  ADDWF  x8F,F
0510:  BNC   0544
0512:  INCF   x90,F
0514:  BNZ   0544
0516:  INCF   x91,F
0518:  BNZ   0544
051A:  INCF   x92,F
051C:  BRA    0544
051E:  MOVF   x8C,W
0520:  IORLW  80
0522:  SUBWF  x91,F
0524:  BC    0542
0526:  MOVLW  01
0528:  SUBWF  x92,F
052A:  BC    0542
052C:  INCF   x92,F
052E:  MOVF   x8C,W
0530:  IORLW  80
0532:  ADDWF  x91,F
0534:  MOVF   x8D,W
0536:  ADDWF  x90,F
0538:  BNC   050C
053A:  INCF   x91,F
053C:  BNZ   050C
053E:  INCF   x92,F
0540:  BRA    050C
0542:  BSF    03.0
0544:  DECFSZ x93,F
0546:  BRA    054A
0548:  BRA    0560
054A:  BCF    FD8.0
054C:  RLCF   x8F,F
054E:  RLCF   x90,F
0550:  RLCF   x91,F
0552:  RLCF   x92,F
0554:  BCF    FD8.0
0556:  RLCF   03,F
0558:  RLCF   02,F
055A:  RLCF   01,F
055C:  RLCF   x94,F
055E:  BRA    04D4
0560:  BTFSS  x94.0
0562:  BRA    0570
0564:  BCF    FD8.0
0566:  RRCF   01,F
0568:  RRCF   02,F
056A:  RRCF   03,F
056C:  RRCF   x94,F
056E:  BRA    0574
0570:  DECF   00,F
0572:  BZ    05DE
0574:  BTFSC  x94.7
0576:  BRA    05B4
0578:  BCF    FD8.0
057A:  RLCF   x8F,F
057C:  RLCF   x90,F
057E:  RLCF   x91,F
0580:  RLCF   x92,F
0582:  MOVF   x8E,W
0584:  SUBWF  x8F,F
0586:  BC    0596
0588:  MOVLW  01
058A:  SUBWF  x90,F
058C:  BC    0596
058E:  SUBWF  x91,F
0590:  BC    0596
0592:  SUBWF  x92,F
0594:  BNC   05CA
0596:  MOVF   x8D,W
0598:  SUBWF  x90,F
059A:  BC    05A6
059C:  MOVLW  01
059E:  SUBWF  x91,F
05A0:  BC    05A6
05A2:  SUBWF  x92,F
05A4:  BNC   05CA
05A6:  MOVF   x8C,W
05A8:  IORLW  80
05AA:  SUBWF  x91,F
05AC:  BC    05B4
05AE:  MOVLW  01
05B0:  SUBWF  x92,F
05B2:  BNC   05CA
05B4:  INCF   03,F
05B6:  BNZ   05CA
05B8:  INCF   02,F
05BA:  BNZ   05CA
05BC:  INCF   01,F
05BE:  BNZ   05CA
05C0:  INCF   00,F
05C2:  BZ    05DE
05C4:  RRCF   01,F
05C6:  RRCF   02,F
05C8:  RRCF   03,F
05CA:  MOVFF  88,93
05CE:  MOVF   x8C,W
05D0:  XORWF  x93,F
05D2:  BTFSS  x93.7
05D4:  BRA    05DA
05D6:  BSF    01.7
05D8:  BRA    05E6
05DA:  BCF    01.7
05DC:  BRA    05E6
05DE:  CLRF   00
05E0:  CLRF   01
05E2:  CLRF   02
05E4:  CLRF   03
05E6:  RETURN 0
*
064E:  TBLRD*+
0650:  MOVFF  FF6,88
0654:  MOVFF  FF7,89
0658:  MOVFF  FF5,94
065C:  RCALL  060C
065E:  MOVFF  88,FF6
0662:  MOVFF  89,FF7
0666:  DECFSZ x87,F
0668:  BRA    064E
066A:  RETURN 0
066C:  MOVF   x94,W
066E:  SUBLW  B6
0670:  MOVWF  x94
0672:  CLRF   03
0674:  MOVFF  95,98
0678:  BSF    x95.7
067A:  BCF    FD8.0
067C:  RRCF   x95,F
067E:  RRCF   x96,F
0680:  RRCF   x97,F
0682:  RRCF   03,F
0684:  RRCF   02,F
0686:  RRCF   01,F
0688:  RRCF   00,F
068A:  DECFSZ x94,F
068C:  BRA    067A
068E:  BTFSS  x98.7
0690:  BRA    06A8
0692:  COMF   00,F
0694:  COMF   01,F
0696:  COMF   02,F
0698:  COMF   03,F
069A:  INCF   00,F
069C:  BTFSC  FD8.2
069E:  INCF   01,F
06A0:  BTFSC  FD8.2
06A2:  INCF   02,F
06A4:  BTFSC  FD8.2
06A6:  INCF   03,F
06A8:  GOTO   0794 (RETURN)
06AC:  BTFSC  FD8.1
06AE:  BRA    06B6
06B0:  CLRF   FEA
06B2:  MOVLW  9C
06B4:  MOVWF  FE9
06B6:  CLRF   00
06B8:  CLRF   01
06BA:  CLRF   02
06BC:  CLRF   03
06BE:  CLRF   x9C
06C0:  CLRF   x9D
06C2:  CLRF   x9E
06C4:  CLRF   x9F
06C6:  MOVF   x9B,W
06C8:  IORWF  x9A,W
06CA:  IORWF  x99,W
06CC:  IORWF  x98,W
06CE:  BZ    0728
06D0:  MOVLW  20
06D2:  MOVWF  xA0
06D4:  BCF    FD8.0
06D6:  RLCF   x94,F
06D8:  RLCF   x95,F
06DA:  RLCF   x96,F
06DC:  RLCF   x97,F
06DE:  RLCF   x9C,F
06E0:  RLCF   x9D,F
06E2:  RLCF   x9E,F
06E4:  RLCF   x9F,F
06E6:  MOVF   x9B,W
06E8:  SUBWF  x9F,W
06EA:  BNZ   06FC
06EC:  MOVF   x9A,W
06EE:  SUBWF  x9E,W
06F0:  BNZ   06FC
06F2:  MOVF   x99,W
06F4:  SUBWF  x9D,W
06F6:  BNZ   06FC
06F8:  MOVF   x98,W
06FA:  SUBWF  x9C,W
06FC:  BNC   071C
06FE:  MOVF   x98,W
0700:  SUBWF  x9C,F
0702:  MOVF   x99,W
0704:  BTFSS  FD8.0
0706:  INCFSZ x99,W
0708:  SUBWF  x9D,F
070A:  MOVF   x9A,W
070C:  BTFSS  FD8.0
070E:  INCFSZ x9A,W
0710:  SUBWF  x9E,F
0712:  MOVF   x9B,W
0714:  BTFSS  FD8.0
0716:  INCFSZ x9B,W
0718:  SUBWF  x9F,F
071A:  BSF    FD8.0
071C:  RLCF   00,F
071E:  RLCF   01,F
0720:  RLCF   02,F
0722:  RLCF   03,F
0724:  DECFSZ xA0,F
0726:  BRA    06D4
0728:  MOVFF  9C,FEF
072C:  MOVFF  9D,FEC
0730:  MOVFF  9E,FEC
0734:  MOVFF  9F,FEC
0738:  RETURN 0
073A:  MOVF   FE9,W
073C:  MOVWF  x8C
073E:  MOVF   x8B,W
0740:  MOVWF  x8E
0742:  BZ    0782
0744:  CLRF   19
0746:  BTFSC  FF2.7
0748:  BSF    19.7
074A:  BCF    FF2.7
074C:  MOVFF  8A,A6
0750:  MOVFF  89,A5
0754:  MOVFF  88,A4
0758:  MOVFF  87,A3
075C:  CLRF   xAA
075E:  CLRF   xA9
0760:  MOVLW  20
0762:  MOVWF  xA8
0764:  MOVLW  82
0766:  MOVWF  xA7
0768:  RCALL  0210
076A:  BTFSC  19.7
076C:  BSF    FF2.7
076E:  MOVFF  03,8A
0772:  MOVFF  02,89
0776:  MOVFF  01,88
077A:  MOVFF  00,87
077E:  DECFSZ x8E,F
0780:  BRA    0744
0782:  MOVFF  8A,97
0786:  MOVFF  89,96
078A:  MOVFF  88,95
078E:  MOVFF  87,94
0792:  BRA    066C
0794:  MOVFF  03,8A
0798:  MOVFF  02,89
079C:  MOVFF  01,88
07A0:  MOVFF  00,87
07A4:  BTFSS  x8A.7
07A6:  BRA    07C2
07A8:  DECF   x8C,F
07AA:  BSF    x8C.5
07AC:  COMF   x87,F
07AE:  COMF   x88,F
07B0:  COMF   x89,F
07B2:  COMF   x8A,F
07B4:  INCF   x87,F
07B6:  BTFSC  FD8.2
07B8:  INCF   x88,F
07BA:  BTFSC  FD8.2
07BC:  INCF   x89,F
07BE:  BTFSC  FD8.2
07C0:  INCF   x8A,F
07C2:  MOVLW  3B
07C4:  MOVWF  x93
07C6:  MOVLW  9A
07C8:  MOVWF  x92
07CA:  MOVLW  CA
07CC:  MOVWF  x91
07CE:  CLRF   x90
07D0:  MOVLW  0A
07D2:  MOVWF  x8E
07D4:  MOVF   x8B,W
07D6:  BTFSC  FD8.2
07D8:  INCF   x8C,F
07DA:  BSF    FD8.1
07DC:  CLRF   FEA
07DE:  MOVLW  87
07E0:  MOVWF  FE9
07E2:  MOVFF  8A,97
07E6:  MOVFF  89,96
07EA:  MOVFF  88,95
07EE:  MOVFF  87,94
07F2:  MOVFF  93,9B
07F6:  MOVFF  92,9A
07FA:  MOVFF  91,99
07FE:  MOVFF  90,98
0802:  RCALL  06AC
0804:  MOVF   01,W
0806:  MOVF   00,F
0808:  BNZ   0828
080A:  INCF   x8B,W
080C:  SUBWF  x8E,W
080E:  BZ    0828
0810:  MOVF   x8C,W
0812:  BZ    082C
0814:  ANDLW  0F
0816:  SUBWF  x8E,W
0818:  BZ    081C
081A:  BC    088A
081C:  BTFSC  x8C.7
081E:  BRA    088A
0820:  BTFSC  x8C.6
0822:  BRA    082C
0824:  MOVLW  20
0826:  BRA    0882
0828:  MOVLW  20
082A:  ANDWF  x8C,F
082C:  BTFSS  x8C.5
082E:  BRA    0848
0830:  BCF    x8C.5
0832:  MOVF   x8B,W
0834:  BTFSS  FD8.2
0836:  DECF   x8C,F
0838:  MOVF   00,W
083A:  MOVWF  x8C
083C:  MOVLW  2D
083E:  MOVWF  x94
0840:  RCALL  060C
0842:  MOVF   x8C,W
0844:  MOVWF  00
0846:  CLRF   x8C
0848:  MOVF   x8B,W
084A:  SUBWF  x8E,W
084C:  BNZ   0862
084E:  MOVF   00,W
0850:  MOVWF  x8C
0852:  MOVLW  2E
0854:  MOVWF  x94
0856:  RCALL  060C
0858:  MOVF   x8C,W
085A:  MOVWF  00
085C:  MOVLW  20
085E:  ANDWF  x8C,F
0860:  MOVLW  00
0862:  MOVLW  30
0864:  BTFSS  x8C.5
0866:  BRA    0882
0868:  BCF    x8C.5
086A:  MOVF   x8B,W
086C:  BTFSS  FD8.2
086E:  DECF   x8C,F
0870:  MOVF   00,W
0872:  MOVWF  x8C
0874:  MOVLW  2D
0876:  MOVWF  x94
0878:  RCALL  060C
087A:  MOVF   x8C,W
087C:  MOVWF  00
087E:  CLRF   x8C
0880:  MOVLW  30
0882:  ADDWF  00,F
0884:  MOVFF  00,94
0888:  RCALL  060C
088A:  BCF    FD8.1
088C:  MOVFF  93,97
0890:  MOVFF  92,96
0894:  MOVFF  91,95
0898:  MOVFF  90,94
089C:  CLRF   x9B
089E:  CLRF   x9A
08A0:  CLRF   x99
08A2:  MOVLW  0A
08A4:  MOVWF  x98
08A6:  RCALL  06AC
08A8:  MOVFF  03,93
08AC:  MOVFF  02,92
08B0:  MOVFF  01,91
08B4:  MOVFF  00,90
08B8:  DECFSZ x8E,F
08BA:  BRA    07DA
08BC:  RETURN 0
08BE:  MOVLW  8E
08C0:  MOVWF  00
08C2:  MOVF   x89,W
08C4:  SUBWF  00,F
08C6:  MOVFF  8A,02
08CA:  MOVFF  8B,01
08CE:  BSF    02.7
08D0:  MOVF   00,F
08D2:  BZ    08E6
08D4:  BCF    FD8.0
08D6:  MOVF   02,F
08D8:  BNZ   08DE
08DA:  MOVF   01,F
08DC:  BZ    08E6
08DE:  RRCF   02,F
08E0:  RRCF   01,F
08E2:  DECFSZ 00,F
08E4:  BRA    08D4
08E6:  BTFSS  x8A.7
08E8:  BRA    08F4
08EA:  COMF   01,F
08EC:  COMF   02,F
08EE:  INCF   01,F
08F0:  BTFSC  FD8.2
08F2:  INCF   02,F
08F4:  GOTO   0DC2 (RETURN)
08F8:  MOVFF  88,8F
08FC:  MOVF   x8C,W
08FE:  XORWF  x8F,F
0900:  BTFSS  x8F.7
0902:  BRA    090E
0904:  BCF    FD8.2
0906:  BCF    FD8.0
0908:  BTFSC  x88.7
090A:  BSF    FD8.0
090C:  BRA    096C
090E:  MOVFF  88,8F
0912:  MOVFF  8B,90
0916:  MOVF   x87,W
0918:  SUBWF  x90,F
091A:  BZ    0928
091C:  BTFSS  x8F.7
091E:  BRA    096C
0920:  MOVF   FD8,W
0922:  XORLW  01
0924:  MOVWF  FD8
0926:  BRA    096C
0928:  MOVFF  8C,90
092C:  MOVF   x88,W
092E:  SUBWF  x90,F
0930:  BZ    093E
0932:  BTFSS  x8F.7
0934:  BRA    096C
0936:  MOVF   FD8,W
0938:  XORLW  01
093A:  MOVWF  FD8
093C:  BRA    096C
093E:  MOVFF  8D,90
0942:  MOVF   x89,W
0944:  SUBWF  x90,F
0946:  BZ    0954
0948:  BTFSS  x8F.7
094A:  BRA    096C
094C:  MOVF   FD8,W
094E:  XORLW  01
0950:  MOVWF  FD8
0952:  BRA    096C
0954:  MOVFF  8E,90
0958:  MOVF   x8A,W
095A:  SUBWF  x90,F
095C:  BZ    096A
095E:  BTFSS  x8F.7
0960:  BRA    096C
0962:  MOVF   FD8,W
0964:  XORLW  01
0966:  MOVWF  FD8
0968:  BRA    096C
096A:  BCF    FD8.0
096C:  RETURN 0
....................  
.................... #list 
....................  
.................... #use delay (clock = 20000000) 
*
0368:  CLRF   FEA
036A:  MOVLW  95
036C:  MOVWF  FE9
036E:  MOVF   FEF,W
0370:  BZ    038C
0372:  MOVLW  06
0374:  MOVWF  01
0376:  CLRF   00
0378:  DECFSZ 00,F
037A:  BRA    0378
037C:  DECFSZ 01,F
037E:  BRA    0376
0380:  MOVLW  7B
0382:  MOVWF  00
0384:  DECFSZ 00,F
0386:  BRA    0384
0388:  DECFSZ FEF,F
038A:  BRA    0372
038C:  RETURN 0
.................... #fuses HS, NOWDT, NOLVP 
.................... #include "../Library/myLibrary.h" 
.................... // A library for the PIC18F4520 
....................  
.................... int *TRISA = 0xF92; // Connect to TRISx 
.................... int *TRISB = 0xF93; 
.................... int *TRISC = 0xF94; 
.................... int *TRISD = 0xF95; 
.................... int *TRISE = 0xF96; 
....................  
.................... int *LATA = 0xF89;  // Connect to LATx 
.................... int *LATB = 0xF8A; 
.................... int *LATC = 0xF8B; 
.................... int *LATD = 0xF8C; 
.................... int *LATE = 0xF8D; 
....................  
.................... int *PORTA = 0xF80; // Connect to LATx 
.................... int *PORTB = 0xF81; 
.................... int *PORTC = 0xF82; 
.................... int *PORTD = 0xF83; 
.................... int *PORTE = 0xF84; 
....................  
.................... struct _adcon0 { 
....................    int ADON:1; 
....................    int GODONE:1; 
....................    int CHSx:4; 
....................    int unused:2; 
.................... }; 
.................... struct _adcon0 *ADCON0 = 0xFC2; 
....................  
.................... struct _adcon1 {   // Analog vs digital 
....................    int PCFGx:4; 
....................    int VCFG0:1; 
....................    int VCFG1:1; 
....................    int unused:2; 
.................... }; 
.................... struct _adcon1 *ADCON1 = 0xFC1; 
....................  
.................... struct _adcon2 { 
....................    int ADCSx:3; 
....................    int ACQTx:3; 
....................    int unused:1; 
....................    int ADFM:1; 
.................... }; 
.................... struct _adcon2 *ADCON2 = 0xFC0; 
....................  
.................... int16 *Q = 0xFC3; 
.................... int *ADRESH = 0xFC4; 
.................... int *ADRESL = 0xFC3; 
....................  
.................... struct _intcon { 
....................    int RBIF:1; 
....................    int INT0IF:1; 
....................    int TMR0IF:1; 
....................    int RBIE:1; 
....................    int INT0IE:1; 
....................    int TMR0IE:1; 
....................    int PEIE:1; 
....................    int GIE:1; 
.................... }; 
.................... struct _intcon *INTCON = 0xFF2; 
....................  
.................... struct _intcon3 { 
....................    int INT1IF:1; 
....................    int INT2IF:1; 
....................    int unused:1; 
....................    int INT1IE:1; 
....................    int INT2IE:1; 
....................    int notused:1; 
....................    int INT1IP:1; 
....................    int INT2IP:1; 
.................... }; 
.................... struct _intcon3 *INTCON3 = 0xFF0; 
....................  
.................... struct _intcon2 {  // Interrupts 
....................    int RBIP:1; 
....................    int unused:1; 
....................    int TMR0IP:1; 
....................    int notused:1; 
....................    int INTEDG2:1; 
....................    int INTEDG1:1; 
....................    int INTEDG0:1; 
....................    int RBPU:1; 
.................... }; 
.................... struct _intcon2 *INTCON2 = 0xFF1; 
....................  
.................... struct _pie1 { 
....................    int TMR1IE:1; 
....................    int TMR2IE:1; 
....................    int CCP1IE:1; 
....................    int SSPIE:1; 
....................    int TXIE:1; 
....................    int RCIE:1; 
....................    int ADIE:1; 
....................    int PSPIE:1; 
.................... }; 
.................... struct _pie1 *PIE1 = 0xF9D; 
....................  
.................... struct _pie2 { 
....................    int CCP2IE:1; 
....................    int TMR3IE:1; 
....................    int HLVDIE:1; 
....................    int BCLIE:1; 
....................    int EEIE:1; 
....................    int skip:1; 
....................    int CMIE:1; 
....................    int OSCFIE:1; 
.................... }; 
.................... struct _pie2 *PIE2 = 0xFA0; 
....................  
.................... struct _t1con { 
....................    int TMR1ON:1; 
....................    int TMR1CS:1; 
....................    int T1SYNC:1; 
....................    int T1OSCEN:1; 
....................    int T1CKPSx:2; 
....................    int T1RUN: 1; 
....................    int RD16:1; 
.................... }; 
.................... struct _t1con *T1CON = 0xFCD; 
....................  
.................... struct _t2con { 
....................    int T2CKPSx:2; 
....................    int TMR2ON:1; 
....................    int T2OUTPSx:4; 
....................    int unused:1; 
.................... }; 
.................... struct _t2con *T2CON = 0xFCA; 
....................  
.................... struct _ccpxcon { 
....................    int CCPxMx:4; 
....................    int DCxBx:2; 
....................    int unused:2; 
.................... }; 
.................... struct _ccpxcon *CCP1CON = 0xFBD; 
.................... struct _ccpxcon *CCP2CON = 0xFBA; 
....................  
.................... int16 *CCPR1 = 0xFBE; 
.................... int *CCPR1L = 0xFBE; 
.................... int16 *CCPR2 = 0xFBB; 
.................... int *CCPR2L = 0xFBB; 
.................... int *PR2 = 0xFCB; 
....................  
.................... struct _eccplas { 
....................    int PSSBD:2; 
....................    int PSSAC:2; 
....................    int ECCPAS:3; 
....................    int ECCPASE:1; 
.................... }; 
.................... struct _eccplas *ECCP1AS = 0xFB6; 
....................  
.................... // USART 
.................... struct _txsta{ 
....................    int TX9D:1; 
....................    int TRMT:1; 
....................    int BRGH:1; 
....................    int SENDB:1; 
....................    int SYNC:1; 
....................    int TXEN:1; 
....................    int TX9:1; 
....................    int CSRC:1; 
.................... }; 
.................... struct _txsta *TXSTA = 0xFAC; 
....................  
.................... struct _rcsta{ 
....................    int RX9D:1; 
....................    int OERR:1; 
....................    int FERR:1; 
....................    int ADDEN:1; 
....................    int CREN:1; 
....................    int SREN:1; 
....................    int RX9:1; 
....................    int SPEN:1; 
.................... }; 
.................... struct _rcsta *RCSTA = 0xFAB; 
....................  
.................... struct _baudcon{ 
....................    int ABDEN:1; 
....................    int WUE:1; 
....................    int unused:1; 
....................    int BRG16:1; 
....................    int TXCKP:1; 
....................    int RXDTP:1; 
....................    int RCIDL:1; 
....................    int ABDOVF:1; 
.................... }; 
.................... struct _baudcon *BAUDCON = 0xFB8; 
....................  
.................... int *SPBRG = 0xFAF;  // Speed Control 
.................... int *TXREG = 0xFAD; 
.................... int *RCREG = 0xFAE; 
....................  
....................  
.................... #include "../Library/modifiedlcd.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             Modified LCD.C                        //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////         ***This function was modified to fit the Samsumgs6A0069   //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_lcd FALSE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         }lcd; 
.................... //struct lcd_pin_map *lcd = 0xF83; 
....................  
.................... //#if defined(__PCH__) 
.................... //#if defined use_portb_lcd 
.................... //   #byte lcd = 0xF81                   // This puts the entire structure 
.................... //#else 
....................    #byte lcd = 0xF83                   // This puts the entire structure 
.................... //#endif 
.................... //#else 
.................... //#if defined use_portb_lcd 
.................... //   #byte lcd = 6                  // on to port B (at address 6)                ???????? 
.................... //#else 
.................... //   #byte lcd = 8                 // on to port D (at address 8) 
.................... //#endif 
.................... //#endif 
....................  
.................... //#if defined use_portb_lcd 
.................... //   #define set_tris_lcd(x) set_tris_b(x) 
.................... //#else 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... //#endif 
....................  
....................  
.................... #define lcd_type 3           // 0=5x7, 1=5x10, 2=2 lines, 3=2 lines Disp ON 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line             ????????? 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0x0f, 0x01, 0x06}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0x0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,0xF}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
03AC:  MOVLW  F0
03AE:  MOVWF  F95
....................       lcd.rw = 1; 
03B0:  BSF    F83.2
....................       delay_cycles(1); 
03B2:  NOP   
....................       lcd.enable = 1; 
03B4:  BSF    F83.0
....................       delay_cycles(1); 
03B6:  NOP   
....................       high = lcd.data; 
03B8:  SWAPF  F83,W
03BA:  ANDLW  0F
03BC:  MOVWF  x9C
....................       lcd.enable = 0; 
03BE:  BCF    F83.0
....................       delay_cycles(1); 
03C0:  NOP   
....................       lcd.enable = 1; 
03C2:  BSF    F83.0
....................       delay_us(1); 
03C4:  BRA    03C6
03C6:  BRA    03C8
03C8:  NOP   
....................       low = lcd.data; 
03CA:  SWAPF  F83,W
03CC:  ANDLW  0F
03CE:  MOVWF  x9B
....................       lcd.enable = 0; 
03D0:  BCF    F83.0
....................       set_tris_lcd(LCD_WRITE); 
03D2:  MOVLW  00
03D4:  MOVWF  F95
....................       return( (high<<4) | low); 
03D6:  SWAPF  x9C,W
03D8:  MOVWF  00
03DA:  MOVLW  F0
03DC:  ANDWF  00,F
03DE:  MOVF   00,W
03E0:  IORWF  x9B,W
03E2:  MOVWF  01
03E4:  GOTO   03EC (RETURN)
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
038E:  SWAPF  x9C,W
0390:  ANDLW  F0
0392:  MOVWF  00
0394:  MOVLW  0F
0396:  ANDWF  F83,W
0398:  IORWF  00,W
039A:  MOVWF  F83
....................       delay_cycles(1); 
039C:  NOP   
....................       lcd.enable = 1; 
039E:  BSF    F83.0
....................       delay_us(2); 
03A0:  MOVLW  03
03A2:  MOVWF  00
03A4:  DECFSZ 00,F
03A6:  BRA    03A4
....................       lcd.enable = 0; 
03A8:  BCF    F83.0
03AA:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
03E8:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
03EA:  BRA    03AC
03EC:  MOVFF  01,9B
03F0:  BTFSC  01.7
03F2:  BRA    03EA
....................       lcd.rs = address; 
03F4:  BTFSS  x99.0
03F6:  BCF    F83.1
03F8:  BTFSC  x99.0
03FA:  BSF    F83.1
....................       delay_cycles(1); 
03FC:  NOP   
....................       lcd.rw = 0; 
03FE:  BCF    F83.2
....................       delay_cycles(1); 
0400:  NOP   
....................       lcd.enable = 0; 
0402:  BCF    F83.0
....................       lcd_send_nibble(n >> 4); 
0404:  SWAPF  x9A,W
0406:  MOVWF  x9B
0408:  MOVLW  0F
040A:  ANDWF  x9B,F
040C:  MOVFF  9B,9C
0410:  RCALL  038E
....................       lcd_send_nibble(n & 0xf); 
0412:  MOVF   x9A,W
0414:  ANDLW  0F
0416:  MOVWF  x9B
0418:  MOVWF  x9C
041A:  RCALL  038E
041C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
041E:  MOVLW  00
0420:  MOVWF  F95
....................     delay_ms(45);                                      // modified 
0422:  MOVLW  2D
0424:  MOVWF  x95
0426:  RCALL  0368
....................     lcd.rs = 0; 
0428:  BCF    F83.1
....................     lcd.rw = 0; 
042A:  BCF    F83.2
....................     lcd.enable = 0; 
042C:  BCF    F83.0
....................     //delay_ms(15);                                    // modified 
....................     //for(i=1;i<=3;++i) {                              // modified 
....................     //   lcd_send_nibble(3);                           // modified 
....................     //   delay_ms(5);                                  // modified 
....................     //}                                                // modified 
....................     lcd_send_nibble(2); 
042E:  MOVLW  02
0430:  MOVWF  x9C
0432:  RCALL  038E
....................     for(i=0;i<=3;++i) 
0434:  CLRF   x87
0436:  MOVF   x87,W
0438:  SUBLW  03
043A:  BNC   0454
....................        {                                                // modified 
....................           lcd_send_byte(0,LCD_INIT_STRING[i]); 
043C:  CLRF   03
043E:  MOVF   x87,W
0440:  RCALL  00D2
0442:  MOVWF  x88
0444:  CLRF   x99
0446:  MOVWF  x9A
0448:  RCALL  03E8
....................           delay_ms(5);                                  // modified 
044A:  MOVLW  05
044C:  MOVWF  x95
044E:  RCALL  0368
0450:  INCF   x87,F
0452:  BRA    0436
....................        }                                                // modified 
0454:  GOTO   0AEC (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
05E8:  DECFSZ x96,W
05EA:  BRA    05EE
05EC:  BRA    05F4
....................      address=lcd_line_two; 
05EE:  MOVLW  40
05F0:  MOVWF  x97
05F2:  BRA    05F6
....................    else 
....................      address=0; 
05F4:  CLRF   x97
....................    address+=x-1; 
05F6:  MOVLW  01
05F8:  SUBWF  x95,W
05FA:  ADDWF  x97,F
....................    lcd_send_byte(0,0x80|address); 
05FC:  MOVF   x97,W
05FE:  IORLW  80
0600:  MOVWF  x98
0602:  CLRF   x99
0604:  MOVWF  x9A
0606:  RCALL  03E8
0608:  GOTO   064C (RETURN)
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
060C:  MOVF   x94,W
060E:  XORLW  0C
0610:  BZ    061C
0612:  XORLW  06
0614:  BZ    062C
0616:  XORLW  02
0618:  BZ    0638
061A:  BRA    0642
....................      case '\f'   : lcd_send_byte(0,1); 
061C:  CLRF   x99
061E:  MOVLW  01
0620:  MOVWF  x9A
0622:  RCALL  03E8
....................                    delay_ms(2); 
0624:  MOVLW  02
0626:  MOVWF  x95
0628:  RCALL  0368
....................                                            break; 
062A:  BRA    064C
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
062C:  MOVLW  01
062E:  MOVWF  x95
0630:  MOVLW  02
0632:  MOVWF  x96
0634:  BRA    05E8
0636:  BRA    064C
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0638:  CLRF   x99
063A:  MOVLW  10
063C:  MOVWF  x9A
063E:  RCALL  03E8
0640:  BRA    064C
....................      default     : lcd_send_byte(1,c);     break; 
0642:  MOVLW  01
0644:  MOVWF  x99
0646:  MOVFF  94,9A
064A:  RCALL  03E8
....................    } 
064C:  RETURN 0
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... // Global variables 
.................... float vin = 0.0; 
.................... float t1c = 4 * 1 / 20000000.0; 
.................... float realRPM, expectedRPM; 
.................... unsigned int x = 0; 
.................... unsigned int16 tstop, tstart; 
.................... unsigned int32 telapsed; 
....................  
.................... // Timer for capture 
.................... #INT_TIMER1 
.................... void int_timer1_isr() { 
....................    x++; 
*
00E6:  INCF   7E,F
.................... } 
....................  
.................... // Capture ISR (CCP2 on C1) 
00E8:  BCF    F9E.0
00EA:  GOTO   0084
.................... #INT_CCP2 
.................... void int_ccp2_isr() { 
....................    tstop = *CCPR2; 
*
0142:  MOVFF  5A,FE9
0146:  MOVFF  5B,FEA
014A:  MOVFF  FEC,80
014E:  MOVF   FED,F
0150:  MOVFF  FEF,7F
....................    telapsed = x * 0x10000 -tstart + tstop; 
0154:  CLRF   xA4
0156:  CLRF   xA3
0158:  CLRF   xA2
015A:  MOVFF  7E,A1
015E:  CLRF   xA8
0160:  MOVLW  01
0162:  MOVWF  xA7
0164:  CLRF   xA6
0166:  CLRF   xA5
0168:  RCALL  00EE
016A:  MOVFF  03,A4
016E:  MOVFF  02,A3
0172:  MOVFF  01,A2
0176:  MOVFF  00,A1
017A:  MOVF   x81,W
017C:  SUBWF  xA1,F
017E:  MOVF   x82,W
0180:  SUBWFB xA2,F
0182:  MOVLW  00
0184:  SUBWFB xA3,F
0186:  SUBWFB xA4,F
0188:  MOVF   7F,W
018A:  ADDWF  xA1,W
018C:  MOVWF  x83
018E:  MOVF   x80,W
0190:  ADDWFC xA2,W
0192:  MOVWF  x84
0194:  MOVLW  00
0196:  ADDWFC xA3,W
0198:  MOVWF  x85
019A:  MOVLW  00
019C:  ADDWFC xA4,W
019E:  MOVWF  x86
....................    x = 0; 
01A0:  CLRF   7E
....................    tstart = tstop; 
01A2:  MOVFF  80,82
01A6:  MOVFF  7F,81
.................... } 
....................  
.................... // Stop button ISR (B0) 
01AA:  BCF    FA1.0
01AC:  GOTO   0084
.................... #INT_EXT 
.................... void int_ext0_isr() { 
....................    *TRISC ^= 0x04;    // Toggle C2 as input or output to stop PWM 
01B0:  MOVFF  1E,FE9
01B4:  MOVFF  1F,FEA
01B8:  MOVF   FEF,W
01BA:  XORLW  04
01BC:  MOVWF  FEF
....................    telapsed = 0;      // Conditions for starting back up... 
01BE:  CLRF   x86
01C0:  CLRF   x85
01C2:  CLRF   x84
01C4:  CLRF   x83
....................    *CCPR1L = 50; 
01C6:  MOVFF  58,FE9
01CA:  MOVFF  59,FEA
01CE:  MOVLW  32
01D0:  MOVWF  FEF
.................... } 
....................  
.................... // POT ISR (A to D) (A0) 
01D2:  BCF    FF2.1
01D4:  GOTO   0084
.................... #INT_AD 
.................... void int_ad_isr() { 
....................    vin = *Q * ( 5.0 / 1023.0 ); 
*
0302:  MOVFF  3F,03
0306:  MOVFF  3E,FE9
030A:  MOVFF  3F,FEA
030E:  MOVFF  FEC,A4
0312:  MOVF   FED,F
0314:  MOVFF  FEF,A3
0318:  BRA    01D8
031A:  MOVFF  03,A6
031E:  MOVFF  02,A5
0322:  MOVFF  01,A4
0326:  MOVFF  00,A3
032A:  MOVLW  0A
032C:  MOVWF  xAA
032E:  MOVLW  28
0330:  MOVWF  xA9
0332:  MOVLW  20
0334:  MOVWF  xA8
0336:  MOVLW  77
0338:  MOVWF  xA7
033A:  RCALL  0210
033C:  MOVFF  03,71
0340:  MOVFF  02,70
0344:  MOVFF  01,6F
0348:  MOVFF  00,6E
034C:  BCF    F9E.6
034E:  GOTO   0084
.................... } 
....................  
.................... main() { 
*
096E:  CLRF   FF8
0970:  BCF    FD0.7
0972:  BSF    07.7
0974:  MOVLW  0F
0976:  MOVWF  1B
0978:  MOVLW  92
097A:  MOVWF  1A
097C:  MOVLW  0F
097E:  MOVWF  1D
0980:  MOVLW  93
0982:  MOVWF  1C
0984:  MOVLW  0F
0986:  MOVWF  1F
0988:  MOVLW  94
098A:  MOVWF  1E
098C:  MOVLW  0F
098E:  MOVWF  21
0990:  MOVLW  95
0992:  MOVWF  20
0994:  MOVLW  0F
0996:  MOVWF  23
0998:  MOVLW  96
099A:  MOVWF  22
099C:  MOVLW  0F
099E:  MOVWF  25
09A0:  MOVLW  89
09A2:  MOVWF  24
09A4:  MOVLW  0F
09A6:  MOVWF  27
09A8:  MOVLW  8A
09AA:  MOVWF  26
09AC:  MOVLW  0F
09AE:  MOVWF  29
09B0:  MOVLW  8B
09B2:  MOVWF  28
09B4:  MOVLW  0F
09B6:  MOVWF  2B
09B8:  MOVLW  8C
09BA:  MOVWF  2A
09BC:  MOVLW  0F
09BE:  MOVWF  2D
09C0:  MOVLW  8D
09C2:  MOVWF  2C
09C4:  MOVLW  0F
09C6:  MOVWF  2F
09C8:  MOVLW  80
09CA:  MOVWF  2E
09CC:  MOVLW  0F
09CE:  MOVWF  31
09D0:  MOVLW  81
09D2:  MOVWF  30
09D4:  MOVLW  0F
09D6:  MOVWF  33
09D8:  MOVLW  82
09DA:  MOVWF  32
09DC:  MOVLW  0F
09DE:  MOVWF  35
09E0:  MOVLW  83
09E2:  MOVWF  34
09E4:  MOVLW  0F
09E6:  MOVWF  37
09E8:  MOVLW  84
09EA:  MOVWF  36
09EC:  MOVLW  0F
09EE:  MOVWF  39
09F0:  MOVLW  C2
09F2:  MOVWF  38
09F4:  MOVLW  0F
09F6:  MOVWF  3B
09F8:  MOVLW  C1
09FA:  MOVWF  3A
09FC:  MOVLW  0F
09FE:  MOVWF  3D
0A00:  MOVLW  C0
0A02:  MOVWF  3C
0A04:  MOVLW  0F
0A06:  MOVWF  3F
0A08:  MOVLW  C3
0A0A:  MOVWF  3E
0A0C:  MOVLW  0F
0A0E:  MOVWF  41
0A10:  MOVLW  C4
0A12:  MOVWF  40
0A14:  MOVLW  0F
0A16:  MOVWF  43
0A18:  MOVLW  C3
0A1A:  MOVWF  42
0A1C:  MOVLW  0F
0A1E:  MOVWF  45
0A20:  MOVLW  F2
0A22:  MOVWF  44
0A24:  MOVLW  0F
0A26:  MOVWF  47
0A28:  MOVLW  F0
0A2A:  MOVWF  46
0A2C:  MOVLW  0F
0A2E:  MOVWF  49
0A30:  MOVLW  F1
0A32:  MOVWF  48
0A34:  MOVLW  0F
0A36:  MOVWF  4B
0A38:  MOVLW  9D
0A3A:  MOVWF  4A
0A3C:  MOVLW  0F
0A3E:  MOVWF  4D
0A40:  MOVLW  A0
0A42:  MOVWF  4C
0A44:  MOVLW  0F
0A46:  MOVWF  4F
0A48:  MOVLW  CD
0A4A:  MOVWF  4E
0A4C:  MOVLW  0F
0A4E:  MOVWF  51
0A50:  MOVLW  CA
0A52:  MOVWF  50
0A54:  MOVLW  0F
0A56:  MOVWF  53
0A58:  MOVLW  BD
0A5A:  MOVWF  52
0A5C:  MOVLW  0F
0A5E:  MOVWF  55
0A60:  MOVLW  BA
0A62:  MOVWF  54
0A64:  MOVLW  0F
0A66:  MOVWF  57
0A68:  MOVLW  BE
0A6A:  MOVWF  56
0A6C:  MOVLW  0F
0A6E:  MOVWF  59
0A70:  MOVLW  BE
0A72:  MOVWF  58
0A74:  MOVLW  0F
0A76:  MOVWF  5B
0A78:  MOVLW  BB
0A7A:  MOVWF  5A
0A7C:  MOVLW  0F
0A7E:  MOVWF  5D
0A80:  MOVLW  BB
0A82:  MOVWF  5C
0A84:  MOVLW  0F
0A86:  MOVWF  5F
0A88:  MOVLW  CB
0A8A:  MOVWF  5E
0A8C:  MOVLW  0F
0A8E:  MOVWF  61
0A90:  MOVLW  B6
0A92:  MOVWF  60
0A94:  MOVLW  0F
0A96:  MOVWF  63
0A98:  MOVLW  AC
0A9A:  MOVWF  62
0A9C:  MOVLW  0F
0A9E:  MOVWF  65
0AA0:  MOVLW  AB
0AA2:  MOVWF  64
0AA4:  MOVLW  0F
0AA6:  MOVWF  67
0AA8:  MOVLW  B8
0AAA:  MOVWF  66
0AAC:  MOVLW  0F
0AAE:  MOVWF  69
0AB0:  MOVLW  AF
0AB2:  MOVWF  68
0AB4:  MOVLW  0F
0AB6:  MOVWF  6B
0AB8:  MOVLW  AD
0ABA:  MOVWF  6A
0ABC:  MOVLW  0F
0ABE:  MOVWF  6D
0AC0:  MOVLW  AE
0AC2:  MOVWF  6C
0AC4:  CLRF   71
0AC6:  CLRF   70
0AC8:  CLRF   6F
0ACA:  CLRF   6E
0ACC:  MOVLW  95
0ACE:  MOVWF  75
0AD0:  MOVLW  BF
0AD2:  MOVWF  74
0AD4:  MOVLW  56
0AD6:  MOVWF  73
0AD8:  MOVLW  68
0ADA:  MOVWF  72
0ADC:  CLRF   7E
0ADE:  MOVF   FC1,W
0AE0:  ANDLW  C0
0AE2:  IORLW  0F
0AE4:  MOVWF  FC1
0AE6:  MOVLW  07
0AE8:  MOVWF  FB4
....................     
....................    // Initialize LCD 
....................    lcd_init(); 
0AEA:  BRA    041E
....................     
....................    // Setup capture for CCP2 (C1) 
....................    *TRISC = 0x2;             // C1 is input 
0AEC:  MOVFF  1E,FE9
0AF0:  MOVFF  1F,FEA
0AF4:  MOVLW  02
0AF6:  MOVWF  FEF
....................    CCP2CON -> CCPxMx = 0x4;  // Capture every falling edge 
0AF8:  MOVFF  54,FE9
0AFC:  MOVFF  55,FEA
0B00:  MOVLW  F0
0B02:  ANDWF  FEF,W
0B04:  IORLW  04
0B06:  MOVWF  FEF
....................    PIE2 -> CCP2IE = 1;       // CCP2 interrupt is ON 
0B08:  MOVFF  4C,FE9
0B0C:  MOVFF  4D,FEA
0B10:  BSF    FEF.0
....................     
....................    // Setup timer1 
....................    T1CON -> TMR1ON = 1;      // Timer1 is ON 
0B12:  MOVFF  4E,FE9
0B16:  MOVFF  4F,FEA
0B1A:  BSF    FEF.0
....................    T1CON -> TMR1CS = 0;      // Fosc / 4 
0B1C:  MOVFF  4E,FE9
0B20:  MOVFF  4F,FEA
0B24:  BCF    FEF.1
....................    T1CON -> T1CKPSx = 0;     // PS = 1; 
0B26:  MOVFF  4E,FE9
0B2A:  MOVFF  4F,FEA
0B2E:  MOVLW  CF
0B30:  ANDWF  FEF,W
0B32:  MOVWF  FEF
....................    PIE1 -> TMR1IE = 1;       // Timer1 overflow interrupt is ON 
0B34:  MOVFF  4A,FE9
0B38:  MOVFF  4B,FEA
0B3C:  BSF    FEF.0
....................     
....................    // Setup PWM 
....................    CCP1CON -> CCPxMx = 0xC; 
0B3E:  MOVFF  52,FE9
0B42:  MOVFF  53,FEA
0B46:  MOVLW  F0
0B48:  ANDWF  FEF,W
0B4A:  IORLW  0C
0B4C:  MOVWF  FEF
....................    *PR2 = 126; 
0B4E:  MOVFF  5E,FE9
0B52:  MOVFF  5F,FEA
0B56:  MOVLW  7E
0B58:  MOVWF  FEF
....................    *CCPR1L = 10; 
0B5A:  MOVFF  58,FE9
0B5E:  MOVFF  59,FEA
0B62:  MOVLW  0A
0B64:  MOVWF  FEF
....................    T2CON -> TMR2ON = 1; 
0B66:  MOVFF  50,FE9
0B6A:  MOVFF  51,FEA
0B6E:  BSF    FEF.2
....................     
....................    // Setup A to D (A0) 
....................    *TRISA = 0x01;            // CH0 Input 
0B70:  MOVFF  1A,FE9
0B74:  MOVFF  1B,FEA
0B78:  MOVLW  01
0B7A:  MOVWF  FEF
....................    // ADCON1 -> PCFGx setup in stop button 
....................    ADCON0 -> ADON = 1;       // A/D ON 
0B7C:  MOVFF  38,FE9
0B80:  MOVFF  39,FEA
0B84:  BSF    FEF.0
....................    ADCON0 -> CHSx = 0;       // Channel Selector 0 
0B86:  MOVFF  38,FE9
0B8A:  MOVFF  39,FEA
0B8E:  MOVLW  C3
0B90:  ANDWF  FEF,W
0B92:  MOVWF  FEF
....................    ADCON1 -> VCFG0 = 0;      // Max ref default 
0B94:  MOVFF  3A,FE9
0B98:  MOVFF  3B,FEA
0B9C:  BCF    FEF.4
....................    ADCON1 -> VCFG1 = 0;      // Min ref default 
0B9E:  MOVFF  3A,FE9
0BA2:  MOVFF  3B,FEA
0BA6:  BCF    FEF.5
....................    ADCON2 -> ADFM = 1;       // Right justify LCD 
0BA8:  MOVFF  3C,FE9
0BAC:  MOVFF  3D,FEA
0BB0:  BSF    FEF.7
....................    ADCON2 -> ACQTx = 5;      // 12 T AD 
0BB2:  MOVFF  3C,FE9
0BB6:  MOVFF  3D,FEA
0BBA:  MOVLW  C7
0BBC:  ANDWF  FEF,W
0BBE:  IORLW  28
0BC0:  MOVWF  FEF
....................    ADCON2 -> ADCSx = 5;      // Fosc / 16 
0BC2:  MOVFF  3C,FE9
0BC6:  MOVFF  3D,FEA
0BCA:  MOVLW  F8
0BCC:  ANDWF  FEF,W
0BCE:  IORLW  05
0BD0:  MOVWF  FEF
....................    PIE1 -> ADIE = 1; 
0BD2:  MOVFF  4A,FE9
0BD6:  MOVFF  4B,FEA
0BDA:  BSF    FEF.6
....................     
....................     
....................    // Setup stop button on B0 
....................    ADCON1 -> PCFGx = 0x0F;   // Digital 
0BDC:  MOVFF  3A,FE9
0BE0:  MOVFF  3B,FEA
0BE4:  MOVLW  F0
0BE6:  ANDWF  FEF,W
0BE8:  IORLW  0F
0BEA:  MOVWF  FEF
....................    *TRISB = 0x01;            // Pin B0 as input 
0BEC:  MOVFF  1C,FE9
0BF0:  MOVFF  1D,FEA
0BF4:  MOVLW  01
0BF6:  MOVWF  FEF
....................    INTCON2 -> INTEDG0 = 1;   // Rising edge 
0BF8:  MOVFF  48,FE9
0BFC:  MOVFF  49,FEA
0C00:  BSF    FEF.6
....................    INTCON -> INT0IE = 1;     // INT0 ON 
0C02:  MOVFF  44,FE9
0C06:  MOVFF  45,FEA
0C0A:  BSF    FEF.4
....................     
....................    // Global / peripheral enable 
....................    INTCON -> GIE = 1;        // Global 
0C0C:  MOVFF  44,FE9
0C10:  MOVFF  45,FEA
0C14:  BSF    FEF.7
....................    INTCON -> PEIE = 1;       // Peripheral 
0C16:  MOVFF  44,FE9
0C1A:  MOVFF  45,FEA
0C1E:  BSF    FEF.6
....................     
....................    while( 1 ) { 
....................     
....................       // POT trigger 
....................       ADCON0 -> GODONE = 1;  // Trigger 
0C20:  MOVFF  38,FE9
0C24:  MOVFF  39,FEA
0C28:  BSF    FEF.1
....................       delay_ms( 250 );       // pause 
0C2A:  MOVLW  FA
0C2C:  MOVWF  x95
0C2E:  CALL   0368
0C32:  CLRF   19
0C34:  BTFSC  FF2.7
0C36:  BSF    19.7
0C38:  BCF    FF2.7
....................        
....................       // Calculate RPMs 
....................       realRPM = 60 / ( 161 * telapsed * t1c ); 
0C3A:  CLRF   xA4
0C3C:  CLRF   xA3
0C3E:  CLRF   xA2
0C40:  MOVLW  A1
0C42:  MOVWF  xA1
0C44:  MOVFF  86,A8
0C48:  MOVFF  85,A7
0C4C:  MOVFF  84,A6
0C50:  MOVFF  83,A5
0C54:  CALL   00EE
0C58:  BTFSC  19.7
0C5A:  BSF    FF2.7
0C5C:  MOVFF  03,8A
0C60:  MOVFF  02,89
0C64:  MOVFF  01,88
0C68:  MOVFF  00,87
0C6C:  MOVFF  03,8E
0C70:  MOVFF  02,8D
0C74:  MOVFF  01,8C
0C78:  MOVFF  00,8B
0C7C:  GOTO   0458
0C80:  CLRF   19
0C82:  BTFSC  FF2.7
0C84:  BSF    19.7
0C86:  BCF    FF2.7
0C88:  MOVFF  03,A6
0C8C:  MOVFF  02,A5
0C90:  MOVFF  01,A4
0C94:  MOVFF  00,A3
0C98:  MOVFF  75,AA
0C9C:  MOVFF  74,A9
0CA0:  MOVFF  73,A8
0CA4:  MOVFF  72,A7
0CA8:  CALL   0210
0CAC:  BTFSC  19.7
0CAE:  BSF    FF2.7
0CB0:  CLRF   x8A
0CB2:  CLRF   x89
0CB4:  MOVLW  70
0CB6:  MOVWF  x88
0CB8:  MOVLW  84
0CBA:  MOVWF  x87
0CBC:  MOVFF  03,8E
0CC0:  MOVFF  02,8D
0CC4:  MOVFF  01,8C
0CC8:  MOVFF  00,8B
0CCC:  CALL   048E
0CD0:  MOVFF  03,79
0CD4:  MOVFF  02,78
0CD8:  MOVFF  01,77
0CDC:  MOVFF  00,76
....................       expectedRPM = ( vin / 5.0  ) * 126; 
0CE0:  MOVFF  71,8A
0CE4:  MOVFF  70,89
0CE8:  MOVFF  6F,88
0CEC:  MOVFF  6E,87
0CF0:  CLRF   x8E
0CF2:  CLRF   x8D
0CF4:  MOVLW  20
0CF6:  MOVWF  x8C
0CF8:  MOVLW  81
0CFA:  MOVWF  x8B
0CFC:  CALL   048E
0D00:  MOVFF  03,8A
0D04:  MOVFF  02,89
0D08:  MOVFF  01,88
0D0C:  MOVFF  00,87
0D10:  CLRF   19
0D12:  BTFSC  FF2.7
0D14:  BSF    19.7
0D16:  BCF    FF2.7
0D18:  MOVFF  03,A6
0D1C:  MOVFF  02,A5
0D20:  MOVFF  01,A4
0D24:  MOVFF  00,A3
0D28:  CLRF   xAA
0D2A:  CLRF   xA9
0D2C:  MOVLW  7C
0D2E:  MOVWF  xA8
0D30:  MOVLW  85
0D32:  MOVWF  xA7
0D34:  CALL   0210
0D38:  BTFSC  19.7
0D3A:  BSF    FF2.7
0D3C:  MOVFF  03,7D
0D40:  MOVFF  02,7C
0D44:  MOVFF  01,7B
0D48:  MOVFF  00,7A
....................        
....................       // Print VIN to LCD 
....................       printf(lcd_putc, "\fRPM = %f", realRPM); 
0D4C:  MOVLW  52
0D4E:  MOVWF  FF6
0D50:  MOVLW  03
0D52:  MOVWF  FF7
0D54:  MOVLW  07
0D56:  MOVWF  x87
0D58:  RCALL  064E
0D5A:  MOVLW  89
0D5C:  MOVWF  FE9
0D5E:  MOVFF  79,8A
0D62:  MOVFF  78,89
0D66:  MOVFF  77,88
0D6A:  MOVFF  76,87
0D6E:  MOVLW  02
0D70:  MOVWF  x8B
0D72:  RCALL  073A
....................       printf(lcd_putc,"\nERPM = %f", expectedRPM); 
0D74:  MOVLW  5C
0D76:  MOVWF  FF6
0D78:  MOVLW  03
0D7A:  MOVWF  FF7
0D7C:  MOVLW  08
0D7E:  MOVWF  x87
0D80:  RCALL  064E
0D82:  MOVLW  89
0D84:  MOVWF  FE9
0D86:  MOVFF  7D,8A
0D8A:  MOVFF  7C,89
0D8E:  MOVFF  7B,88
0D92:  MOVFF  7A,87
0D96:  MOVLW  02
0D98:  MOVWF  x8B
0D9A:  RCALL  073A
....................       delay_ms( 100 ); 
0D9C:  MOVLW  64
0D9E:  MOVWF  x95
0DA0:  CALL   0368
....................        
....................       // Connect pot to motor 
....................       *CCPR1L = expectedRPM; 
0DA4:  MOVFF  59,03
0DA8:  MOVFF  58,FE9
0DAC:  MOVFF  59,FEA
0DB0:  MOVFF  7D,8C
0DB4:  MOVFF  7C,8B
0DB8:  MOVFF  7B,8A
0DBC:  MOVFF  7A,89
0DC0:  BRA    08BE
0DC2:  MOVFF  01,FEF
....................        
....................       if ( realRPM > expectedRPM ) { 
0DC6:  MOVFF  7D,8A
0DCA:  MOVFF  7C,89
0DCE:  MOVFF  7B,88
0DD2:  MOVFF  7A,87
0DD6:  MOVFF  79,8E
0DDA:  MOVFF  78,8D
0DDE:  MOVFF  77,8C
0DE2:  MOVFF  76,8B
0DE6:  RCALL  08F8
0DE8:  BNC   0DF8
....................          *CCPR1L -= 1; 
0DEA:  MOVFF  58,FE9
0DEE:  MOVFF  59,FEA
0DF2:  MOVLW  01
0DF4:  SUBWF  FEF,W
0DF6:  MOVWF  FEF
....................       } 
....................       if ( expectedRPM > realRPM ) { 
0DF8:  MOVFF  79,8A
0DFC:  MOVFF  78,89
0E00:  MOVFF  77,88
0E04:  MOVFF  76,87
0E08:  MOVFF  7D,8E
0E0C:  MOVFF  7C,8D
0E10:  MOVFF  7B,8C
0E14:  MOVFF  7A,8B
0E18:  RCALL  08F8
0E1A:  BNC   0E2A
....................          *CCPR1L += 1; 
0E1C:  MOVFF  58,FE9
0E20:  MOVFF  59,FEA
0E24:  MOVLW  01
0E26:  ADDWF  FEF,W
0E28:  MOVWF  FEF
....................       } 
0E2A:  BRA    0C20
....................        
....................    } 
....................     
.................... } 
....................  
0E2C:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
