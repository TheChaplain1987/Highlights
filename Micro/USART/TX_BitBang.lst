CCS PCH C Compiler, Version 5.085, 47635               28-Nov-23 15:14

               Filename:   D:\Microcontrollers\USART\TX_BitBang.lst

               ROM used:   2608 bytes (8%)
                           Largest free fragment is 30156
               RAM used:   116 (8%) at main() level
                           168 (11%) worst case
               Stack used: 11 locations (5 in main + 6 for interrupts)
               Stack size: 31

*
0000:  GOTO   06E4
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.6
0056:  GOTO   0060
005A:  BTFSC  F9E.6
005C:  GOTO   05E2
0060:  BTFSS  F9D.5
0062:  GOTO   006C
0066:  BTFSC  F9E.5
0068:  GOTO   053A
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include <18f4520.h> 
.................... //////////// Standard Header file for the PIC18F4520 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4520 
00BA:  CLRF   FF7
00BC:  ADDLW  CA
00BE:  MOVWF  FF6
00C0:  MOVLW  00
00C2:  ADDWFC FF7,F
00C4:  TBLRD*+
00C6:  MOVF   FF5,W
00C8:  RETURN 0
00CA:  DATA 2C,0F
00CC:  DATA 01,06
*
01E6:  TBLRD*+
01E8:  MOVFF  FF6,8F
01EC:  MOVFF  FF7,90
01F0:  MOVFF  FF5,9B
01F4:  RCALL  01A4
01F6:  MOVFF  8F,FF6
01FA:  MOVFF  90,FF7
01FE:  DECFSZ x8E,F
0200:  BRA    01E6
0202:  RETURN 0
0204:  MOVF   x9B,W
0206:  BTFSC  FD8.2
0208:  BRA    02EC
020A:  MOVWF  00
020C:  MOVF   x9F,W
020E:  BTFSC  FD8.2
0210:  BRA    02EC
0212:  ADDWF  00,F
0214:  BNC   021E
0216:  MOVLW  81
0218:  ADDWF  00,F
021A:  BC    02EC
021C:  BRA    0226
021E:  MOVLW  7F
0220:  SUBWF  00,F
0222:  BNC   02EC
0224:  BZ    02EC
0226:  MOVFF  9C,A3
022A:  MOVF   xA0,W
022C:  XORWF  xA3,F
022E:  BSF    x9C.7
0230:  BSF    xA0.7
0232:  MOVF   x9E,W
0234:  MULWF  xA2
0236:  MOVFF  FF4,A5
023A:  MOVF   x9D,W
023C:  MULWF  xA1
023E:  MOVFF  FF4,03
0242:  MOVFF  FF3,A4
0246:  MULWF  xA2
0248:  MOVF   FF3,W
024A:  ADDWF  xA5,F
024C:  MOVF   FF4,W
024E:  ADDWFC xA4,F
0250:  MOVLW  00
0252:  ADDWFC 03,F
0254:  MOVF   x9E,W
0256:  MULWF  xA1
0258:  MOVF   FF3,W
025A:  ADDWF  xA5,F
025C:  MOVF   FF4,W
025E:  ADDWFC xA4,F
0260:  MOVLW  00
0262:  CLRF   02
0264:  ADDWFC 03,F
0266:  ADDWFC 02,F
0268:  MOVF   x9C,W
026A:  MULWF  xA2
026C:  MOVF   FF3,W
026E:  ADDWF  xA4,F
0270:  MOVF   FF4,W
0272:  ADDWFC 03,F
0274:  MOVLW  00
0276:  ADDWFC 02,F
0278:  MOVF   x9C,W
027A:  MULWF  xA1
027C:  MOVF   FF3,W
027E:  ADDWF  03,F
0280:  MOVF   FF4,W
0282:  ADDWFC 02,F
0284:  MOVLW  00
0286:  CLRF   01
0288:  ADDWFC 01,F
028A:  MOVF   x9E,W
028C:  MULWF  xA0
028E:  MOVF   FF3,W
0290:  ADDWF  xA4,F
0292:  MOVF   FF4,W
0294:  ADDWFC 03,F
0296:  MOVLW  00
0298:  ADDWFC 02,F
029A:  ADDWFC 01,F
029C:  MOVF   x9D,W
029E:  MULWF  xA0
02A0:  MOVF   FF3,W
02A2:  ADDWF  03,F
02A4:  MOVF   FF4,W
02A6:  ADDWFC 02,F
02A8:  MOVLW  00
02AA:  ADDWFC 01,F
02AC:  MOVF   x9C,W
02AE:  MULWF  xA0
02B0:  MOVF   FF3,W
02B2:  ADDWF  02,F
02B4:  MOVF   FF4,W
02B6:  ADDWFC 01,F
02B8:  INCF   00,F
02BA:  BTFSC  01.7
02BC:  BRA    02C8
02BE:  RLCF   xA4,F
02C0:  RLCF   03,F
02C2:  RLCF   02,F
02C4:  RLCF   01,F
02C6:  DECF   00,F
02C8:  MOVLW  00
02CA:  BTFSS  xA4.7
02CC:  BRA    02E2
02CE:  INCF   03,F
02D0:  ADDWFC 02,F
02D2:  ADDWFC 01,F
02D4:  MOVF   01,W
02D6:  BNZ   02E2
02D8:  MOVF   02,W
02DA:  BNZ   02E2
02DC:  MOVF   03,W
02DE:  BNZ   02E2
02E0:  INCF   00,F
02E2:  BTFSC  xA3.7
02E4:  BSF    01.7
02E6:  BTFSS  xA3.7
02E8:  BCF    01.7
02EA:  BRA    02F4
02EC:  CLRF   00
02EE:  CLRF   01
02F0:  CLRF   02
02F2:  CLRF   03
02F4:  RETURN 0
02F6:  MOVF   x9B,W
02F8:  SUBLW  B6
02FA:  MOVWF  x9B
02FC:  CLRF   03
02FE:  MOVFF  9C,9F
0302:  BSF    x9C.7
0304:  BCF    FD8.0
0306:  RRCF   x9C,F
0308:  RRCF   x9D,F
030A:  RRCF   x9E,F
030C:  RRCF   03,F
030E:  RRCF   02,F
0310:  RRCF   01,F
0312:  RRCF   00,F
0314:  DECFSZ x9B,F
0316:  BRA    0304
0318:  BTFSS  x9F.7
031A:  BRA    0332
031C:  COMF   00,F
031E:  COMF   01,F
0320:  COMF   02,F
0322:  COMF   03,F
0324:  INCF   00,F
0326:  BTFSC  FD8.2
0328:  INCF   01,F
032A:  BTFSC  FD8.2
032C:  INCF   02,F
032E:  BTFSC  FD8.2
0330:  INCF   03,F
0332:  RETURN 0
0334:  BTFSC  FD8.1
0336:  BRA    033E
0338:  CLRF   FEA
033A:  MOVLW  A3
033C:  MOVWF  FE9
033E:  CLRF   00
0340:  CLRF   01
0342:  CLRF   02
0344:  CLRF   03
0346:  CLRF   xA3
0348:  CLRF   xA4
034A:  CLRF   xA5
034C:  CLRF   xA6
034E:  MOVF   xA2,W
0350:  IORWF  xA1,W
0352:  IORWF  xA0,W
0354:  IORWF  x9F,W
0356:  BZ    03B0
0358:  MOVLW  20
035A:  MOVWF  xA7
035C:  BCF    FD8.0
035E:  RLCF   x9B,F
0360:  RLCF   x9C,F
0362:  RLCF   x9D,F
0364:  RLCF   x9E,F
0366:  RLCF   xA3,F
0368:  RLCF   xA4,F
036A:  RLCF   xA5,F
036C:  RLCF   xA6,F
036E:  MOVF   xA2,W
0370:  SUBWF  xA6,W
0372:  BNZ   0384
0374:  MOVF   xA1,W
0376:  SUBWF  xA5,W
0378:  BNZ   0384
037A:  MOVF   xA0,W
037C:  SUBWF  xA4,W
037E:  BNZ   0384
0380:  MOVF   x9F,W
0382:  SUBWF  xA3,W
0384:  BNC   03A4
0386:  MOVF   x9F,W
0388:  SUBWF  xA3,F
038A:  MOVF   xA0,W
038C:  BTFSS  FD8.0
038E:  INCFSZ xA0,W
0390:  SUBWF  xA4,F
0392:  MOVF   xA1,W
0394:  BTFSS  FD8.0
0396:  INCFSZ xA1,W
0398:  SUBWF  xA5,F
039A:  MOVF   xA2,W
039C:  BTFSS  FD8.0
039E:  INCFSZ xA2,W
03A0:  SUBWF  xA6,F
03A2:  BSF    FD8.0
03A4:  RLCF   00,F
03A6:  RLCF   01,F
03A8:  RLCF   02,F
03AA:  RLCF   03,F
03AC:  DECFSZ xA7,F
03AE:  BRA    035C
03B0:  MOVFF  A3,FEF
03B4:  MOVFF  A4,FEC
03B8:  MOVFF  A5,FEC
03BC:  MOVFF  A6,FEC
03C0:  RETURN 0
03C2:  MOVF   FE9,W
03C4:  MOVWF  x93
03C6:  MOVF   x92,W
03C8:  MOVWF  x95
03CA:  BZ    03FE
03CC:  MOVFF  91,9E
03D0:  MOVFF  90,9D
03D4:  MOVFF  8F,9C
03D8:  MOVFF  8E,9B
03DC:  CLRF   xA2
03DE:  CLRF   xA1
03E0:  MOVLW  20
03E2:  MOVWF  xA0
03E4:  MOVLW  82
03E6:  MOVWF  x9F
03E8:  RCALL  0204
03EA:  MOVFF  03,91
03EE:  MOVFF  02,90
03F2:  MOVFF  01,8F
03F6:  MOVFF  00,8E
03FA:  DECFSZ x95,F
03FC:  BRA    03CC
03FE:  MOVFF  91,9E
0402:  MOVFF  90,9D
0406:  MOVFF  8F,9C
040A:  MOVFF  8E,9B
040E:  RCALL  02F6
0410:  MOVFF  03,91
0414:  MOVFF  02,90
0418:  MOVFF  01,8F
041C:  MOVFF  00,8E
0420:  BTFSS  x91.7
0422:  BRA    043E
0424:  DECF   x93,F
0426:  BSF    x93.5
0428:  COMF   x8E,F
042A:  COMF   x8F,F
042C:  COMF   x90,F
042E:  COMF   x91,F
0430:  INCF   x8E,F
0432:  BTFSC  FD8.2
0434:  INCF   x8F,F
0436:  BTFSC  FD8.2
0438:  INCF   x90,F
043A:  BTFSC  FD8.2
043C:  INCF   x91,F
043E:  MOVLW  3B
0440:  MOVWF  x9A
0442:  MOVLW  9A
0444:  MOVWF  x99
0446:  MOVLW  CA
0448:  MOVWF  x98
044A:  CLRF   x97
044C:  MOVLW  0A
044E:  MOVWF  x95
0450:  MOVF   x92,W
0452:  BTFSC  FD8.2
0454:  INCF   x93,F
0456:  BSF    FD8.1
0458:  CLRF   FEA
045A:  MOVLW  8E
045C:  MOVWF  FE9
045E:  MOVFF  91,9E
0462:  MOVFF  90,9D
0466:  MOVFF  8F,9C
046A:  MOVFF  8E,9B
046E:  MOVFF  9A,A2
0472:  MOVFF  99,A1
0476:  MOVFF  98,A0
047A:  MOVFF  97,9F
047E:  RCALL  0334
0480:  MOVF   01,W
0482:  MOVF   00,F
0484:  BNZ   04A4
0486:  INCF   x92,W
0488:  SUBWF  x95,W
048A:  BZ    04A4
048C:  MOVF   x93,W
048E:  BZ    04A8
0490:  ANDLW  0F
0492:  SUBWF  x95,W
0494:  BZ    0498
0496:  BC    0506
0498:  BTFSC  x93.7
049A:  BRA    0506
049C:  BTFSC  x93.6
049E:  BRA    04A8
04A0:  MOVLW  20
04A2:  BRA    04FE
04A4:  MOVLW  20
04A6:  ANDWF  x93,F
04A8:  BTFSS  x93.5
04AA:  BRA    04C4
04AC:  BCF    x93.5
04AE:  MOVF   x92,W
04B0:  BTFSS  FD8.2
04B2:  DECF   x93,F
04B4:  MOVF   00,W
04B6:  MOVWF  x93
04B8:  MOVLW  2D
04BA:  MOVWF  x9B
04BC:  RCALL  01A4
04BE:  MOVF   x93,W
04C0:  MOVWF  00
04C2:  CLRF   x93
04C4:  MOVF   x92,W
04C6:  SUBWF  x95,W
04C8:  BNZ   04DE
04CA:  MOVF   00,W
04CC:  MOVWF  x93
04CE:  MOVLW  2E
04D0:  MOVWF  x9B
04D2:  RCALL  01A4
04D4:  MOVF   x93,W
04D6:  MOVWF  00
04D8:  MOVLW  20
04DA:  ANDWF  x93,F
04DC:  MOVLW  00
04DE:  MOVLW  30
04E0:  BTFSS  x93.5
04E2:  BRA    04FE
04E4:  BCF    x93.5
04E6:  MOVF   x92,W
04E8:  BTFSS  FD8.2
04EA:  DECF   x93,F
04EC:  MOVF   00,W
04EE:  MOVWF  x93
04F0:  MOVLW  2D
04F2:  MOVWF  x9B
04F4:  RCALL  01A4
04F6:  MOVF   x93,W
04F8:  MOVWF  00
04FA:  CLRF   x93
04FC:  MOVLW  30
04FE:  ADDWF  00,F
0500:  MOVFF  00,9B
0504:  RCALL  01A4
0506:  BCF    FD8.1
0508:  MOVFF  9A,9E
050C:  MOVFF  99,9D
0510:  MOVFF  98,9C
0514:  MOVFF  97,9B
0518:  CLRF   xA2
051A:  CLRF   xA1
051C:  CLRF   xA0
051E:  MOVLW  0A
0520:  MOVWF  x9F
0522:  RCALL  0334
0524:  MOVFF  03,9A
0528:  MOVFF  02,99
052C:  MOVFF  01,98
0530:  MOVFF  00,97
0534:  DECFSZ x95,F
0536:  BRA    0456
0538:  RETURN 0
*
0568:  DATA 0C,20
056A:  DATA 56,69
056C:  DATA 6E,3A
056E:  DATA 20,25
0570:  DATA 66,00
0572:  MOVLW  8E
0574:  MOVWF  00
0576:  MOVFF  91,01
057A:  MOVFF  90,02
057E:  CLRF   03
0580:  MOVF   01,F
0582:  BNZ   0596
0584:  MOVFF  02,01
0588:  CLRF   02
058A:  MOVLW  08
058C:  SUBWF  00,F
058E:  MOVF   01,F
0590:  BNZ   0596
0592:  CLRF   00
0594:  BRA    05A6
0596:  BCF    FD8.0
0598:  BTFSC  01.7
059A:  BRA    05A4
059C:  RLCF   02,F
059E:  RLCF   01,F
05A0:  DECF   00,F
05A2:  BRA    0596
05A4:  BCF    01.7
05A6:  RETURN 0
05A8:  MOVLW  8E
05AA:  MOVWF  00
05AC:  MOVF   x8E,W
05AE:  SUBWF  00,F
05B0:  MOVFF  8F,02
05B4:  MOVFF  90,01
05B8:  BSF    02.7
05BA:  MOVF   00,F
05BC:  BZ    05D0
05BE:  BCF    FD8.0
05C0:  MOVF   02,F
05C2:  BNZ   05C8
05C4:  MOVF   01,F
05C6:  BZ    05D0
05C8:  RRCF   02,F
05CA:  RRCF   01,F
05CC:  DECFSZ 00,F
05CE:  BRA    05BE
05D0:  BTFSS  x8F.7
05D2:  BRA    05DE
05D4:  COMF   01,F
05D6:  COMF   02,F
05D8:  INCF   01,F
05DA:  BTFSC  FD8.2
05DC:  INCF   02,F
05DE:  GOTO   065C (RETURN)
*
066E:  DATA 0C,20
0670:  DATA 56,69
0672:  DATA 6E,3D
0674:  DATA 25,66
0676:  DATA 20,56
0678:  DATA 00,00
....................  
.................... #list 
....................  
.................... #use delay (clock = 20000000) 
*
015C:  CLRF   FEA
015E:  MOVLW  9C
0160:  MOVWF  FE9
0162:  MOVF   FEF,W
0164:  BZ    0180
0166:  MOVLW  06
0168:  MOVWF  01
016A:  CLRF   00
016C:  DECFSZ 00,F
016E:  BRA    016C
0170:  DECFSZ 01,F
0172:  BRA    016A
0174:  MOVLW  7B
0176:  MOVWF  00
0178:  DECFSZ 00,F
017A:  BRA    0178
017C:  DECFSZ FEF,F
017E:  BRA    0166
0180:  RETURN 0
.................... #fuses HS, NOWDT, NOLVP 
.................... #include "../Library/myLibrary.h" 
.................... // A library for the PIC18F4520 
....................  
.................... int *TRISA = 0xF92; // Connect to TRISx 
.................... int *TRISB = 0xF93; 
.................... int *TRISC = 0xF94; 
.................... int *TRISD = 0xF95; 
.................... int *TRISE = 0xF96; 
....................  
.................... int *LATA = 0xF89;  // Connect to LATx 
.................... int *LATB = 0xF8A; 
.................... int *LATC = 0xF8B; 
.................... int *LATD = 0xF8C; 
.................... int *LATE = 0xF8D; 
....................  
.................... int *PORTA = 0xF80; // Connect to LATx 
.................... int *PORTB = 0xF81; 
.................... int *PORTC = 0xF82; 
.................... int *PORTD = 0xF83; 
.................... int *PORTE = 0xF84; 
....................  
.................... struct _adcon0 { 
....................    int ADON:1; 
....................    int GODONE:1; 
....................    int CHSx:4; 
....................    int unused:2; 
.................... }; 
.................... struct _adcon0 *ADCON0 = 0xFC2; 
....................  
.................... struct _adcon1 {   // Analog vs digital 
....................    int PCFGx:4; 
....................    int VCFG0:1; 
....................    int VCFG1:1; 
....................    int unused:2; 
.................... }; 
.................... struct _adcon1 *ADCON1 = 0xFC1; 
....................  
.................... struct _adcon2 { 
....................    int ADCSx:3; 
....................    int ACQTx:3; 
....................    int unused:1; 
....................    int ADFM:1; 
.................... }; 
.................... struct _adcon2 *ADCON2 = 0xFC0; 
....................  
.................... int16 *Q = 0xFC3; 
.................... int *ADRESH = 0xFC4; 
.................... int *ADRESL = 0xFC3; 
....................  
.................... struct _intcon { 
....................    int RBIF:1; 
....................    int INT0IF:1; 
....................    int TMR0IF:1; 
....................    int RBIE:1; 
....................    int INT0IE:1; 
....................    int TMR0IE:1; 
....................    int PEIE:1; 
....................    int GIE:1; 
.................... }; 
.................... struct _intcon *INTCON = 0xFF2; 
....................  
.................... struct _intcon3 { 
....................    int INT1IF:1; 
....................    int INT2IF:1; 
....................    int unused:1; 
....................    int INT1IE:1; 
....................    int INT2IE:1; 
....................    int notused:1; 
....................    int INT1IP:1; 
....................    int INT2IP:1; 
.................... }; 
.................... struct _intcon3 *INTCON3 = 0xFF0; 
....................  
.................... struct _intcon2 {  // Interrupts 
....................    int RBIP:1; 
....................    int unused:1; 
....................    int TMR0IP:1; 
....................    int notused:1; 
....................    int INTEDG2:1; 
....................    int INTEDG1:1; 
....................    int INTEDG0:1; 
....................    int RBPU:1; 
.................... }; 
.................... struct _intcon2 *INTCON2 = 0xFF1; 
....................  
.................... struct _pie1 { 
....................    int TMR1IE:1; 
....................    int TMR2IE:1; 
....................    int CCP1IE:1; 
....................    int SSPIE:1; 
....................    int TXIE:1; 
....................    int RCIE:1; 
....................    int ADIE:1; 
....................    int PSPIE:1; 
.................... }; 
.................... struct _pie1 *PIE1 = 0xF9D; 
....................  
.................... struct _t1con { 
....................    int TMR1ON:1; 
....................    int TMR1CS:1; 
....................    int T1SYNC:1; 
....................    int T1OSCEN:1; 
....................    int T1CKPSx:2; 
....................    int T1RUN: 1; 
....................    int RD16:1; 
.................... }; 
.................... struct _t1con *T1CON = 0xFCD; 
....................  
.................... struct _t2con { 
....................    int T2CKPSx:2; 
....................    int TMR2ON:1; 
....................    int T2OUTPSx:4; 
....................    int unused:1; 
.................... }; 
.................... struct _t2con *T2CON = 0xFCA; 
....................  
.................... struct _ccpxcon { 
....................    int CCPxMx:4; 
....................    int DCxBx:2; 
....................    int unused:2; 
.................... }; 
.................... struct _ccpxcon *CCP1CON = 0xFBD; 
.................... struct _ccpxcon *CCP2CON = 0xFBA; 
....................  
.................... int16 *CCPR1 = 0xFBE; 
.................... int *CCPR1L = 0xFBE; 
.................... int *PR2 = 0xFCB; 
....................  
.................... struct _eccplas { 
....................    int PSSBD:2; 
....................    int PSSAC:2; 
....................    int ECCPAS:3; 
....................    int ECCPASE:1; 
.................... }; 
.................... struct _eccplas *ECCP1AS = 0xFB6; 
....................  
.................... int *CCPR2L = 0xFBB; 
....................  
.................... // USART 
.................... struct _txsta{ 
....................    int TX9D:1; 
....................    int TRMT:1; 
....................    int BRGH:1; 
....................    int SENDB:1; 
....................    int SYNC:1; 
....................    int TXEN:1; 
....................    int TX9:1; 
....................    int CSRC:1; 
.................... }; 
.................... struct _txsta *TXSTA = 0xFAC; 
....................  
.................... struct _rcsta{ 
....................    int RX9D:1; 
....................    int OERR:1; 
....................    int FERR:1; 
....................    int ADDEN:1; 
....................    int CREN:1; 
....................    int SREN:1; 
....................    int RX9:1; 
....................    int SPEN:1; 
.................... }; 
.................... struct _rcsta *RCSTA = 0xFAB; 
....................  
.................... struct _baudcon{ 
....................    int ABDEN:1; 
....................    int WUE:1; 
....................    int unused:1; 
....................    int BRG16:1; 
....................    int TXCKP:1; 
....................    int RXDTP:1; 
....................    int RCIDL:1; 
....................    int ABDOVF:1; 
.................... }; 
.................... struct _baudcon *BAUDCON = 0xFB8; 
....................  
.................... int *SPBRG = 0xFAF;  // Speed Control 
.................... int *TXREG = 0xFAD; 
.................... int *RCREG = 0xFAE; 
....................  
....................  
.................... #include "../Library/modifiedlcd.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             Modified LCD.C                        //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////         ***This function was modified to fit the Samsumgs6A0069   //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_lcd FALSE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         }lcd; 
.................... //struct lcd_pin_map *lcd = 0xF83; 
....................  
.................... //#if defined(__PCH__) 
.................... //#if defined use_portb_lcd 
.................... //   #byte lcd = 0xF81                   // This puts the entire structure 
.................... //#else 
....................    #byte lcd = 0xF83                   // This puts the entire structure 
.................... //#endif 
.................... //#else 
.................... //#if defined use_portb_lcd 
.................... //   #byte lcd = 6                  // on to port B (at address 6)                ???????? 
.................... //#else 
.................... //   #byte lcd = 8                 // on to port D (at address 8) 
.................... //#endif 
.................... //#endif 
....................  
.................... //#if defined use_portb_lcd 
.................... //   #define set_tris_lcd(x) set_tris_b(x) 
.................... //#else 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... //#endif 
....................  
....................  
.................... #define lcd_type 3           // 0=5x7, 1=5x10, 2=2 lines, 3=2 lines Disp ON 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line             ????????? 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0x0f, 0x01, 0x06}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0x0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,0xF}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
00CE:  MOVLW  F0
00D0:  MOVWF  F95
....................       lcd.rw = 1; 
00D2:  BSF    F83.2
....................       delay_cycles(1); 
00D4:  NOP   
....................       lcd.enable = 1; 
00D6:  BSF    F83.0
....................       delay_cycles(1); 
00D8:  NOP   
....................       high = lcd.data; 
00DA:  SWAPF  F83,W
00DC:  ANDLW  0F
00DE:  MOVWF  xA3
....................       lcd.enable = 0; 
00E0:  BCF    F83.0
....................       delay_cycles(1); 
00E2:  NOP   
....................       lcd.enable = 1; 
00E4:  BSF    F83.0
....................       delay_us(1); 
00E6:  BRA    00E8
00E8:  BRA    00EA
00EA:  NOP   
....................       low = lcd.data; 
00EC:  SWAPF  F83,W
00EE:  ANDLW  0F
00F0:  MOVWF  xA2
....................       lcd.enable = 0; 
00F2:  BCF    F83.0
....................       set_tris_lcd(LCD_WRITE); 
00F4:  MOVLW  00
00F6:  MOVWF  F95
....................       return( (high<<4) | low); 
00F8:  SWAPF  xA3,W
00FA:  MOVWF  00
00FC:  MOVLW  F0
00FE:  ANDWF  00,F
0100:  MOVF   00,W
0102:  IORWF  xA2,W
0104:  MOVWF  01
0106:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
0108:  SWAPF  xA3,W
010A:  ANDLW  F0
010C:  MOVWF  00
010E:  MOVLW  0F
0110:  ANDWF  F83,W
0112:  IORWF  00,W
0114:  MOVWF  F83
....................       delay_cycles(1); 
0116:  NOP   
....................       lcd.enable = 1; 
0118:  BSF    F83.0
....................       delay_us(2); 
011A:  MOVLW  03
011C:  MOVWF  00
011E:  DECFSZ 00,F
0120:  BRA    011E
....................       lcd.enable = 0; 
0122:  BCF    F83.0
0124:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0126:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
0128:  RCALL  00CE
012A:  MOVFF  01,A2
012E:  BTFSC  01.7
0130:  BRA    0128
....................       lcd.rs = address; 
0132:  BTFSS  xA0.0
0134:  BCF    F83.1
0136:  BTFSC  xA0.0
0138:  BSF    F83.1
....................       delay_cycles(1); 
013A:  NOP   
....................       lcd.rw = 0; 
013C:  BCF    F83.2
....................       delay_cycles(1); 
013E:  NOP   
....................       lcd.enable = 0; 
0140:  BCF    F83.0
....................       lcd_send_nibble(n >> 4); 
0142:  SWAPF  xA1,W
0144:  MOVWF  xA2
0146:  MOVLW  0F
0148:  ANDWF  xA2,F
014A:  MOVFF  A2,A3
014E:  RCALL  0108
....................       lcd_send_nibble(n & 0xf); 
0150:  MOVF   xA1,W
0152:  ANDLW  0F
0154:  MOVWF  xA2
0156:  MOVWF  xA3
0158:  RCALL  0108
015A:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
*
067A:  MOVLW  00
067C:  MOVWF  F95
067E:  CLRF   19
0680:  BTFSC  FF2.7
0682:  BSF    19.7
0684:  BCF    FF2.7
....................     delay_ms(45);                                      // modified 
0686:  MOVLW  2D
0688:  MOVWF  x9C
068A:  RCALL  015C
068C:  BTFSC  19.7
068E:  BSF    FF2.7
....................     lcd.rs = 0; 
0690:  BCF    F83.1
....................     lcd.rw = 0; 
0692:  BCF    F83.2
....................     lcd.enable = 0; 
0694:  BCF    F83.0
0696:  CLRF   19
0698:  BTFSC  FF2.7
069A:  BSF    19.7
069C:  BCF    FF2.7
....................     //delay_ms(15);                                    // modified 
....................     //for(i=1;i<=3;++i) {                              // modified 
....................     //   lcd_send_nibble(3);                           // modified 
....................     //   delay_ms(5);                                  // modified 
....................     //}                                                // modified 
....................     lcd_send_nibble(2); 
069E:  MOVLW  02
06A0:  MOVWF  xA3
06A2:  RCALL  0108
06A4:  BTFSC  19.7
06A6:  BSF    FF2.7
....................     for(i=0;i<=3;++i) 
06A8:  CLRF   70
06AA:  MOVF   70,W
06AC:  SUBLW  03
06AE:  BNC   06E0
....................        {                                                // modified 
....................           lcd_send_byte(0,LCD_INIT_STRING[i]); 
06B0:  CLRF   03
06B2:  MOVF   70,W
06B4:  RCALL  00BA
06B6:  MOVWF  71
06B8:  CLRF   19
06BA:  BTFSC  FF2.7
06BC:  BSF    19.7
06BE:  BCF    FF2.7
06C0:  CLRF   xA0
06C2:  MOVWF  xA1
06C4:  RCALL  0126
06C6:  BTFSC  19.7
06C8:  BSF    FF2.7
06CA:  CLRF   19
06CC:  BTFSC  FF2.7
06CE:  BSF    19.7
06D0:  BCF    FF2.7
....................           delay_ms(5);                                  // modified 
06D2:  MOVLW  05
06D4:  MOVWF  x9C
06D6:  RCALL  015C
06D8:  BTFSC  19.7
06DA:  BSF    FF2.7
06DC:  INCF   70,F
06DE:  BRA    06AA
....................        }                                                // modified 
06E0:  GOTO   0932 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
0182:  DECFSZ x9D,W
0184:  BRA    0188
0186:  BRA    018E
....................      address=lcd_line_two; 
0188:  MOVLW  40
018A:  MOVWF  x9E
018C:  BRA    0190
....................    else 
....................      address=0; 
018E:  CLRF   x9E
....................    address+=x-1; 
0190:  MOVLW  01
0192:  SUBWF  x9C,W
0194:  ADDWF  x9E,F
....................    lcd_send_byte(0,0x80|address); 
0196:  MOVF   x9E,W
0198:  IORLW  80
019A:  MOVWF  x9F
019C:  CLRF   xA0
019E:  MOVWF  xA1
01A0:  RCALL  0126
01A2:  RETURN 0
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
01A4:  MOVF   x9B,W
01A6:  XORLW  0C
01A8:  BZ    01B4
01AA:  XORLW  06
01AC:  BZ    01C4
01AE:  XORLW  02
01B0:  BZ    01D0
01B2:  BRA    01DA
....................      case '\f'   : lcd_send_byte(0,1); 
01B4:  CLRF   xA0
01B6:  MOVLW  01
01B8:  MOVWF  xA1
01BA:  RCALL  0126
....................                    delay_ms(2); 
01BC:  MOVLW  02
01BE:  MOVWF  x9C
01C0:  RCALL  015C
....................                                            break; 
01C2:  BRA    01E4
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
01C4:  MOVLW  01
01C6:  MOVWF  x9C
01C8:  MOVLW  02
01CA:  MOVWF  x9D
01CC:  RCALL  0182
01CE:  BRA    01E4
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
01D0:  CLRF   xA0
01D2:  MOVLW  10
01D4:  MOVWF  xA1
01D6:  RCALL  0126
01D8:  BRA    01E4
....................      default     : lcd_send_byte(1,c);     break; 
01DA:  MOVLW  01
01DC:  MOVWF  xA0
01DE:  MOVFF  9B,A1
01E2:  RCALL  0126
....................    } 
01E4:  RETURN 0
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... float Vin = 0; 
.................... int16 vin_send = 0; 
....................  
.................... #INT_RDA 
.................... void int_rda_isr(){ 
....................     printf(lcd_putc,"\f Vin: %f", Vin); 
*
053A:  MOVLW  68
053C:  MOVWF  FF6
053E:  MOVLW  05
0540:  MOVWF  FF7
0542:  MOVLW  07
0544:  MOVWF  x8E
0546:  RCALL  01E6
0548:  MOVLW  89
054A:  MOVWF  FE9
054C:  MOVFF  6D,91
0550:  MOVFF  6C,90
0554:  MOVFF  6B,8F
0558:  MOVFF  6A,8E
055C:  MOVLW  02
055E:  MOVWF  x92
0560:  RCALL  03C2
.................... } 
....................  
0562:  BCF    F9E.5
0564:  GOTO   006C
.................... #INT_AD 
.................... void int_ad_isr() { 
....................    Vin = *Q * (5.0 / 1023.0 ); 
*
05E2:  MOVFF  3F,03
05E6:  MOVFF  3E,FE9
05EA:  MOVFF  3F,FEA
05EE:  MOVFF  FEC,91
05F2:  MOVF   FED,F
05F4:  MOVFF  FEF,90
05F8:  RCALL  0572
05FA:  MOVFF  03,9E
05FE:  MOVFF  02,9D
0602:  MOVFF  01,9C
0606:  MOVFF  00,9B
060A:  MOVLW  0A
060C:  MOVWF  xA2
060E:  MOVLW  28
0610:  MOVWF  xA1
0612:  MOVLW  20
0614:  MOVWF  xA0
0616:  MOVLW  77
0618:  MOVWF  x9F
061A:  RCALL  0204
061C:  MOVFF  03,6D
0620:  MOVFF  02,6C
0624:  MOVFF  01,6B
0628:  MOVFF  00,6A
....................    vin_send = (Vin * 10.0); 
062C:  MOVFF  6D,9E
0630:  MOVFF  6C,9D
0634:  MOVFF  6B,9C
0638:  MOVFF  6A,9B
063C:  CLRF   xA2
063E:  CLRF   xA1
0640:  MOVLW  20
0642:  MOVWF  xA0
0644:  MOVLW  82
0646:  MOVWF  x9F
0648:  RCALL  0204
064A:  MOVFF  03,91
064E:  MOVFF  02,90
0652:  MOVFF  01,8F
0656:  MOVFF  00,8E
065A:  BRA    05A8
065C:  MOVFF  02,6F
0660:  MOVFF  01,6E
....................    output_toggle( PIN_C0 ); 
0664:  BCF    F94.0
0666:  BTG    F8B.0
0668:  BCF    F9E.6
066A:  GOTO   006C
.................... } 
....................  
.................... main(){ 
*
06E4:  CLRF   FF8
06E6:  BCF    FD0.7
06E8:  BSF    07.7
06EA:  MOVLW  0F
06EC:  MOVWF  1B
06EE:  MOVLW  92
06F0:  MOVWF  1A
06F2:  MOVLW  0F
06F4:  MOVWF  1D
06F6:  MOVLW  93
06F8:  MOVWF  1C
06FA:  MOVLW  0F
06FC:  MOVWF  1F
06FE:  MOVLW  94
0700:  MOVWF  1E
0702:  MOVLW  0F
0704:  MOVWF  21
0706:  MOVLW  95
0708:  MOVWF  20
070A:  MOVLW  0F
070C:  MOVWF  23
070E:  MOVLW  96
0710:  MOVWF  22
0712:  MOVLW  0F
0714:  MOVWF  25
0716:  MOVLW  89
0718:  MOVWF  24
071A:  MOVLW  0F
071C:  MOVWF  27
071E:  MOVLW  8A
0720:  MOVWF  26
0722:  MOVLW  0F
0724:  MOVWF  29
0726:  MOVLW  8B
0728:  MOVWF  28
072A:  MOVLW  0F
072C:  MOVWF  2B
072E:  MOVLW  8C
0730:  MOVWF  2A
0732:  MOVLW  0F
0734:  MOVWF  2D
0736:  MOVLW  8D
0738:  MOVWF  2C
073A:  MOVLW  0F
073C:  MOVWF  2F
073E:  MOVLW  80
0740:  MOVWF  2E
0742:  MOVLW  0F
0744:  MOVWF  31
0746:  MOVLW  81
0748:  MOVWF  30
074A:  MOVLW  0F
074C:  MOVWF  33
074E:  MOVLW  82
0750:  MOVWF  32
0752:  MOVLW  0F
0754:  MOVWF  35
0756:  MOVLW  83
0758:  MOVWF  34
075A:  MOVLW  0F
075C:  MOVWF  37
075E:  MOVLW  84
0760:  MOVWF  36
0762:  MOVLW  0F
0764:  MOVWF  39
0766:  MOVLW  C2
0768:  MOVWF  38
076A:  MOVLW  0F
076C:  MOVWF  3B
076E:  MOVLW  C1
0770:  MOVWF  3A
0772:  MOVLW  0F
0774:  MOVWF  3D
0776:  MOVLW  C0
0778:  MOVWF  3C
077A:  MOVLW  0F
077C:  MOVWF  3F
077E:  MOVLW  C3
0780:  MOVWF  3E
0782:  MOVLW  0F
0784:  MOVWF  41
0786:  MOVLW  C4
0788:  MOVWF  40
078A:  MOVLW  0F
078C:  MOVWF  43
078E:  MOVLW  C3
0790:  MOVWF  42
0792:  MOVLW  0F
0794:  MOVWF  45
0796:  MOVLW  F2
0798:  MOVWF  44
079A:  MOVLW  0F
079C:  MOVWF  47
079E:  MOVLW  F0
07A0:  MOVWF  46
07A2:  MOVLW  0F
07A4:  MOVWF  49
07A6:  MOVLW  F1
07A8:  MOVWF  48
07AA:  MOVLW  0F
07AC:  MOVWF  4B
07AE:  MOVLW  9D
07B0:  MOVWF  4A
07B2:  MOVLW  0F
07B4:  MOVWF  4D
07B6:  MOVLW  CD
07B8:  MOVWF  4C
07BA:  MOVLW  0F
07BC:  MOVWF  4F
07BE:  MOVLW  CA
07C0:  MOVWF  4E
07C2:  MOVLW  0F
07C4:  MOVWF  51
07C6:  MOVLW  BD
07C8:  MOVWF  50
07CA:  MOVLW  0F
07CC:  MOVWF  53
07CE:  MOVLW  BA
07D0:  MOVWF  52
07D2:  MOVLW  0F
07D4:  MOVWF  55
07D6:  MOVLW  BE
07D8:  MOVWF  54
07DA:  MOVLW  0F
07DC:  MOVWF  57
07DE:  MOVLW  BE
07E0:  MOVWF  56
07E2:  MOVLW  0F
07E4:  MOVWF  59
07E6:  MOVLW  CB
07E8:  MOVWF  58
07EA:  MOVLW  0F
07EC:  MOVWF  5B
07EE:  MOVLW  B6
07F0:  MOVWF  5A
07F2:  MOVLW  0F
07F4:  MOVWF  5D
07F6:  MOVLW  BB
07F8:  MOVWF  5C
07FA:  MOVLW  0F
07FC:  MOVWF  5F
07FE:  MOVLW  AC
0800:  MOVWF  5E
0802:  MOVLW  0F
0804:  MOVWF  61
0806:  MOVLW  AB
0808:  MOVWF  60
080A:  MOVLW  0F
080C:  MOVWF  63
080E:  MOVLW  B8
0810:  MOVWF  62
0812:  MOVLW  0F
0814:  MOVWF  65
0816:  MOVLW  AF
0818:  MOVWF  64
081A:  MOVLW  0F
081C:  MOVWF  67
081E:  MOVLW  AD
0820:  MOVWF  66
0822:  MOVLW  0F
0824:  MOVWF  69
0826:  MOVLW  AE
0828:  MOVWF  68
082A:  CLRF   6D
082C:  CLRF   6C
082E:  CLRF   6B
0830:  CLRF   6A
0832:  CLRF   6F
0834:  CLRF   6E
0836:  MOVF   FC1,W
0838:  ANDLW  C0
083A:  IORLW  0F
083C:  MOVWF  FC1
083E:  MOVLW  07
0840:  MOVWF  FB4
....................  
....................    // Analog setup 
....................    *TRISA = 0x01; 
0842:  MOVFF  1A,FE9
0846:  MOVFF  1B,FEA
084A:  MOVLW  01
084C:  MOVWF  FEF
....................    ADCON1->PCFGx = 0xE; 
084E:  MOVFF  3A,FE9
0852:  MOVFF  3B,FEA
0856:  MOVLW  F0
0858:  ANDWF  FEF,W
085A:  IORLW  0E
085C:  MOVWF  FEF
....................    ADCON0->ADON = 1; 
085E:  MOVFF  38,FE9
0862:  MOVFF  39,FEA
0866:  BSF    FEF.0
....................    ADCON0->CHSx = 0;   // Channel 0 
0868:  MOVFF  38,FE9
086C:  MOVFF  39,FEA
0870:  MOVLW  C3
0872:  ANDWF  FEF,W
0874:  MOVWF  FEF
....................    ADCON1->VCFG0 = 0;   
0876:  MOVFF  3A,FE9
087A:  MOVFF  3B,FEA
087E:  BCF    FEF.4
....................    ADCON1->VCFG1 = 0;   
0880:  MOVFF  3A,FE9
0884:  MOVFF  3B,FEA
0888:  BCF    FEF.5
....................    ADCON2->ADFM = 1;   // Right Justified 
088A:  MOVFF  3C,FE9
088E:  MOVFF  3D,FEA
0892:  BSF    FEF.7
....................    ADCON2->ACQTx = 5; 
0894:  MOVFF  3C,FE9
0898:  MOVFF  3D,FEA
089C:  MOVLW  C7
089E:  ANDWF  FEF,W
08A0:  IORLW  28
08A2:  MOVWF  FEF
....................    ADCON2->ADCSx = 5; 
08A4:  MOVFF  3C,FE9
08A8:  MOVFF  3D,FEA
08AC:  MOVLW  F8
08AE:  ANDWF  FEF,W
08B0:  IORLW  05
08B2:  MOVWF  FEF
....................    PIE1 -> ADIE = 1; 
08B4:  MOVFF  4A,FE9
08B8:  MOVFF  4B,FEA
08BC:  BSF    FEF.6
....................     
....................   *TRISC = 0x80;      // C7 input    
08BE:  MOVFF  1E,FE9
08C2:  MOVFF  1F,FEA
08C6:  MOVLW  80
08C8:  MOVWF  FEF
....................  
....................   TXSTA->TXEN=1;      // Transmit Enable 
08CA:  MOVFF  5E,FE9
08CE:  MOVFF  5F,FEA
08D2:  BSF    FEF.5
....................   TXSTA->SYNC=0;      // Asynch Mode 
08D4:  MOVFF  5E,FE9
08D8:  MOVFF  5F,FEA
08DC:  BCF    FEF.4
....................  
....................   RCSTA->SPEN=1;      // Serial Enable 
08DE:  MOVFF  60,FE9
08E2:  MOVFF  61,FEA
08E6:  BSF    FEF.7
....................   RCSTA->CREN=1;      // Receiver Enable 
08E8:  MOVFF  60,FE9
08EC:  MOVFF  61,FEA
08F0:  BSF    FEF.4
....................  
....................   TXSTA->BRGH = 0; 
08F2:  MOVFF  5E,FE9
08F6:  MOVFF  5F,FEA
08FA:  BCF    FEF.2
....................   BAUDCON->BRG16 = 0; 
08FC:  MOVFF  62,FE9
0900:  MOVFF  63,FEA
0904:  BCF    FEF.3
....................   *SPBRG = 31;         // Baud Rate 9.6KHz 
0906:  MOVFF  64,FE9
090A:  MOVFF  65,FEA
090E:  MOVLW  1F
0910:  MOVWF  FEF
....................  
....................   PIE1->RCIE=1;       // Receiver Interrupt Enable INT_RDA 
0912:  MOVFF  4A,FE9
0916:  MOVFF  4B,FEA
091A:  BSF    FEF.5
....................   INTCON->PEIE=1; 
091C:  MOVFF  44,FE9
0920:  MOVFF  45,FEA
0924:  BSF    FEF.6
....................   INTCON->GIE=1; 
0926:  MOVFF  44,FE9
092A:  MOVFF  45,FEA
092E:  BSF    FEF.7
....................  
....................   lcd_init();         // LCD Panel Initialize 
0930:  BRA    067A
....................   //printf(lcd_putc,"\f Hello"); 
....................   while(1){ 
....................       ADCON0->GODONE=1;   // Trigger 
0932:  MOVFF  38,FE9
0936:  MOVFF  39,FEA
093A:  BSF    FEF.1
....................       delay_ms( 500 ); 
093C:  MOVLW  02
093E:  MOVWF  70
0940:  CLRF   19
0942:  BTFSC  FF2.7
0944:  BSF    19.7
0946:  BCF    FF2.7
0948:  MOVLW  FA
094A:  MOVWF  x9C
094C:  RCALL  015C
094E:  BTFSC  19.7
0950:  BSF    FF2.7
0952:  DECFSZ 70,F
0954:  BRA    0940
....................       printf(lcd_putc,"\f Vin=%f V",*Q*(5.0/1023.0)); 
0956:  MOVFF  3F,03
095A:  MOVFF  3E,FE9
095E:  MOVFF  3F,FEA
0962:  CLRF   19
0964:  BTFSC  FF2.7
0966:  BSF    19.7
0968:  BCF    FF2.7
096A:  MOVFF  FEC,91
096E:  MOVF   FED,F
0970:  MOVFF  FEF,90
0974:  RCALL  0572
0976:  BTFSC  19.7
0978:  BSF    FF2.7
097A:  CLRF   19
097C:  BTFSC  FF2.7
097E:  BSF    19.7
0980:  BCF    FF2.7
0982:  MOVFF  03,9E
0986:  MOVFF  02,9D
098A:  MOVFF  01,9C
098E:  MOVFF  00,9B
0992:  MOVLW  0A
0994:  MOVWF  xA2
0996:  MOVLW  28
0998:  MOVWF  xA1
099A:  MOVLW  20
099C:  MOVWF  xA0
099E:  MOVLW  77
09A0:  MOVWF  x9F
09A2:  RCALL  0204
09A4:  BTFSC  19.7
09A6:  BSF    FF2.7
09A8:  MOVFF  03,73
09AC:  MOVFF  02,72
09B0:  MOVFF  01,71
09B4:  MOVFF  00,70
09B8:  MOVLW  6E
09BA:  MOVWF  FF6
09BC:  MOVLW  06
09BE:  MOVWF  FF7
09C0:  CLRF   19
09C2:  BTFSC  FF2.7
09C4:  BSF    19.7
09C6:  BCF    FF2.7
09C8:  MOVLW  06
09CA:  MOVWF  x8E
09CC:  RCALL  01E6
09CE:  BTFSC  19.7
09D0:  BSF    FF2.7
09D2:  MOVLW  89
09D4:  MOVWF  FE9
09D6:  CLRF   19
09D8:  BTFSC  FF2.7
09DA:  BSF    19.7
09DC:  BCF    FF2.7
09DE:  MOVFF  73,91
09E2:  MOVFF  72,90
09E6:  MOVFF  71,8F
09EA:  MOVFF  70,8E
09EE:  MOVLW  02
09F0:  MOVWF  x92
09F2:  RCALL  03C2
09F4:  BTFSC  19.7
09F6:  BSF    FF2.7
09F8:  CLRF   19
09FA:  BTFSC  FF2.7
09FC:  BSF    19.7
09FE:  BCF    FF2.7
0A00:  MOVLW  20
0A02:  MOVWF  x9B
0A04:  CALL   01A4
0A08:  BTFSC  19.7
0A0A:  BSF    FF2.7
0A0C:  CLRF   19
0A0E:  BTFSC  FF2.7
0A10:  BSF    19.7
0A12:  BCF    FF2.7
0A14:  MOVLW  56
0A16:  MOVWF  x9B
0A18:  CALL   01A4
0A1C:  BTFSC  19.7
0A1E:  BSF    FF2.7
....................       *TXREG = vin_send;       // Transmiting 'Vin' 
0A20:  MOVFF  67,03
0A24:  MOVFF  66,FE9
0A28:  MOVFF  67,FEA
0A2C:  MOVFF  6E,FEF
0A30:  BRA    0932
....................   } 
.................... } 
....................  
0A32:  SLEEP 
....................  

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
