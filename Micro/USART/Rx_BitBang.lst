CCS PCH C Compiler, Version 5.085, 47635               21-Nov-23 16:57

               Filename:   D:\Microcontrollers\USART\Rx_BitBang.lst

               ROM used:   2566 bytes (8%)
                           Largest free fragment is 30198
               RAM used:   112 (7%) at main() level
                           147 (10%) worst case
               Stack used: 7 locations (2 in main + 5 for interrupts)
               Stack size: 31

*
0000:  GOTO   0838
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   06C6
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include <18f4520.h> 
.................... //////////// Standard Header file for the PIC18F4520 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4520 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA 2C,0F
00C0:  DATA 01,06
00C2:  MOVLW  8E
00C4:  MOVWF  00
00C6:  MOVFF  77,01
00CA:  MOVFF  76,02
00CE:  CLRF   03
00D0:  MOVF   01,F
00D2:  BNZ   00E6
00D4:  MOVFF  02,01
00D8:  CLRF   02
00DA:  MOVLW  08
00DC:  SUBWF  00,F
00DE:  MOVF   01,F
00E0:  BNZ   00E6
00E2:  CLRF   00
00E4:  BRA    00F6
00E6:  BCF    FD8.0
00E8:  BTFSC  01.7
00EA:  BRA    00F4
00EC:  RLCF   02,F
00EE:  RLCF   01,F
00F0:  DECF   00,F
00F2:  BRA    00E6
00F4:  BCF    01.7
00F6:  GOTO   06DA (RETURN)
00FA:  MOVF   76,W
00FC:  BTFSC  FD8.2
00FE:  BRA    024A
0100:  MOVWF  x82
0102:  MOVF   7A,W
0104:  BTFSC  FD8.2
0106:  BRA    024A
0108:  SUBWF  x82,F
010A:  BNC   0116
010C:  MOVLW  7F
010E:  ADDWF  x82,F
0110:  BTFSC  FD8.0
0112:  BRA    024A
0114:  BRA    0122
0116:  MOVLW  81
0118:  SUBWF  x82,F
011A:  BTFSS  FD8.0
011C:  BRA    024A
011E:  BTFSC  FD8.2
0120:  BRA    024A
0122:  MOVFF  82,00
0126:  CLRF   01
0128:  CLRF   02
012A:  CLRF   03
012C:  CLRF   x81
012E:  MOVFF  77,80
0132:  BSF    x80.7
0134:  MOVFF  78,7F
0138:  MOVFF  79,7E
013C:  MOVLW  19
013E:  MOVWF  x82
0140:  MOVF   7D,W
0142:  SUBWF  7E,F
0144:  BC    0160
0146:  MOVLW  01
0148:  SUBWF  7F,F
014A:  BC    0160
014C:  SUBWF  x80,F
014E:  BC    0160
0150:  SUBWF  x81,F
0152:  BC    0160
0154:  INCF   x81,F
0156:  INCF   x80,F
0158:  INCF   7F,F
015A:  MOVF   7D,W
015C:  ADDWF  7E,F
015E:  BRA    01B0
0160:  MOVF   7C,W
0162:  SUBWF  7F,F
0164:  BC    018A
0166:  MOVLW  01
0168:  SUBWF  x80,F
016A:  BC    018A
016C:  SUBWF  x81,F
016E:  BC    018A
0170:  INCF   x81,F
0172:  INCF   x80,F
0174:  MOVF   7C,W
0176:  ADDWF  7F,F
0178:  MOVF   7D,W
017A:  ADDWF  7E,F
017C:  BNC   01B0
017E:  INCF   7F,F
0180:  BNZ   01B0
0182:  INCF   x80,F
0184:  BNZ   01B0
0186:  INCF   x81,F
0188:  BRA    01B0
018A:  MOVF   7B,W
018C:  IORLW  80
018E:  SUBWF  x80,F
0190:  BC    01AE
0192:  MOVLW  01
0194:  SUBWF  x81,F
0196:  BC    01AE
0198:  INCF   x81,F
019A:  MOVF   7B,W
019C:  IORLW  80
019E:  ADDWF  x80,F
01A0:  MOVF   7C,W
01A2:  ADDWF  7F,F
01A4:  BNC   0178
01A6:  INCF   x80,F
01A8:  BNZ   0178
01AA:  INCF   x81,F
01AC:  BRA    0178
01AE:  BSF    03.0
01B0:  DECFSZ x82,F
01B2:  BRA    01B6
01B4:  BRA    01CC
01B6:  BCF    FD8.0
01B8:  RLCF   7E,F
01BA:  RLCF   7F,F
01BC:  RLCF   x80,F
01BE:  RLCF   x81,F
01C0:  BCF    FD8.0
01C2:  RLCF   03,F
01C4:  RLCF   02,F
01C6:  RLCF   01,F
01C8:  RLCF   x83,F
01CA:  BRA    0140
01CC:  BTFSS  x83.0
01CE:  BRA    01DC
01D0:  BCF    FD8.0
01D2:  RRCF   01,F
01D4:  RRCF   02,F
01D6:  RRCF   03,F
01D8:  RRCF   x83,F
01DA:  BRA    01E0
01DC:  DECF   00,F
01DE:  BZ    024A
01E0:  BTFSC  x83.7
01E2:  BRA    0220
01E4:  BCF    FD8.0
01E6:  RLCF   7E,F
01E8:  RLCF   7F,F
01EA:  RLCF   x80,F
01EC:  RLCF   x81,F
01EE:  MOVF   7D,W
01F0:  SUBWF  7E,F
01F2:  BC    0202
01F4:  MOVLW  01
01F6:  SUBWF  7F,F
01F8:  BC    0202
01FA:  SUBWF  x80,F
01FC:  BC    0202
01FE:  SUBWF  x81,F
0200:  BNC   0236
0202:  MOVF   7C,W
0204:  SUBWF  7F,F
0206:  BC    0212
0208:  MOVLW  01
020A:  SUBWF  x80,F
020C:  BC    0212
020E:  SUBWF  x81,F
0210:  BNC   0236
0212:  MOVF   7B,W
0214:  IORLW  80
0216:  SUBWF  x80,F
0218:  BC    0220
021A:  MOVLW  01
021C:  SUBWF  x81,F
021E:  BNC   0236
0220:  INCF   03,F
0222:  BNZ   0236
0224:  INCF   02,F
0226:  BNZ   0236
0228:  INCF   01,F
022A:  BNZ   0236
022C:  INCF   00,F
022E:  BZ    024A
0230:  RRCF   01,F
0232:  RRCF   02,F
0234:  RRCF   03,F
0236:  MOVFF  77,82
023A:  MOVF   7B,W
023C:  XORWF  x82,F
023E:  BTFSS  x82.7
0240:  BRA    0246
0242:  BSF    01.7
0244:  BRA    0252
0246:  BCF    01.7
0248:  BRA    0252
024A:  CLRF   00
024C:  CLRF   01
024E:  CLRF   02
0250:  CLRF   03
0252:  RETURN 0
0254:  MOVF   x86,W
0256:  BTFSC  FD8.2
0258:  BRA    033C
025A:  MOVWF  00
025C:  MOVF   x8A,W
025E:  BTFSC  FD8.2
0260:  BRA    033C
0262:  ADDWF  00,F
0264:  BNC   026E
0266:  MOVLW  81
0268:  ADDWF  00,F
026A:  BC    033C
026C:  BRA    0276
026E:  MOVLW  7F
0270:  SUBWF  00,F
0272:  BNC   033C
0274:  BZ    033C
0276:  MOVFF  87,8E
027A:  MOVF   x8B,W
027C:  XORWF  x8E,F
027E:  BSF    x87.7
0280:  BSF    x8B.7
0282:  MOVF   x89,W
0284:  MULWF  x8D
0286:  MOVFF  FF4,90
028A:  MOVF   x88,W
028C:  MULWF  x8C
028E:  MOVFF  FF4,03
0292:  MOVFF  FF3,8F
0296:  MULWF  x8D
0298:  MOVF   FF3,W
029A:  ADDWF  x90,F
029C:  MOVF   FF4,W
029E:  ADDWFC x8F,F
02A0:  MOVLW  00
02A2:  ADDWFC 03,F
02A4:  MOVF   x89,W
02A6:  MULWF  x8C
02A8:  MOVF   FF3,W
02AA:  ADDWF  x90,F
02AC:  MOVF   FF4,W
02AE:  ADDWFC x8F,F
02B0:  MOVLW  00
02B2:  CLRF   02
02B4:  ADDWFC 03,F
02B6:  ADDWFC 02,F
02B8:  MOVF   x87,W
02BA:  MULWF  x8D
02BC:  MOVF   FF3,W
02BE:  ADDWF  x8F,F
02C0:  MOVF   FF4,W
02C2:  ADDWFC 03,F
02C4:  MOVLW  00
02C6:  ADDWFC 02,F
02C8:  MOVF   x87,W
02CA:  MULWF  x8C
02CC:  MOVF   FF3,W
02CE:  ADDWF  03,F
02D0:  MOVF   FF4,W
02D2:  ADDWFC 02,F
02D4:  MOVLW  00
02D6:  CLRF   01
02D8:  ADDWFC 01,F
02DA:  MOVF   x89,W
02DC:  MULWF  x8B
02DE:  MOVF   FF3,W
02E0:  ADDWF  x8F,F
02E2:  MOVF   FF4,W
02E4:  ADDWFC 03,F
02E6:  MOVLW  00
02E8:  ADDWFC 02,F
02EA:  ADDWFC 01,F
02EC:  MOVF   x88,W
02EE:  MULWF  x8B
02F0:  MOVF   FF3,W
02F2:  ADDWF  03,F
02F4:  MOVF   FF4,W
02F6:  ADDWFC 02,F
02F8:  MOVLW  00
02FA:  ADDWFC 01,F
02FC:  MOVF   x87,W
02FE:  MULWF  x8B
0300:  MOVF   FF3,W
0302:  ADDWF  02,F
0304:  MOVF   FF4,W
0306:  ADDWFC 01,F
0308:  INCF   00,F
030A:  BTFSC  01.7
030C:  BRA    0318
030E:  RLCF   x8F,F
0310:  RLCF   03,F
0312:  RLCF   02,F
0314:  RLCF   01,F
0316:  DECF   00,F
0318:  MOVLW  00
031A:  BTFSS  x8F.7
031C:  BRA    0332
031E:  INCF   03,F
0320:  ADDWFC 02,F
0322:  ADDWFC 01,F
0324:  MOVF   01,W
0326:  BNZ   0332
0328:  MOVF   02,W
032A:  BNZ   0332
032C:  MOVF   03,W
032E:  BNZ   0332
0330:  INCF   00,F
0332:  BTFSC  x8E.7
0334:  BSF    01.7
0336:  BTFSS  x8E.7
0338:  BCF    01.7
033A:  BRA    0344
033C:  CLRF   00
033E:  CLRF   01
0340:  CLRF   02
0342:  CLRF   03
0344:  RETURN 0
*
0460:  MOVF   x86,W
0462:  SUBLW  B6
0464:  MOVWF  x86
0466:  CLRF   03
0468:  MOVFF  87,8A
046C:  BSF    x87.7
046E:  BCF    FD8.0
0470:  RRCF   x87,F
0472:  RRCF   x88,F
0474:  RRCF   x89,F
0476:  RRCF   03,F
0478:  RRCF   02,F
047A:  RRCF   01,F
047C:  RRCF   00,F
047E:  DECFSZ x86,F
0480:  BRA    046E
0482:  BTFSS  x8A.7
0484:  BRA    049C
0486:  COMF   00,F
0488:  COMF   01,F
048A:  COMF   02,F
048C:  COMF   03,F
048E:  INCF   00,F
0490:  BTFSC  FD8.2
0492:  INCF   01,F
0494:  BTFSC  FD8.2
0496:  INCF   02,F
0498:  BTFSC  FD8.2
049A:  INCF   03,F
049C:  GOTO   057C (RETURN)
04A0:  BTFSC  FD8.1
04A2:  BRA    04AA
04A4:  CLRF   FEA
04A6:  MOVLW  8E
04A8:  MOVWF  FE9
04AA:  CLRF   00
04AC:  CLRF   01
04AE:  CLRF   02
04B0:  CLRF   03
04B2:  CLRF   x8E
04B4:  CLRF   x8F
04B6:  CLRF   x90
04B8:  CLRF   x91
04BA:  MOVF   x8D,W
04BC:  IORWF  x8C,W
04BE:  IORWF  x8B,W
04C0:  IORWF  x8A,W
04C2:  BZ    051C
04C4:  MOVLW  20
04C6:  MOVWF  x92
04C8:  BCF    FD8.0
04CA:  RLCF   x86,F
04CC:  RLCF   x87,F
04CE:  RLCF   x88,F
04D0:  RLCF   x89,F
04D2:  RLCF   x8E,F
04D4:  RLCF   x8F,F
04D6:  RLCF   x90,F
04D8:  RLCF   x91,F
04DA:  MOVF   x8D,W
04DC:  SUBWF  x91,W
04DE:  BNZ   04F0
04E0:  MOVF   x8C,W
04E2:  SUBWF  x90,W
04E4:  BNZ   04F0
04E6:  MOVF   x8B,W
04E8:  SUBWF  x8F,W
04EA:  BNZ   04F0
04EC:  MOVF   x8A,W
04EE:  SUBWF  x8E,W
04F0:  BNC   0510
04F2:  MOVF   x8A,W
04F4:  SUBWF  x8E,F
04F6:  MOVF   x8B,W
04F8:  BTFSS  FD8.0
04FA:  INCFSZ x8B,W
04FC:  SUBWF  x8F,F
04FE:  MOVF   x8C,W
0500:  BTFSS  FD8.0
0502:  INCFSZ x8C,W
0504:  SUBWF  x90,F
0506:  MOVF   x8D,W
0508:  BTFSS  FD8.0
050A:  INCFSZ x8D,W
050C:  SUBWF  x91,F
050E:  BSF    FD8.0
0510:  RLCF   00,F
0512:  RLCF   01,F
0514:  RLCF   02,F
0516:  RLCF   03,F
0518:  DECFSZ x92,F
051A:  BRA    04C8
051C:  MOVFF  8E,FEF
0520:  MOVFF  8F,FEC
0524:  MOVFF  90,FEC
0528:  MOVFF  91,FEC
052C:  RETURN 0
052E:  MOVF   FE9,W
0530:  MOVWF  7E
0532:  MOVF   7D,W
0534:  MOVWF  x80
0536:  BZ    056A
0538:  MOVFF  7C,89
053C:  MOVFF  7B,88
0540:  MOVFF  7A,87
0544:  MOVFF  79,86
0548:  CLRF   x8D
054A:  CLRF   x8C
054C:  MOVLW  20
054E:  MOVWF  x8B
0550:  MOVLW  82
0552:  MOVWF  x8A
0554:  RCALL  0254
0556:  MOVFF  03,7C
055A:  MOVFF  02,7B
055E:  MOVFF  01,7A
0562:  MOVFF  00,79
0566:  DECFSZ x80,F
0568:  BRA    0538
056A:  MOVFF  7C,89
056E:  MOVFF  7B,88
0572:  MOVFF  7A,87
0576:  MOVFF  79,86
057A:  BRA    0460
057C:  MOVFF  03,7C
0580:  MOVFF  02,7B
0584:  MOVFF  01,7A
0588:  MOVFF  00,79
058C:  BTFSS  7C.7
058E:  BRA    05AA
0590:  DECF   7E,F
0592:  BSF    7E.5
0594:  COMF   79,F
0596:  COMF   7A,F
0598:  COMF   7B,F
059A:  COMF   7C,F
059C:  INCF   79,F
059E:  BTFSC  FD8.2
05A0:  INCF   7A,F
05A2:  BTFSC  FD8.2
05A4:  INCF   7B,F
05A6:  BTFSC  FD8.2
05A8:  INCF   7C,F
05AA:  MOVLW  3B
05AC:  MOVWF  x85
05AE:  MOVLW  9A
05B0:  MOVWF  x84
05B2:  MOVLW  CA
05B4:  MOVWF  x83
05B6:  CLRF   x82
05B8:  MOVLW  0A
05BA:  MOVWF  x80
05BC:  MOVF   7D,W
05BE:  BTFSC  FD8.2
05C0:  INCF   7E,F
05C2:  BSF    FD8.1
05C4:  CLRF   FEA
05C6:  MOVLW  79
05C8:  MOVWF  FE9
05CA:  MOVFF  7C,89
05CE:  MOVFF  7B,88
05D2:  MOVFF  7A,87
05D6:  MOVFF  79,86
05DA:  MOVFF  85,8D
05DE:  MOVFF  84,8C
05E2:  MOVFF  83,8B
05E6:  MOVFF  82,8A
05EA:  RCALL  04A0
05EC:  MOVF   01,W
05EE:  MOVF   00,F
05F0:  BNZ   0610
05F2:  INCF   7D,W
05F4:  SUBWF  x80,W
05F6:  BZ    0610
05F8:  MOVF   7E,W
05FA:  BZ    0614
05FC:  ANDLW  0F
05FE:  SUBWF  x80,W
0600:  BZ    0604
0602:  BC    0672
0604:  BTFSC  7E.7
0606:  BRA    0672
0608:  BTFSC  7E.6
060A:  BRA    0614
060C:  MOVLW  20
060E:  BRA    066A
0610:  MOVLW  20
0612:  ANDWF  7E,F
0614:  BTFSS  7E.5
0616:  BRA    0630
0618:  BCF    7E.5
061A:  MOVF   7D,W
061C:  BTFSS  FD8.2
061E:  DECF   7E,F
0620:  MOVF   00,W
0622:  MOVWF  7E
0624:  MOVLW  2D
0626:  MOVWF  x86
0628:  RCALL  041E
062A:  MOVF   7E,W
062C:  MOVWF  00
062E:  CLRF   7E
0630:  MOVF   7D,W
0632:  SUBWF  x80,W
0634:  BNZ   064A
0636:  MOVF   00,W
0638:  MOVWF  7E
063A:  MOVLW  2E
063C:  MOVWF  x86
063E:  RCALL  041E
0640:  MOVF   7E,W
0642:  MOVWF  00
0644:  MOVLW  20
0646:  ANDWF  7E,F
0648:  MOVLW  00
064A:  MOVLW  30
064C:  BTFSS  7E.5
064E:  BRA    066A
0650:  BCF    7E.5
0652:  MOVF   7D,W
0654:  BTFSS  FD8.2
0656:  DECF   7E,F
0658:  MOVF   00,W
065A:  MOVWF  7E
065C:  MOVLW  2D
065E:  MOVWF  x86
0660:  RCALL  041E
0662:  MOVF   7E,W
0664:  MOVWF  00
0666:  CLRF   7E
0668:  MOVLW  30
066A:  ADDWF  00,F
066C:  MOVFF  00,86
0670:  RCALL  041E
0672:  BCF    FD8.1
0674:  MOVFF  85,89
0678:  MOVFF  84,88
067C:  MOVFF  83,87
0680:  MOVFF  82,86
0684:  CLRF   x8D
0686:  CLRF   x8C
0688:  CLRF   x8B
068A:  MOVLW  0A
068C:  MOVWF  x8A
068E:  RCALL  04A0
0690:  MOVFF  03,85
0694:  MOVFF  02,84
0698:  MOVFF  01,83
069C:  MOVFF  00,82
06A0:  DECFSZ x80,F
06A2:  BRA    05C2
06A4:  RETURN 0
06A6:  TBLRD*+
06A8:  MOVFF  FF6,76
06AC:  MOVFF  FF7,77
06B0:  MOVFF  FF5,86
06B4:  RCALL  041E
06B6:  MOVFF  76,FF6
06BA:  MOVFF  77,FF7
06BE:  DECFSZ 75,F
06C0:  BRA    06A6
06C2:  GOTO   07A4 (RETURN)
*
07C4:  DATA 0A,20
07C6:  DATA 56,69
07C8:  DATA 6E,3D
07CA:  DATA 20,25
07CC:  DATA 66,00
....................  
.................... #list 
....................  
.................... #use delay (clock = 20000000) 
*
03D4:  CLRF   FEA
03D6:  MOVLW  87
03D8:  MOVWF  FE9
03DA:  MOVF   FEF,W
03DC:  BZ    03F8
03DE:  MOVLW  06
03E0:  MOVWF  01
03E2:  CLRF   00
03E4:  DECFSZ 00,F
03E6:  BRA    03E4
03E8:  DECFSZ 01,F
03EA:  BRA    03E2
03EC:  MOVLW  7B
03EE:  MOVWF  00
03F0:  DECFSZ 00,F
03F2:  BRA    03F0
03F4:  DECFSZ FEF,F
03F6:  BRA    03DE
03F8:  RETURN 0
.................... #fuses HS, NOWDT, NOLVP 
.................... #include "../Library/myLibrary.h" 
.................... // A library for the PIC18F4520 
....................  
.................... int *TRISA = 0xF92; // Connect to TRISx 
.................... int *TRISB = 0xF93; 
.................... int *TRISC = 0xF94; 
.................... int *TRISD = 0xF95; 
.................... int *TRISE = 0xF96; 
....................  
.................... int *LATA = 0xF89;  // Connect to LATx 
.................... int *LATB = 0xF8A; 
.................... int *LATC = 0xF8B; 
.................... int *LATD = 0xF8C; 
.................... int *LATE = 0xF8D; 
....................  
.................... int *PORTA = 0xF80; // Connect to LATx 
.................... int *PORTB = 0xF81; 
.................... int *PORTC = 0xF82; 
.................... int *PORTD = 0xF83; 
.................... int *PORTE = 0xF84; 
....................  
.................... struct _adcon0 { 
....................    int ADON:1; 
....................    int GODONE:1; 
....................    int CHSx:4; 
....................    int unused:2; 
.................... }; 
.................... struct _adcon0 *ADCON0 = 0xFC2; 
....................  
.................... struct _adcon1 {   // Analog vs digital 
....................    int PCFGx:4; 
....................    int VCFG0:1; 
....................    int VCFG1:1; 
....................    int unused:2; 
.................... }; 
.................... struct _adcon1 *ADCON1 = 0xFC1; 
....................  
.................... struct _adcon2 { 
....................    int ADCSx:3; 
....................    int ACQTx:3; 
....................    int unused:1; 
....................    int ADFM:1; 
.................... }; 
.................... struct _adcon2 *ADCON2 = 0xFC0; 
....................  
.................... int16 *Q = 0xFC3; 
.................... int *ADRESH = 0xFC4; 
.................... int *ADRESL = 0xFC3; 
....................  
.................... struct _intcon { 
....................    int RBIF:1; 
....................    int INT0IF:1; 
....................    int TMR0IF:1; 
....................    int RBIE:1; 
....................    int INT0IE:1; 
....................    int TMR0IE:1; 
....................    int PEIE:1; 
....................    int GIE:1; 
.................... }; 
.................... struct _intcon *INTCON = 0xFF2; 
....................  
.................... struct _intcon3 { 
....................    int INT1IF:1; 
....................    int INT2IF:1; 
....................    int unused:1; 
....................    int INT1IE:1; 
....................    int INT2IE:1; 
....................    int notused:1; 
....................    int INT1IP:1; 
....................    int INT2IP:1; 
.................... }; 
.................... struct _intcon3 *INTCON3 = 0xFF0; 
....................  
.................... struct _intcon2 {  // Interrupts 
....................    int RBIP:1; 
....................    int unused:1; 
....................    int TMR0IP:1; 
....................    int notused:1; 
....................    int INTEDG2:1; 
....................    int INTEDG1:1; 
....................    int INTEDG0:1; 
....................    int RBPU:1; 
.................... }; 
.................... struct _intcon2 *INTCON2 = 0xFF1; 
....................  
.................... struct _pie1 { 
....................    int TMR1IE:1; 
....................    int TMR2IE:1; 
....................    int CCP1IE:1; 
....................    int SSPIE:1; 
....................    int TXIE:1; 
....................    int RCIE:1; 
....................    int ADIE:1; 
....................    int PSPIE:1; 
.................... }; 
.................... struct _pie1 *PIE1 = 0xF9D; 
....................  
.................... struct _t1con { 
....................    int TMR1ON:1; 
....................    int TMR1CS:1; 
....................    int T1SYNC:1; 
....................    int T1OSCEN:1; 
....................    int T1CKPSx:2; 
....................    int T1RUN: 1; 
....................    int RD16:1; 
.................... }; 
.................... struct _t1con *T1CON = 0xFCD; 
....................  
.................... struct _t2con { 
....................    int T2CKPSx:2; 
....................    int TMR2ON:1; 
....................    int T2OUTPSx:4; 
....................    int unused:1; 
.................... }; 
.................... struct _t2con *T2CON = 0xFCA; 
....................  
.................... struct _ccpxcon { 
....................    int CCPxMx:4; 
....................    int DCxBx:2; 
....................    int unused:2; 
.................... }; 
.................... struct _ccpxcon *CCP1CON = 0xFBD; 
.................... struct _ccpxcon *CCP2CON = 0xFBA; 
....................  
.................... int16 *CCPR1 = 0xFBE; 
.................... int *CCPR1L = 0xFBE; 
.................... int *PR2 = 0xFCB; 
....................  
.................... struct _eccplas { 
....................    int PSSBD:2; 
....................    int PSSAC:2; 
....................    int ECCPAS:3; 
....................    int ECCPASE:1; 
.................... }; 
.................... struct _eccplas *ECCP1AS = 0xFB6; 
....................  
.................... int *CCPR2L = 0xFBB; 
....................  
.................... // USART 
.................... struct _txsta{ 
....................    int TX9D:1; 
....................    int TRMT:1; 
....................    int BRGH:1; 
....................    int SENDB:1; 
....................    int SYNC:1; 
....................    int TXEN:1; 
....................    int TX9:1; 
....................    int CSRC:1; 
.................... }; 
.................... struct _txsta *TXSTA = 0xFAC; 
....................  
.................... struct _rcsta{ 
....................    int RX9D:1; 
....................    int OERR:1; 
....................    int FERR:1; 
....................    int ADDEN:1; 
....................    int CREN:1; 
....................    int SREN:1; 
....................    int RX9:1; 
....................    int SPEN:1; 
.................... }; 
.................... struct _rcsta *RCSTA = 0xFAB; 
....................  
.................... struct _baudcon{ 
....................    int ABDEN:1; 
....................    int WUE:1; 
....................    int unused:1; 
....................    int BRG16:1; 
....................    int TXCKP:1; 
....................    int RXDTP:1; 
....................    int RCIDL:1; 
....................    int ABDOVF:1; 
.................... }; 
.................... struct _baudcon *BAUDCON = 0xFB8; 
....................  
.................... int *SPBRG = 0xFAF;  // Speed Control 
.................... int *TXREG = 0xFAD; 
.................... int *RCREG = 0xFAE; 
....................  
....................  
.................... #include "../Library/modifiedlcd.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             Modified LCD.C                        //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////         ***This function was modified to fit the Samsumgs6A0069   //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_lcd FALSE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         }lcd; 
.................... //struct lcd_pin_map *lcd = 0xF83; 
....................  
.................... //#if defined(__PCH__) 
.................... //#if defined use_portb_lcd 
.................... //   #byte lcd = 0xF81                   // This puts the entire structure 
.................... //#else 
....................    #byte lcd = 0xF83                   // This puts the entire structure 
.................... //#endif 
.................... //#else 
.................... //#if defined use_portb_lcd 
.................... //   #byte lcd = 6                  // on to port B (at address 6)                ???????? 
.................... //#else 
.................... //   #byte lcd = 8                 // on to port D (at address 8) 
.................... //#endif 
.................... //#endif 
....................  
.................... //#if defined use_portb_lcd 
.................... //   #define set_tris_lcd(x) set_tris_b(x) 
.................... //#else 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... //#endif 
....................  
....................  
.................... #define lcd_type 3           // 0=5x7, 1=5x10, 2=2 lines, 3=2 lines Disp ON 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line             ????????? 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0x0f, 0x01, 0x06}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0x0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,0xF}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0346:  MOVLW  F0
0348:  MOVWF  F95
....................       lcd.rw = 1; 
034A:  BSF    F83.2
....................       delay_cycles(1); 
034C:  NOP   
....................       lcd.enable = 1; 
034E:  BSF    F83.0
....................       delay_cycles(1); 
0350:  NOP   
....................       high = lcd.data; 
0352:  SWAPF  F83,W
0354:  ANDLW  0F
0356:  MOVWF  x8E
....................       lcd.enable = 0; 
0358:  BCF    F83.0
....................       delay_cycles(1); 
035A:  NOP   
....................       lcd.enable = 1; 
035C:  BSF    F83.0
....................       delay_us(1); 
035E:  BRA    0360
0360:  BRA    0362
0362:  NOP   
....................       low = lcd.data; 
0364:  SWAPF  F83,W
0366:  ANDLW  0F
0368:  MOVWF  x8D
....................       lcd.enable = 0; 
036A:  BCF    F83.0
....................       set_tris_lcd(LCD_WRITE); 
036C:  MOVLW  00
036E:  MOVWF  F95
....................       return( (high<<4) | low); 
0370:  SWAPF  x8E,W
0372:  MOVWF  00
0374:  MOVLW  F0
0376:  ANDWF  00,F
0378:  MOVF   00,W
037A:  IORWF  x8D,W
037C:  MOVWF  01
037E:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
0380:  SWAPF  x8E,W
0382:  ANDLW  F0
0384:  MOVWF  00
0386:  MOVLW  0F
0388:  ANDWF  F83,W
038A:  IORWF  00,W
038C:  MOVWF  F83
....................       delay_cycles(1); 
038E:  NOP   
....................       lcd.enable = 1; 
0390:  BSF    F83.0
....................       delay_us(2); 
0392:  MOVLW  03
0394:  MOVWF  00
0396:  DECFSZ 00,F
0398:  BRA    0396
....................       lcd.enable = 0; 
039A:  BCF    F83.0
039C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
039E:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
03A0:  RCALL  0346
03A2:  MOVFF  01,8D
03A6:  BTFSC  01.7
03A8:  BRA    03A0
....................       lcd.rs = address; 
03AA:  BTFSS  x8B.0
03AC:  BCF    F83.1
03AE:  BTFSC  x8B.0
03B0:  BSF    F83.1
....................       delay_cycles(1); 
03B2:  NOP   
....................       lcd.rw = 0; 
03B4:  BCF    F83.2
....................       delay_cycles(1); 
03B6:  NOP   
....................       lcd.enable = 0; 
03B8:  BCF    F83.0
....................       lcd_send_nibble(n >> 4); 
03BA:  SWAPF  x8C,W
03BC:  MOVWF  x8D
03BE:  MOVLW  0F
03C0:  ANDWF  x8D,F
03C2:  MOVFF  8D,8E
03C6:  RCALL  0380
....................       lcd_send_nibble(n & 0xf); 
03C8:  MOVF   x8C,W
03CA:  ANDLW  0F
03CC:  MOVWF  x8D
03CE:  MOVWF  x8E
03D0:  RCALL  0380
03D2:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
*
07CE:  MOVLW  00
07D0:  MOVWF  F95
07D2:  CLRF   19
07D4:  BTFSC  FF2.7
07D6:  BSF    19.7
07D8:  BCF    FF2.7
....................     delay_ms(45);                                      // modified 
07DA:  MOVLW  2D
07DC:  MOVWF  x87
07DE:  RCALL  03D4
07E0:  BTFSC  19.7
07E2:  BSF    FF2.7
....................     lcd.rs = 0; 
07E4:  BCF    F83.1
....................     lcd.rw = 0; 
07E6:  BCF    F83.2
....................     lcd.enable = 0; 
07E8:  BCF    F83.0
07EA:  CLRF   19
07EC:  BTFSC  FF2.7
07EE:  BSF    19.7
07F0:  BCF    FF2.7
....................     //delay_ms(15);                                    // modified 
....................     //for(i=1;i<=3;++i) {                              // modified 
....................     //   lcd_send_nibble(3);                           // modified 
....................     //   delay_ms(5);                                  // modified 
....................     //}                                                // modified 
....................     lcd_send_nibble(2); 
07F2:  MOVLW  02
07F4:  MOVWF  x8E
07F6:  RCALL  0380
07F8:  BTFSC  19.7
07FA:  BSF    FF2.7
....................     for(i=0;i<=3;++i) 
07FC:  CLRF   6E
07FE:  MOVF   6E,W
0800:  SUBLW  03
0802:  BNC   0834
....................        {                                                // modified 
....................           lcd_send_byte(0,LCD_INIT_STRING[i]); 
0804:  CLRF   03
0806:  MOVF   6E,W
0808:  RCALL  00AE
080A:  MOVWF  6F
080C:  CLRF   19
080E:  BTFSC  FF2.7
0810:  BSF    19.7
0812:  BCF    FF2.7
0814:  CLRF   x8B
0816:  MOVWF  x8C
0818:  RCALL  039E
081A:  BTFSC  19.7
081C:  BSF    FF2.7
081E:  CLRF   19
0820:  BTFSC  FF2.7
0822:  BSF    19.7
0824:  BCF    FF2.7
....................           delay_ms(5);                                  // modified 
0826:  MOVLW  05
0828:  MOVWF  x87
082A:  RCALL  03D4
082C:  BTFSC  19.7
082E:  BSF    FF2.7
0830:  INCF   6E,F
0832:  BRA    07FE
....................        }                                                // modified 
0834:  GOTO   0A06 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
03FA:  DECFSZ x88,W
03FC:  BRA    0400
03FE:  BRA    0406
....................      address=lcd_line_two; 
0400:  MOVLW  40
0402:  MOVWF  x89
0404:  BRA    0408
....................    else 
....................      address=0; 
0406:  CLRF   x89
....................    address+=x-1; 
0408:  MOVLW  01
040A:  SUBWF  x87,W
040C:  ADDWF  x89,F
....................    lcd_send_byte(0,0x80|address); 
040E:  MOVF   x89,W
0410:  IORLW  80
0412:  MOVWF  x8A
0414:  CLRF   x8B
0416:  MOVWF  x8C
0418:  RCALL  039E
041A:  GOTO   045E (RETURN)
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
041E:  MOVF   x86,W
0420:  XORLW  0C
0422:  BZ    042E
0424:  XORLW  06
0426:  BZ    043E
0428:  XORLW  02
042A:  BZ    044A
042C:  BRA    0454
....................      case '\f'   : lcd_send_byte(0,1); 
042E:  CLRF   x8B
0430:  MOVLW  01
0432:  MOVWF  x8C
0434:  RCALL  039E
....................                    delay_ms(2); 
0436:  MOVLW  02
0438:  MOVWF  x87
043A:  RCALL  03D4
....................                                            break; 
043C:  BRA    045E
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
043E:  MOVLW  01
0440:  MOVWF  x87
0442:  MOVLW  02
0444:  MOVWF  x88
0446:  BRA    03FA
0448:  BRA    045E
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
044A:  CLRF   x8B
044C:  MOVLW  10
044E:  MOVWF  x8C
0450:  RCALL  039E
0452:  BRA    045E
....................      default     : lcd_send_byte(1,c);     break; 
0454:  MOVLW  01
0456:  MOVWF  x8B
0458:  MOVFF  86,8C
045C:  RCALL  039E
....................    } 
045E:  RETURN 0
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... float ratioed = 0; 
....................  
.................... #INT_RDA 
.................... void int_rda_isr() { 
....................     ratioed = (*RCREG / 10.0); 
*
06C6:  MOVFF  69,03
06CA:  MOVFF  68,FE9
06CE:  MOVFF  69,FEA
06D2:  CLRF   77
06D4:  MOVFF  FEF,76
06D8:  BRA    00C2
06DA:  MOVFF  03,79
06DE:  MOVFF  02,78
06E2:  MOVFF  01,77
06E6:  MOVFF  00,76
06EA:  CLRF   7D
06EC:  CLRF   7C
06EE:  MOVLW  20
06F0:  MOVWF  7B
06F2:  MOVLW  82
06F4:  MOVWF  7A
06F6:  RCALL  00FA
06F8:  MOVFF  03,6D
06FC:  MOVFF  02,6C
0700:  MOVFF  01,6B
0704:  MOVFF  00,6A
....................     printf(lcd_putc,"\f %f %%", (ratioed / 5.0) * 100.0 ); 
0708:  MOVFF  6D,79
070C:  MOVFF  6C,78
0710:  MOVFF  6B,77
0714:  MOVFF  6A,76
0718:  CLRF   7D
071A:  CLRF   7C
071C:  MOVLW  20
071E:  MOVWF  7B
0720:  MOVLW  81
0722:  MOVWF  7A
0724:  RCALL  00FA
0726:  MOVFF  03,78
072A:  MOVFF  02,77
072E:  MOVFF  01,76
0732:  MOVFF  00,75
0736:  MOVFF  03,89
073A:  MOVFF  02,88
073E:  MOVFF  01,87
0742:  MOVFF  00,86
0746:  CLRF   x8D
0748:  CLRF   x8C
074A:  MOVLW  48
074C:  MOVWF  x8B
074E:  MOVLW  85
0750:  MOVWF  x8A
0752:  RCALL  0254
0754:  MOVFF  03,78
0758:  MOVFF  02,77
075C:  MOVFF  01,76
0760:  MOVFF  00,75
0764:  MOVLW  0C
0766:  MOVWF  x86
0768:  RCALL  041E
076A:  MOVLW  20
076C:  MOVWF  x86
076E:  RCALL  041E
0770:  MOVLW  89
0772:  MOVWF  FE9
0774:  MOVFF  78,7C
0778:  MOVFF  77,7B
077C:  MOVFF  76,7A
0780:  MOVFF  75,79
0784:  MOVLW  02
0786:  MOVWF  7D
0788:  RCALL  052E
078A:  MOVLW  20
078C:  MOVWF  x86
078E:  RCALL  041E
0790:  MOVLW  25
0792:  MOVWF  x86
0794:  RCALL  041E
....................     printf(lcd_putc,"\n Vin= %f", ratioed); 
0796:  MOVLW  C4
0798:  MOVWF  FF6
079A:  MOVLW  07
079C:  MOVWF  FF7
079E:  MOVLW  07
07A0:  MOVWF  75
07A2:  BRA    06A6
07A4:  MOVLW  89
07A6:  MOVWF  FE9
07A8:  MOVFF  6D,7C
07AC:  MOVFF  6C,7B
07B0:  MOVFF  6B,7A
07B4:  MOVFF  6A,79
07B8:  MOVLW  02
07BA:  MOVWF  7D
07BC:  RCALL  052E
07BE:  BCF    F9E.5
07C0:  GOTO   0060
.................... } 
....................  
.................... main(){ 
*
0838:  CLRF   FF8
083A:  BCF    FD0.7
083C:  BSF    07.7
083E:  MOVLW  0F
0840:  MOVWF  1B
0842:  MOVLW  92
0844:  MOVWF  1A
0846:  MOVLW  0F
0848:  MOVWF  1D
084A:  MOVLW  93
084C:  MOVWF  1C
084E:  MOVLW  0F
0850:  MOVWF  1F
0852:  MOVLW  94
0854:  MOVWF  1E
0856:  MOVLW  0F
0858:  MOVWF  21
085A:  MOVLW  95
085C:  MOVWF  20
085E:  MOVLW  0F
0860:  MOVWF  23
0862:  MOVLW  96
0864:  MOVWF  22
0866:  MOVLW  0F
0868:  MOVWF  25
086A:  MOVLW  89
086C:  MOVWF  24
086E:  MOVLW  0F
0870:  MOVWF  27
0872:  MOVLW  8A
0874:  MOVWF  26
0876:  MOVLW  0F
0878:  MOVWF  29
087A:  MOVLW  8B
087C:  MOVWF  28
087E:  MOVLW  0F
0880:  MOVWF  2B
0882:  MOVLW  8C
0884:  MOVWF  2A
0886:  MOVLW  0F
0888:  MOVWF  2D
088A:  MOVLW  8D
088C:  MOVWF  2C
088E:  MOVLW  0F
0890:  MOVWF  2F
0892:  MOVLW  80
0894:  MOVWF  2E
0896:  MOVLW  0F
0898:  MOVWF  31
089A:  MOVLW  81
089C:  MOVWF  30
089E:  MOVLW  0F
08A0:  MOVWF  33
08A2:  MOVLW  82
08A4:  MOVWF  32
08A6:  MOVLW  0F
08A8:  MOVWF  35
08AA:  MOVLW  83
08AC:  MOVWF  34
08AE:  MOVLW  0F
08B0:  MOVWF  37
08B2:  MOVLW  84
08B4:  MOVWF  36
08B6:  MOVLW  0F
08B8:  MOVWF  39
08BA:  MOVLW  C2
08BC:  MOVWF  38
08BE:  MOVLW  0F
08C0:  MOVWF  3B
08C2:  MOVLW  C1
08C4:  MOVWF  3A
08C6:  MOVLW  0F
08C8:  MOVWF  3D
08CA:  MOVLW  C0
08CC:  MOVWF  3C
08CE:  MOVLW  0F
08D0:  MOVWF  3F
08D2:  MOVLW  C3
08D4:  MOVWF  3E
08D6:  MOVLW  0F
08D8:  MOVWF  41
08DA:  MOVLW  C4
08DC:  MOVWF  40
08DE:  MOVLW  0F
08E0:  MOVWF  43
08E2:  MOVLW  C3
08E4:  MOVWF  42
08E6:  MOVLW  0F
08E8:  MOVWF  45
08EA:  MOVLW  F2
08EC:  MOVWF  44
08EE:  MOVLW  0F
08F0:  MOVWF  47
08F2:  MOVLW  F0
08F4:  MOVWF  46
08F6:  MOVLW  0F
08F8:  MOVWF  49
08FA:  MOVLW  F1
08FC:  MOVWF  48
08FE:  MOVLW  0F
0900:  MOVWF  4B
0902:  MOVLW  9D
0904:  MOVWF  4A
0906:  MOVLW  0F
0908:  MOVWF  4D
090A:  MOVLW  CD
090C:  MOVWF  4C
090E:  MOVLW  0F
0910:  MOVWF  4F
0912:  MOVLW  CA
0914:  MOVWF  4E
0916:  MOVLW  0F
0918:  MOVWF  51
091A:  MOVLW  BD
091C:  MOVWF  50
091E:  MOVLW  0F
0920:  MOVWF  53
0922:  MOVLW  BA
0924:  MOVWF  52
0926:  MOVLW  0F
0928:  MOVWF  55
092A:  MOVLW  BE
092C:  MOVWF  54
092E:  MOVLW  0F
0930:  MOVWF  57
0932:  MOVLW  BE
0934:  MOVWF  56
0936:  MOVLW  0F
0938:  MOVWF  59
093A:  MOVLW  CB
093C:  MOVWF  58
093E:  MOVLW  0F
0940:  MOVWF  5B
0942:  MOVLW  B6
0944:  MOVWF  5A
0946:  MOVLW  0F
0948:  MOVWF  5D
094A:  MOVLW  BB
094C:  MOVWF  5C
094E:  MOVLW  0F
0950:  MOVWF  5F
0952:  MOVLW  AC
0954:  MOVWF  5E
0956:  MOVLW  0F
0958:  MOVWF  61
095A:  MOVLW  AB
095C:  MOVWF  60
095E:  MOVLW  0F
0960:  MOVWF  63
0962:  MOVLW  B8
0964:  MOVWF  62
0966:  MOVLW  0F
0968:  MOVWF  65
096A:  MOVLW  AF
096C:  MOVWF  64
096E:  MOVLW  0F
0970:  MOVWF  67
0972:  MOVLW  AD
0974:  MOVWF  66
0976:  MOVLW  0F
0978:  MOVWF  69
097A:  MOVLW  AE
097C:  MOVWF  68
097E:  CLRF   6D
0980:  CLRF   6C
0982:  CLRF   6B
0984:  CLRF   6A
0986:  MOVF   FC1,W
0988:  ANDLW  C0
098A:  IORLW  0F
098C:  MOVWF  FC1
098E:  MOVLW  07
0990:  MOVWF  FB4
....................     
....................   *TRISC = 0x80;      // C7 input    
0992:  MOVFF  1E,FE9
0996:  MOVFF  1F,FEA
099A:  MOVLW  80
099C:  MOVWF  FEF
....................  
....................   TXSTA->TXEN=1;      // Transmit Enable 
099E:  MOVFF  5E,FE9
09A2:  MOVFF  5F,FEA
09A6:  BSF    FEF.5
....................   TXSTA->SYNC=0;      // Asynch Mode 
09A8:  MOVFF  5E,FE9
09AC:  MOVFF  5F,FEA
09B0:  BCF    FEF.4
....................  
....................   RCSTA->SPEN=1;      // Serial Enable 
09B2:  MOVFF  60,FE9
09B6:  MOVFF  61,FEA
09BA:  BSF    FEF.7
....................   RCSTA->CREN=1;      // Receiver Enable 
09BC:  MOVFF  60,FE9
09C0:  MOVFF  61,FEA
09C4:  BSF    FEF.4
....................  
....................   TXSTA->BRGH = 0; 
09C6:  MOVFF  5E,FE9
09CA:  MOVFF  5F,FEA
09CE:  BCF    FEF.2
....................   BAUDCON->BRG16 = 0; 
09D0:  MOVFF  62,FE9
09D4:  MOVFF  63,FEA
09D8:  BCF    FEF.3
....................   *SPBRG = 31; 
09DA:  MOVFF  64,FE9
09DE:  MOVFF  65,FEA
09E2:  MOVLW  1F
09E4:  MOVWF  FEF
....................  
....................   PIE1->RCIE=1;       // Receiver Interrupt Enable 
09E6:  MOVFF  4A,FE9
09EA:  MOVFF  4B,FEA
09EE:  BSF    FEF.5
....................   INTCON->PEIE=1; 
09F0:  MOVFF  44,FE9
09F4:  MOVFF  45,FEA
09F8:  BSF    FEF.6
....................   INTCON->GIE=1; 
09FA:  MOVFF  44,FE9
09FE:  MOVFF  45,FEA
0A02:  BSF    FEF.7
....................  
....................   lcd_init();         // LCD Panel Initialize 
0A04:  BRA    07CE
....................   while(1){ 
0A06:  BRA    0A06
....................   } 
.................... } 
....................  
0A08:  SLEEP 
....................  

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
